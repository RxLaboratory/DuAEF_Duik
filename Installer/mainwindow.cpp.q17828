#include "mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent)
{
    setupUi(this);
    logEdit->hide();
    //find AE
    findAeVersions("C:\\Program Files\\Adobe\\");
    findAeVersions("C:\\Program Files (x86)\\Adobe\\");
}

void MainWindow::findAeVersions(QString dir)
{
    QStringList filters("Adobe After Effects *");

    QDir adobeDir(dir);

    adobeDir.setNameFilters(filters);
    adobeDir.setFilter(QDir::Dirs);

    QFileInfoList versionPaths = adobeDir.entryInfoList();
    foreach(QFileInfo path,versionPaths)
    {
        QFile presetEffectsFile(path.absoluteFilePath() + "/Support Files/PresetEffects.xml");
        if (presetEffectsFile.exists())
        {
            QDir aePath(path.absoluteFilePath() + "/Support Files/");
            aePath.cdUp();
            AECheckBox *aeButton = new AECheckBox(aePath.dirName());
            aeButton->setPresetEffects(presetEffectsFile.fileName());
            //look for scriptUI
            QDir scriptUI(path.absoluteFilePath() + "/Support Files/Scripts/ScriptUI Panels/");
            if (scriptUI.exists()) aeButton->setScriptUI(scriptUI.absolutePath());
            versionsLayout->addWidget(aeButton);
            connect(aeButton,SIGNAL(chosen(QString,QString,bool)),this,SLOT(aeCheckBox_clicked(QString,QString,bool)));
        }
    }
}

void MainWindow::on_installButton_clicked()
{
    foreach(QStringList version,versionsToInstall)
    {
        bool ok = true;

        logEdit->show();
        versionsArea->hide();
        log("Beginning installation...");

        //update presetEffects.xml
        log("=======================================");
        log("Adding pseudo-effects to After Effects.");
        if (!updatePresetEffects(version[0]))
        {
            ok = false;
            log("WARNING: Could not install pseudo effects.");
            log("The pseudo effects needed by Duik could not be automatically installed.\nYou will have to edit the file 'PresetEffects.xml' yourself.\nGo to http://www.duduf.net to get help.");
        }

        //copy duik to ScriptUI Panels
        log("=======================================");
        log("Copying Duik.");
        if (!updateDuik(version[1]))
        {
            ok = false;
            QMessageBox::warning(this, "Could not copy Duik.", "Duik could not be automatically installed.\nYou will have to copy Duik in the 'ScriptUI Panels' of After Effects yourself.\nGo to http://www.duduf.net if you need help.");
        }

        if (ok)
        {
            qDebug() << "installed";
        }
    }
}

bool MainWindow::updatePresetEffects(QString presetsFileName)
{
     QFichier xmlDestination(presetsFileName);
     if (!xmlDestination.exists()) return false;
     //backup file
     QFichier backupFile(presetsFileName + ".bak");
     if (backupFile.exists()) backupFile.remove();
     QFile::copy(presetsFileName,presetsFileName + ".bak");
     if (!backupFile.exists()) return false;

     //find Duik, if exists, remove
     QStringList xml = xmlDestination.getLines(false);
     bool inDuik = false;
     for(int i = xml.size()-1;i>=0;i--)
     {
         QString line = xml[i];
         if (line.trimmed().startsWith("<!-- END DUIK"))
         {
             inDuik = true;
         }
         if (inDuik) xml.removeAt(i);
         if (line.trimmed().startsWith("<!-- BEGIN DUIK"))
         {
             inDuik = false;
         }
     }

     //load Duik xml </effects>
     QFichier xmlSource(":/duik/xml");
     QStringList xmlDuik = xmlSource.getLines();

     //write new file
     if (!xmlDestination.open(QIODevice::WriteOnly | QIODevice::Text))
     {
         return false;
     }
     QTextStream out(&xmlDestination);
     QString nextLine = "";
     for(int i = 0 ; i < xml.size();i++)
     {
         QString line = xml[i];
         if (i < xml.size()-1) nextLine = xml[i+1];
         else nextLine = "";
         out << line << endl;
         if (nextLine.trimmed().toLower().startsWith("</effects>"))
         {
             foreach(QString duikLine,xmlDuik)
             {
                 out << duikLine << endl;
             }
         }
     }
     xmlDestination.close();

     return true;
}

bool MainWindow::updateDuik(QString scriptUIpath)
{
    //remove existing Duik
    QDirIterator it(":/duikjsx");
    while (it.hasNext()) {
        it.next();
        QString name = it.fileName();
        QFile old(scriptUIpath + "/" + name);
        if (old.exists()) old.remove();
        if (!QFile::copy(it.filePath(),scriptUIpath + "/" + name))
        {
            return false;
        }
    }
    return true;
}

void MainWindow::on_cancelButton_clicked()
{
    qApp->quit();
}

void MainWindow::aeCheckBox_clicked(QString pe, QString sui, bool checked)
{
    if (checked)
    {
        QStringList v;
        v << pe << sui;
        versionsToInstall << v;
    }
    else
    {
        for(int i = versionsToInstall.length()-1; i >= 0 ;i--)
        {
            QStringList v = versionsToInstall[i];
            if (v[0] == pe)
            {
                versionsToInstall.removeAt(i);
            }
        }
    }
    if (versionsToInstall.length()) installButton->setEnabled(true);
    else installButton->setEnabled(false);
}

void MainWindow::log(QString l)
{
    logEdit->setText(logEdit->toPlainText() + l + "\n");
}
