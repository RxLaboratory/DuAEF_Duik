function buildAutomationPanelUI(tab) {

    // Useful methods
    function hideAllGroups() {
        automationGroup.visible = false;
        expressionToolsGroup.visible = false;
        effectorMapGroup.visible = false;
        randomizeGroup.visible  = false;
        walkCycleGroup.visible = false;
    }

    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1, 3];

    // A title
    DuScriptUI.staticText(tab, DuScriptUI.String.AUTOMATION_EXPRESSIONS).alignment = ['center', 'top'];

    // tools
    var toolsGroup = DuScriptUI.toolBar(this);

    var listButton = toolsGroup.addButton(
        DuScriptUI.String.CONSTRAINT_LIST,
        w12_list,
        DuScriptUI.String.CONSTRAINT_LIST_TIP
    );
    listButton.onClick = Duik.Constraint.list;

    var separateButton = toolsGroup.addButton(
        DuScriptUI.String.SEPARATE_DIMENSIONS,
        w12_separate_dimensions,
        DuScriptUI.String.CONSTRAINT_SEPARATE_TIP
    );
    separateButton.onClick = Duik.Constraint.separateDimensions;

    var removeExpButton = toolsGroup.addButton(
        DuScriptUI.String.REMOVE_EXPRESSIONS,
        w12_disable_expression,
        DuScriptUI.String.REMOVE_EXPRESSIONS_TIP
    );
    removeExpButton.onClick = Duik.Automation.removeExpressions;
    removeExpButton.onAltClick = function() {
        Duik.Automation.removeExpressions(false);
    };

    var expressionToolsButton = toolsGroup.addButton(
        DuScriptUI.String.EXPRESSION_TOOLS,
        w12_expression,
        DuScriptUI.String.EXPRESSION_TOOLS_TIP
    );
    expressionToolsButton.onClick = function() {
        if (!expressionToolsGroup.built) {
            var titleBar = createSubPanel(
                expressionToolsGroup,
                DuScriptUI.String.EXPRESSION_TOOLS,
                automationGroup,
                false
            );

            var layerSelector = DuScriptUI.selectionModeSelector(expressionToolsGroup);
            layerSelector.setCurrentIndex(2);

            DuScriptUI.staticText(
                expressionToolsGroup,
                DuScriptUI.String.THISCOMP
            );

            var compGroup = DuScriptUI.group(expressionToolsGroup);

            var removeThisCompButton = DuScriptUI.button(
                compGroup,
                DuScriptUI.String.REMOVE,
                DuScriptUI.Icon.CLOSE,
                DuScriptUI.String.REMOVE_THISCOMP_TIP
            );
            removeThisCompButton.onClick = function() {
                Duik.Constraint.removeThisCompInExpressions(layerSelector.index);
            }

            var useThisCompButton = DuScriptUI.button(
                compGroup,
                DuScriptUI.String.USE,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.USE_THISCOMP_TIP
            );
            useThisCompButton.onClick = function() {
                Duik.Constraint.removeCompInExpressions(layerSelector.index);
            }

            DuScriptUI.staticText(
                expressionToolsGroup,
                DuScriptUI.String.THISLAYER
            );

            var layerGroup = DuScriptUI.group(expressionToolsGroup);

            var removeThisLayerButton = DuScriptUI.button(
                layerGroup,
                DuScriptUI.String.REMOVE,
                DuScriptUI.Icon.CLOSE,
                DuScriptUI.String.REMOVE_THISLAYER_TIP
            );
            removeThisLayerButton.onClick = function() {
                Duik.Constraint.removeThisLayerInExpressions(layerSelector.index);
            }

            var useThisLayerButton = DuScriptUI.button(
                layerGroup,
                DuScriptUI.String.USE,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.USE_THISLAYER_TIP
            );
            useThisLayerButton.onClick = function() {
                Duik.Constraint.removeLayerInExpressions(layerSelector.index);
            }

            expressionToolsGroup.built = true;

            DuScriptUI.showUI(expressionToolsGroup);
        }

        hideAllGroups();
        expressionToolsGroup.visible = true;
    }

    var copyExpButton = toolsGroup.addButton(
        DuScriptUI.String.COPY_EXPRESSION,
        w12_copy_expression,
        DuScriptUI.String.COPY_EXPRESSION_TIP
    );
    copyExpButton.onClick = Duik.Automation.copyExpression;

    var pasteExpButton = toolsGroup.addButton(
        DuScriptUI.String.PASTE_EXPRESSION,
        w12_paste_expression,
        DuScriptUI.String.PASTE_EXPRESSION_TIP
    );
    pasteExpButton.onClick = Duik.Automation.pasteExpression;

    var editExpressionButton = toolsGroup.addButton(
        DuScriptUI.String.EDIT_EXPRESSION,
        w12_expression_file,
        DuScriptUI.String.EDIT_EXPRESSION_TIP,
        true
    );
    editExpressionButton.optionsPopup.build = function() {

        // Default settings
        DuESF.scriptSettings.data.expression = def(DuESF.scriptSettings.data.expression, {});
        DuESF.scriptSettings.data.expression.expressionEditor = def(DuESF.scriptSettings.data.expression.expressionEditor, "");

        // The list of expressions currently being edited
        // Associative array filename -> DuAEProperty.
        var editingExpressions = {};

        var editorSelector = DuScriptUI.fileSelector(
            editExpressionButton.optionsPanel,
            DuScriptUI.String.EXPRESSION_SELECT_EDITOR,
            true,
            DuScriptUI.String.EXPRESSION_SELECT_EDITOR_TIP,
            undefined,
            'open',
            undefined,
            'column'
        );
        editorSelector.onChange = function() {
            var f = editorSelector.getFile();
            if (!f && editorSelector.editText.text != "") return;
            if (f) DuESF.scriptSettings.data.expression.expressionEditor = f.absoluteURI;
            else DuESF.scriptSettings.data.expression.expressionEditor = "";
            DuESF.scriptSettings.save();
        };

        editorSelector.setPath( DuESF.scriptSettings.data.expression.expressionEditor );
        editorSelector.setPlaceholder( DuScriptUI.String.SYSTEM_DEFAULT );

        editExpressionButton.onClick = function() {
            // Get the selected property
            var prop = DuAEComp.getSelectedProperty();
            var editFile = Duik.Tool.editExpression(prop);
            if (editFile) editingExpressions[editFile.absoluteURI] = prop;
        };

        editExpressionButton.onCtrlClick = function() {
            DuAE.beginUndoGroup(DuScriptUI.String.EDIT_EXPRESSION);
            for (f in editingExpressions) {
                var file = new File(f);
                if (file.exists) {
                    if (file.open('r')){
                        editingExpressions[f].setExpression(file.read(), false);
                        file.close();
                    }
                }
                else {
                    delete editingExpressions[f];
                }
            };
            DuAE.endUndoGroup(DuScriptUI.String.EDIT_EXPRESSION);
        };
    };

    var randomizeButton = toolsGroup.addButton(
        DuScriptUI.String.RANDOMIZE + "...",
        w12_randomize,
        DuScriptUI.String.RANDOMIZE_TIP
    );
    randomizeButton.onClick = function() {
        if (!randomizeGroup.built) {

            createSubPanel(
                randomizeGroup,
                DuScriptUI.String.RANDOMIZE,
                automationGroup,
                false
            );

            var attrSelector = DuScriptUI.selector( randomizeGroup );
            attrSelector.addButton(
                DuScriptUI.String.CURRENT_VALUES,
                w16_values,
                DuScriptUI.String.CURRENT_VALUES_TIP
            );
            attrSelector.addButton(
                DuScriptUI.String.LAYER_ATTRIBUTES,
                w16_layers,
                DuScriptUI.String.LAYER_ATTRIBUTES_TIP
            );
            attrSelector.addButton(
                DuScriptUI.String.KEYFRAMES,
                w16_keyframe,
                DuScriptUI.String.KEYFRAMES_TIP
            );
            attrSelector.setCurrentIndex(0);
            attrSelector.onChange = function() {
                var i = attrSelector.index;
                valuesGroup.visible = i == 0;
                layersGroup.visible = i == 1;
                keysGroup.visible = i == 2;
            }

            var modeSelector = DuScriptUI.selector( randomizeGroup );
            modeSelector.addButton(
                DuScriptUI.String.NATURAL_GAUSSIAN,
                w16_gaussian,
                DuScriptUI.String.NATURAL_GAUSSIAN_TIP
            );
            modeSelector.addButton(
                DuScriptUI.String.STRICT,
                w16_strict,
                DuScriptUI.String.STRICT_TIP
            );
            modeSelector.setCurrentIndex(0);

            var offsetSelector = DuScriptUI.selector( randomizeGroup );
            offsetSelector.addButton(
                DuScriptUI.String.OFFSET_VALUES,
                w16_offset,
                DuScriptUI.String.OFFSET_VALUES_TIP
            );
            offsetSelector.addButton(
                DuScriptUI.String.ABSOLUTE_VALUES,
                w16_locator,
                DuScriptUI.String.ABSOLUTE_VALUES_TIP
            );
            offsetSelector.setCurrentIndex(0);
            offsetSelector.onChange = function() {
                if ( offsetSelector.index == 0 ) {
                    if ( valuesSeparateSelector.index == 0 ) valuesXLabel.text = "V + ";
                    else valuesXLabel.text = "X + ";
                    valuesYLabel.text = "Y + ";
                    valuesZLabel.text = "Z + ";
                    layersVLabel.text = "V + ";
                    if ( keysSeparateSelector.index == 0 || keysSelector.index == 0 ) keysXLabel.text = "V + ";
                    else keysXLabel.text = "X + ";
                    keysYLabel.text = "Y + ";
                    keysZLabel.text = "Z + ";
                }
                else {
                    if ( valuesSeparateSelector.index == 0 ) valuesXLabel.text = "V = ";
                    else valuesXLabel.text = "X = ";
                    valuesYLabel.text = "Y = ";
                    valuesZLabel.text = "Z = ";
                    layersVLabel.text = "V = ";
                    if ( keysSeparateSelector.index == 0 || keysSelector.index == 0 ) keysXLabel.text = "V = ";
                    else keysXLabel.text = "X = ";
                    keysYLabel.text = "Y = ";
                    keysZLabel.text = "Z = ";
                }
            }

            var stack = DuScriptUI.group( randomizeGroup, 'stack');

            var valuesGroup = DuScriptUI.group(stack, 'column');

            var valuesSeparateSelector = DuScriptUI.selector(valuesGroup);
            valuesSeparateSelector.addButton(
                DuScriptUI.String.COLLAPSE_DIMENSIONS,
                w16_collapse_dimensions,
                DuScriptUI.String.COLLAPSE_DIMENSIONS_TIP
            );
            valuesSeparateSelector.addButton(
                DuScriptUI.String.SEPARATE_DIMENSIONS,
                w16_separate_dimensions,
                DuScriptUI.String.SEPARATE_DIMENSIONS_TIP
            );
            valuesSeparateSelector.setCurrentIndex(1);
            valuesSeparateSelector.onChange = function() {
                if ( valuesSeparateSelector.index == 0 ) {
                    valuesYGroup.visible = false;
                    valuesZGroup.visible = false;
                }
                else {
                    valuesYGroup.visible = true;
                    valuesZGroup.visible = true;
                }
                offsetSelector.onChange();
            };

            var valuesXGroup = DuScriptUI.group( valuesGroup );
            var valuesXLabel = valuesXGroup.add('statictext', undefined, "X + ");
            valuesXLabel.alignment = ['fill', 'fill'];

            var valuesXMinEdit = DuScriptUI.editText(
                valuesXGroup,
                '',
                '',
                '',
                'Min'
            );
            valuesXMinEdit.alignment = ['fill', 'fill'];
            var valuesXMaxEdit = DuScriptUI.editText(
                valuesXGroup,
                '',
                '',
                '',
                'Max'
            );
            valuesXMaxEdit.alignment = ['fill', 'fill'];

            var valuesYGroup = DuScriptUI.group( valuesGroup );
            var valuesYLabel = valuesYGroup.add('statictext', undefined, "Y + ");
            valuesYLabel.alignment = ['fill', 'fill'];

            var valuesYMinEdit = DuScriptUI.editText(
                valuesYGroup,
                '',
                '',
                '',
                'Min'
            );
            valuesYMinEdit.alignment = ['fill', 'fill'];
            var valuesYMaxEdit = DuScriptUI.editText(
                valuesYGroup,
                '',
                '',
                '',
                'Max'
            );
            valuesYMaxEdit.alignment = ['fill', 'fill'];

            var valuesZGroup = DuScriptUI.group( valuesGroup );
            var valuesZLabel = valuesZGroup.add('statictext', undefined, "Z + ");
            valuesZLabel.alignment = ['fill', 'fill'];

            var valuesZMinEdit = DuScriptUI.editText(
                valuesZGroup,
                '',
                '',
                '',
                'Min'
            );
            valuesZMinEdit.alignment = ['fill', 'fill'];
            var valuesZMaxEdit = DuScriptUI.editText(
                valuesZGroup,
                '',
                '',
                '',
                'Max'
            );
            valuesZMaxEdit.alignment = ['fill', 'fill'];

            var layersGroup = DuScriptUI.group(stack, 'column');
            layersGroup.visible = false;

            var layersIndicesButton = DuScriptUI.checkBox(
                layersGroup,
                DuScriptUI.String.INDICES,
                w16_indices_random
            );

            var layersTimeButton = DuScriptUI.checkBox(
                layersGroup,
                DuScriptUI.String.TIMES,
                w16_times_random
            );
            layersTimeButton.setChecked(true);

            var layersInButton = DuScriptUI.checkBox(
                layersGroup,
                DuScriptUI.String.IN_POINTS,
                w16_in_points_random
            );

            var layersOutButton = DuScriptUI.checkBox(
                layersGroup,
                DuScriptUI.String.OUT_POINTS,
                w16_out_points_random
            );

            var layersVGroup = DuScriptUI.group( layersGroup );
            var layersVLabel = layersVGroup.add('statictext', undefined, "V + ");
            layersVLabel.alignment = ['fill', 'fill'];

            var layersVMinEdit = DuScriptUI.editText(
                layersVGroup,
                '',
                '',
                '',
                'Min'
            );
            layersVMinEdit.alignment = ['fill', 'fill'];
            var layersVMaxEdit = DuScriptUI.editText(
                layersVGroup,
                '',
                '',
                '',
                'Max'
            );
            layersVMaxEdit.alignment = ['fill', 'fill'];

            var keysGroup = DuScriptUI.group(stack, 'column');
            keysGroup.visible = false;

            var keysSelector = DuScriptUI.selector( keysGroup );

            keysSelector.addButton(
                DuScriptUI.String.TIMES,
                w16_keyframe_times_random
            );
            keysSelector.addButton(
                DuScriptUI.String.VALUES,
                w16_random
            );
            keysSelector.setCurrentIndex( 1 );
            keysSelector.onChange = function () {
                if (keysSelector.index == 0) {
                    keysYGroup.visible = false;
                    keysZGroup.visible = false;
                    keysSeparateSelector.visible = false;
                } else {
                    var i = keysSeparateSelector.index == 1;
                    keysYGroup.visible = i;
                    keysZGroup.visible = i;
                    keysSeparateSelector.visible = true;
                }
                offsetSelector.onChange();
            };

            var keysSeparateSelector = DuScriptUI.selector(keysGroup);
            keysSeparateSelector.addButton(
                DuScriptUI.String.COLLAPSE_DIMENSIONS,
                w16_collapse_dimensions,
                DuScriptUI.String.COLLAPSE_DIMENSIONS_TIP
            );
            keysSeparateSelector.addButton(
                DuScriptUI.String.SEPARATE_DIMENSIONS,
                w16_separate_dimensions,
                DuScriptUI.String.SEPARATE_DIMENSIONS_TIP
            );
            keysSeparateSelector.setCurrentIndex(1);
            keysSeparateSelector.onChange = function() {
                if ( keysSeparateSelector.index == 0 ) {
                    keysYGroup.visible = false;
                    keysZGroup.visible = false;
                }
                else {
                    keysYGroup.visible = true;
                    keysZGroup.visible = true;
                }
                offsetSelector.onChange();
            };

            var keysXGroup = DuScriptUI.group( keysGroup );
            var keysXLabel = keysXGroup.add('statictext', undefined, "X + ");
            keysXLabel.alignment = ['fill', 'fill'];

            var keysXMinEdit = DuScriptUI.editText(
                keysXGroup,
                '',
                '',
                '',
                'Min'
            );
            keysXMinEdit.alignment = ['fill', 'fill'];
            var keysXMaxEdit = DuScriptUI.editText(
                keysXGroup,
                '',
                '',
                '',
                'Max'
            );
            keysXMaxEdit.alignment = ['fill', 'fill'];

            var keysYGroup = DuScriptUI.group( keysGroup );
            var keysYLabel = keysYGroup.add('statictext', undefined, "Y + ");
            keysYLabel.alignment = ['fill', 'fill'];

            var keysYMinEdit = DuScriptUI.editText(
                keysYGroup,
                '',
                '',
                '',
                'Min'
            );
            keysYMinEdit.alignment = ['fill', 'fill'];
            var keysYMaxEdit = DuScriptUI.editText(
                keysYGroup,
                '',
                '',
                '',
                'Max'
            );
            keysYMaxEdit.alignment = ['fill', 'fill'];

            var keysZGroup = DuScriptUI.group( keysGroup );
            var keysZLabel = keysZGroup.add('statictext', undefined, "Z + ");
            keysZLabel.alignment = ['fill', 'fill'];

            var keysZMinEdit = DuScriptUI.editText(
                keysZGroup,
                '',
                '',
                '',
                'Min'
            );
            keysZMinEdit.alignment = ['fill', 'fill'];
            var keysZMaxEdit = DuScriptUI.editText(
                keysZGroup,
                '',
                '',
                '',
                'Max'
            );
            keysZMaxEdit.alignment = ['fill', 'fill'];


            DuScriptUI.separator( randomizeGroup );
            var okButton = DuScriptUI.button(
                randomizeGroup,
                DuScriptUI.String.RANDOMIZE,
                w12_randomize,
                DuScriptUI.String.RANDOMIZE_TIP,
                false,
                'row',
                'center'
            );
            okButton.onClick = function() {

                var offset = offsetSelector.index == 0;
                var gaussian = modeSelector.index == 0;

                if (attrSelector.index == 0) { // values
                    var xMin = parseFloat( valuesXMinEdit.text );
                    var xMax = parseFloat( valuesXMaxEdit.text );
                    var yMin = parseFloat( valuesYMinEdit.text );
                    var yMax = parseFloat( valuesYMaxEdit.text );
                    var zMin = parseFloat( valuesZMinEdit.text );
                    var zMax = parseFloat( valuesZMaxEdit.text );
                    var separate = valuesSeparateSelector.index == 1;
                    
                    Duik.Automation.randomizeValues(xMin, xMax, yMin, yMax, zMin, zMax, offset, separate, gaussian);

                } else if (attrSelector.index == 1) { // Layers
                    var min = parseFloat( layersVMinEdit.text );
                    var max = parseFloat( layersVMaxEdit.text );

                    if (isNaN(min)) return;
                    if (isNaN(max)) return;

                    if (layersTimeButton.checked) Duik.Automation.randomizeLayerTimes(min, max, offset, gaussian);
                    if (layersIndicesButton.checked) Duik.Automation.randomizeLayerIndices(min, max, offset, gaussian);
                    if (layersInButton.checked) Duik.Automation.randomizeLayerInPoints(min, max, offset, gaussian);
                    if (layersOutButton.checked) Duik.Automation.randomizeLayerOutPoints(min, max, offset, gaussian);                    
                }
                else { // keyframes
                    if (keysSelector.index == 0) { // times
                        var min = parseFloat( keysXMinEdit.text );
                        var max = parseFloat( keysXMaxEdit.text );

                        if (isNaN(min)) return;
                        if (isNaN(max)) return;

                        Duik.Automation.randomizeKeyTimes(min, max, offset, gaussian);
                    }
                    else { //values 
                        var xMin = parseFloat( keysXMinEdit.text );
                        var xMax = parseFloat( keysXMaxEdit.text );
                        var yMin = parseFloat( keysYMinEdit.text );
                        var yMax = parseFloat( keysYMaxEdit.text );
                        var zMin = parseFloat( keysZMinEdit.text );
                        var zMax = parseFloat( keysZMaxEdit.text );
                        var separate = keysSeparateSelector.index == 1;

                        Duik.Automation.randomizeKeyValues(xMin, xMax, yMin, yMax, zMin, zMax, offset, separate, gaussian);
                    }
                }
            };

            randomizeGroup.built = true;
            DuScriptUI.showUI(randomizeGroup);
        }

        hideAllGroups();
        randomizeGroup.visible = true;
    };

    var bakeExpButton = toolsGroup.addButton(
        DuScriptUI.String.BAKE_EXPRESSIONS,
        w12_expression_baker,
        DuScriptUI.String.BAKE_EXPRESSIONS_TIP,
        true
    );
    bakeExpButton.optionsPopup.build = function() {
        var selectionModeSelector = DuScriptUI.selectionModeSelector(bakeExpButton.optionsPanel);
        selectionModeSelector.setCurrentIndex(0);

        var bakeMethodSelector = DuScriptUI.selector(
            bakeExpButton.optionsPanel
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.SMART_MODE,
            w16_autorig,
            DuScriptUI.String.BAKE_EXPRESSION_SMART_MODE_TIP
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.PRECISE_MODE,
            w16_quick,
            DuScriptUI.String.BAKE_EXPRESSION_PRECISE_MODE_TIP
        );
        bakeMethodSelector.setCurrentIndex(0);

        var stepEdit = DuScriptUI.editText(
            bakeExpButton.optionsPanel,
            '1',
            tr(DuScriptUI.String.PRECISION_FACTOR) + ': ',
            '',
            "",
            tr(DuScriptUI.String.PRECISION_FACTOR_TIP),
            false
        );

        bakeExpButton.onClick = function() {
            var step = parseFloat(stepEdit.text);
            if (isNaN(step)) step = 1;
            step = 1 / step;
            Duik.Automation.bakeExpressions(bakeMethodSelector.index, step, selectionModeSelector.index);
        };
    }

    var bakeCompButton = toolsGroup.addButton(
        DuScriptUI.String.BAKE_COMPOSITION,
        w12_comp_baker,
        DuScriptUI.String.BAKE_COMPOSITION_TIP,
        true
    );
    bakeCompButton.optionsPopup.build = function() {
        var selectionModeSelector = DuScriptUI.selectionModeSelector(bakeCompButton.optionsPanel, DuAE.SelectionMode.SELECTED_LAYERS);
        selectionModeSelector.setCurrentIndex(1);

        var bakeMethodSelector = DuScriptUI.selector(
            bakeCompButton.optionsPanel
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.SMART_MODE,
            w16_autorig,
            DuScriptUI.String.BAKE_EXPRESSION_SMART_MODE_TIP
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.PRECISE_MODE,
            w16_quick,
            DuScriptUI.String.BAKE_EXPRESSION_PRECISE_MODE_TIP
        );
        bakeMethodSelector.setCurrentIndex(0);

        var stepEdit = DuScriptUI.editText(
            bakeCompButton.optionsPanel,
            '1',
            tr(DuScriptUI.String.PRECISION_FACTOR) + ': ',
            '',
            "",
            tr(DuScriptUI.String.PRECISION_FACTOR_TIP),
            false
        );

        bakeCompButton.onClick = function() {
            var step = parseFloat(stepEdit.text);
            if (isNaN(step)) step = 1;
            step = 1 / step;
            Duik.Automation.bakeComposition(bakeMethodSelector.index, step, selectionModeSelector.index + 1);
        };
    }

    var timeRemapButton = toolsGroup.addButton(
        DuScriptUI.String.TIME_REMAP,
        w12_time_remap,
        DuScriptUI.String.TIME_REMAP_TIP
    );
    timeRemapButton.onClick = Duik.Automation.timeRemap;

    var mainGroup = DuScriptUI.group(this, 'stacked');
    //mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var automationGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) automationGroup.spacing = 3;

    var line1 = DuScriptUI.group(automationGroup, uiMode >= 2 ? 'row' : 'column');

    createKleanerButton( line1 );

    var effectorButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.EFFECTOR,
        w16_effector,
        DuScriptUI.String.EFFECTOR_TIP
    );
    effectorButton.onClick = Duik.Automation.effector;

    var effectorMapButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.EFFECTOR_MAP + '...',
        w16_effector_map,
        DuScriptUI.String.EFFECTOR_MAP_TIP,
        false,
        undefined,
        undefined,
        false
    );
    effectorMapButton.onClick = function() {
        if (!effectorMapGroup.built) {
            buildEffectorMapGroup(effectorMapGroup, automationGroup);
        }

        // Set the layer
        effectorMapGroup.layerSelector.refresh();
        var layer = DuAEComp.getActiveLayer();
        if (layer) effectorMapGroup.layerSelector.setCurrentIndex(layer.index);

        hideAllGroups();
        effectorMapGroup.visible = true;
    };

    var wiggleButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.WIGGLE,
        w16_wiggle,
        DuScriptUI.String.WIGGLE_TIP,
        true
    );
    wiggleButton.optionsPopup.build = function() {
        var dimSelector = DuScriptUI.selector(  wiggleButton.optionsPanel );
        dimSelector.addButton(
            DuScriptUI.String.COLLAPSE_DIMENSIONS,
            w16_collapse_dimensions,
            DuScriptUI.String.COLLAPSE_DIMENSIONS_TIP
        );
        dimSelector.addButton(
            DuScriptUI.String.SEPARATE_DIMENSIONS,
            w16_separate_dimensions,
            DuScriptUI.String.SEPARATE_DIMENSIONS_TIP
        );
        dimSelector.setCurrentIndex(0);
       
        var controlSelector = DuScriptUI.selector(  wiggleButton.optionsPanel );
        controlSelector.addButton(
            DuScriptUI.String.INDIVIDUAL_CONTROLS,
            w16_individual_control,
            DuScriptUI.String.INDIVIDUAL_CONTROLS_TIP
        );
        controlSelector.addButton(
            DuScriptUI.String.UNIFIED_CONTROL,
            w16_unified_control,
            DuScriptUI.String.UNIFIED_CONTROL_TIP
        );
        controlSelector.setCurrentIndex(1);

        wiggleButton.onClick = function() {
        Duik.Automation.wiggle(
            dimSelector.index == 1, 
            controlSelector.index == 0
            );
        };
    };

    var randomButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.RANDOM_MOTION,
        w16_random,
        DuScriptUI.String.RANDOM_MOTION_TIP,
        true
    );
    randomButton.optionsPopup.build = function() {
        var dimSelector = DuScriptUI.selector(  randomButton.optionsPanel );
        dimSelector.addButton(
            DuScriptUI.String.COLLAPSE_DIMENSIONS,
            w16_collapse_dimensions,
            DuScriptUI.String.COLLAPSE_DIMENSIONS_TIP
        );
        dimSelector.addButton(
            DuScriptUI.String.SEPARATE_DIMENSIONS,
            w16_separate_dimensions,
            DuScriptUI.String.SEPARATE_DIMENSIONS_TIP
        );
        dimSelector.setCurrentIndex(0);
       
        var controlSelector = DuScriptUI.selector(  randomButton.optionsPanel );
        controlSelector.addButton(
            DuScriptUI.String.INDIVIDUAL_CONTROLS,
            w16_individual_control,
            DuScriptUI.String.INDIVIDUAL_CONTROLS_TIP
        );
        controlSelector.addButton(
            DuScriptUI.String.UNIFIED_CONTROL,
            w16_unified_control,
            DuScriptUI.String.UNIFIED_CONTROL_TIP
        );
        controlSelector.setCurrentIndex(1);

        randomButton.onClick = function() {
        Duik.Automation.random(
            dimSelector.index == 1, 
            controlSelector.index == 0
            );
        };
    };

    var line2 = DuScriptUI.group(automationGroup, uiMode >= 2 ? 'row' : 'column');
    
    var swinkButton = DuScriptUI.multiButton(
            line2,
            DuScriptUI.String.SWINK,
            w16_swink,
            DuScriptUI.String.SWINK_TIP
        );
    swinkButton.build = function() {
        var swingButton = this.addButton(
            DuScriptUI.String.SWING,
            undefined,
            DuScriptUI.String.SWING_TIP
        );

        var blinkButton = this.addButton(
            DuScriptUI.String.BLINK,
            undefined,
            DuScriptUI.String.BLINK_TIP
        );

        swingButton.onClick = function() {
            Duik.Automation.swink();
        };

        blinkButton.onClick = function() {
            DuAE.beginUndoGroup(DuScriptUI.String.BLINK);

            var effects = Duik.Automation.swink();

            var i = Duik.PseudoEffect.ONED_SWINK.props;
            for (var e = 0, n = effects.length; e < n; e++)
            {
                var effect = effects[e];
                effect.prop(i['Interpolation']['Mode'].index).setValue(1);
            }
            DuAE.endUndoGroup();
        };
    };

    var wheelButton = DuScriptUI.button(
            line2,
            DuScriptUI.String.WHEEL,
            w16_wheel,
            DuScriptUI.String.WHEEL_TIP
        );
    wheelButton.onClick = Duik.Automation.wheel;

    var moveAwayButton = DuScriptUI.button(
            line2,
            DuScriptUI.String.MOVE_AWAY,
            w16_move_away,
            DuScriptUI.String.MOVE_AWAY_TIP
        );
    moveAwayButton.onClick = Duik.Automation.moveAway;

    var looperButton = DuScriptUI.button(
        line2,
        DuScriptUI.String.LOOPER,
        w16_looper,
        DuScriptUI.String.LOOPER_TIP
    );
    looperButton.onClick = Duik.Automation.looper;

    var motionTrailButton = DuScriptUI.button(
        line2,
        DuScriptUI.String.MOTION_TRAIL,
        w16_motion_trail,
        DuScriptUI.String.MOTION_TRAIL_TIP
    );
    motionTrailButton.onClick = Duik.Automation.motionTrail;
    motionTrailButton.onAltClick = function() { Duik.Automation.motionTrail(true) };

    var line3 = DuScriptUI.group(automationGroup, uiMode >= 2 ? 'row' : 'column');

    var walkButton = DuScriptUI.button( line3, {
        text: DuScriptUI.String.WALK_RUN_CYCLE,
        helpTip: DuScriptUI.String.WALK_RUN_CYCLE_TIP,
        image: w16_walk_cycle,
        options: true,
        optionsWithoutPanel: true
    });
    walkButton.onClick = Duik.Automation.walk;
    walkButton.onOptions = function( show ) {
        if (!walkCycleGroup.built) {
            createSubPanel(
                walkCycleGroup,
                DuScriptUI.String.WALK_RUN_CYCLE,
                automationGroup,
                false
            );

            // Add the layer selectors
            var form = DuScriptUI.layerPicker(walkCycleGroup);
            walkCycleGroup.headSelector = form.addSelector(DuScriptUI.String.HEAD);
            walkCycleGroup.neckSelector = form.addSelector(DuScriptUI.String.NECK);
            walkCycleGroup.torsoSelector = form.addSelector(DuScriptUI.String.TORSO);
            walkCycleGroup.spineSelector = form.addSelector(DuScriptUI.String.SPINE);
            walkCycleGroup.hipsSelector = form.addSelector(DuScriptUI.String.HIPS);
            walkCycleGroup.bodySelector = form.addSelector(DuScriptUI.String.BODY);
            walkCycleGroup.rHandSelector = form.addSelector(DuScriptUI.String.RIGHT_HAND);
            walkCycleGroup.lHandSelector = form.addSelector(DuScriptUI.String.LEFT_HAND);
            walkCycleGroup.rFootSelector = form.addSelector(DuScriptUI.String.RIGHT_FOOT);
            walkCycleGroup.lFootSelector = form.addSelector(DuScriptUI.String.LEFT_FOOT);

            // Apply button
            DuScriptUI.separator( walkCycleGroup );
            var okButton = DuScriptUI.button( walkCycleGroup, {
                text: DuScriptUI.String.WALK_RUN_CYCLE,
                helpTip: DuScriptUI.String.WALK_RUN_CYCLE_TIP,
                image: w16_walk_cycle,
                orientation: 'row',
                alignment: 'center',
            });
            okButton.onClick = function() {
                // Get controls
                var ctrls = {};
                var comp = DuAEProject.getActiveComp();
                if (walkCycleGroup.headSelector.index) ctrls.head = comp.layer(walkCycleGroup.headSelector.index);
                if (walkCycleGroup.neckSelector.index) ctrls.neck = comp.layer(walkCycleGroup.neckSelector.index);
                if (walkCycleGroup.torsoSelector.index) ctrls.torso = comp.layer(walkCycleGroup.torsoSelector.index);
                if (walkCycleGroup.spineSelector.index) ctrls.spine = comp.layer(walkCycleGroup.spineSelector.index);
                if (walkCycleGroup.hipsSelector.index) ctrls.hips = comp.layer(walkCycleGroup.hipsSelector.index);
                if (walkCycleGroup.bodySelector.index) ctrls.body = comp.layer(walkCycleGroup.bodySelector.index);
                if (walkCycleGroup.rHandSelector.index) ctrls.rHand = comp.layer(walkCycleGroup.rHandSelector.index);
                if (walkCycleGroup.lHandSelector.index) ctrls.lHand = comp.layer(walkCycleGroup.lHandSelector.index);
                if (walkCycleGroup.rFootSelector.index) ctrls.rFoot = comp.layer(walkCycleGroup.rFootSelector.index);
                if (walkCycleGroup.lFootSelector.index) ctrls.lFoot = comp.layer(walkCycleGroup.lFootSelector.index);

                Duik.Automation.rigWalk( ctrls );
            };

            DuScriptUI.showUI(walkCycleGroup);
        }
        var ctrls = Duik.Automation.getWalkCtrls();
        if (ctrls.head) walkCycleGroup.headSelector.setCurrentIndex( ctrls.head.index );
        if (ctrls.neck)  walkCycleGroup.neckSelector.setCurrentIndex( ctrls.neck.index );
        if (ctrls.torso)  walkCycleGroup.torsoSelector.setCurrentIndex( ctrls.torso.index );
        if (ctrls.spine)  walkCycleGroup.spineSelector.setCurrentIndex( ctrls.spine.index );
        if (ctrls.body)  walkCycleGroup.bodySelector.setCurrentIndex( ctrls.body.index );
        if (ctrls.hips)  walkCycleGroup.hipsSelector.setCurrentIndex( ctrls.hips.index );
        if (ctrls.rHand)  walkCycleGroup.rHandSelector.setCurrentIndex( ctrls.rHand.index );
        if (ctrls.lHand)  walkCycleGroup.lHandSelector.setCurrentIndex( ctrls.lHand.index );
        if (ctrls.rFoot)  walkCycleGroup.rFootSelector.setCurrentIndex( ctrls.rFoot.index );
        if (ctrls.lFoot)  walkCycleGroup.lFootSelector.setCurrentIndex( ctrls.lFoot.index );
        
        if (show) {
            hideAllGroups();
            walkCycleGroup.visible = true;
        }
    };

    createXSheetButton( line3 );

    var paintRigButton = DuScriptUI.button(
        line3,
        DuScriptUI.String.PAINT_RIG,
        w16_paint,
        DuScriptUI.String.PAINT_RIG_TIP
    );
    paintRigButton.onClick = Duik.Automation.paintRig;

    var expressionToolsGroup = DuScriptUI.group(mainGroup, 'column');
    expressionToolsGroup.visible = false;
    expressionToolsGroup.built = false;

    var effectorMapGroup = DuScriptUI.group(mainGroup, 'column');
    effectorMapGroup.visible = false;
    effectorMapGroup.built = false;

    var randomizeGroup = DuScriptUI.group(mainGroup, 'column');
    randomizeGroup.visible = false;
    randomizeGroup.built = false;

    var walkCycleGroup = DuScriptUI.group(mainGroup, 'column');
    walkCycleGroup.visible = false;
    walkCycleGroup.built = false;
}