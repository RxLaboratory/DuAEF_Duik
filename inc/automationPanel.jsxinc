function buildAutomationPanelUI(tab) {

    // Useful methods
    function hideAllGroups() {
        automationGroup.visible = false;
        expressionToolsGroup.visible = false;
        effectorMapGroup.visible = false;
    }

    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1, 3];

    // A title
    DuScriptUI.staticText(tab, DuScriptUI.String.AUTOMATION_EXPRESSIONS).alignment = ['center', 'top'];

    // tools
    var toolsGroup = DuScriptUI.toolBar(this);

    var listButton = toolsGroup.addButton(
        DuScriptUI.String.CONSTRAINT_LIST,
        w12_list,
        DuScriptUI.String.CONSTRAINT_LIST_TIP
    );
    listButton.onClick = Duik.Constraint.list;

    var separateButton = toolsGroup.addButton(
        DuScriptUI.String.SEPARATE_DIMENSIONS,
        w12_separate_dimensions,
        DuScriptUI.String.CONSTRAINT_SEPARATE_TIP
    );
    separateButton.onClick = Duik.Constraint.separateDimensions;

    var removeExpButton = toolsGroup.addButton(
        DuScriptUI.String.REMOVE_EXPRESSIONS,
        w12_disable_expression,
        DuScriptUI.String.REMOVE_EXPRESSIONS_TIP
    );
    removeExpButton.onClick = Duik.Automation.removeExpressions;
    removeExpButton.onAltClick = function() {
        Duik.Automation.removeExpressions(false);
    };

    var expressionToolsButton = toolsGroup.addButton(
        DuScriptUI.String.EXPRESSION_TOOLS,
        w12_expression,
        DuScriptUI.String.EXPRESSION_TOOLS_TIP
    );
    expressionToolsButton.onClick = function() {
        if (!expressionToolsGroup.built) {
            var layerSelector = DuScriptUI.selectionModeSelector(expressionToolsGroup);
            layerSelector.setCurrentIndex(2);

            DuScriptUI.staticText(
                expressionToolsGroup,
                DuScriptUI.String.THISCOMP
            );

            var compGroup = DuScriptUI.group(expressionToolsGroup);

            var removeThisCompButton = DuScriptUI.button(
                compGroup,
                DuScriptUI.String.REMOVE,
                DuScriptUI.Icon.CLOSE,
                DuScriptUI.String.REMOVE_THISCOMP_TIP
            );
            removeThisCompButton.onClick = function() {
                Duik.Constraint.removeThisCompInExpressions(layerSelector.index);
            }

            var useThisCompButton = DuScriptUI.button(
                compGroup,
                DuScriptUI.String.USE,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.USE_THISCOMP_TIP
            );
            useThisCompButton.onClick = function() {
                Duik.Constraint.removeCompInExpressions(layerSelector.index);
            }

            DuScriptUI.staticText(
                expressionToolsGroup,
                DuScriptUI.String.THISLAYER
            );

            var layerGroup = DuScriptUI.group(expressionToolsGroup);

            var removeThisLayerButton = DuScriptUI.button(
                layerGroup,
                DuScriptUI.String.REMOVE,
                DuScriptUI.Icon.CLOSE,
                DuScriptUI.String.REMOVE_THISLAYER_TIP
            );
            removeThisLayerButton.onClick = function() {
                Duik.Constraint.removeThisLayerInExpressions(layerSelector.index);
            }


            var useThisLayerButton = DuScriptUI.button(
                layerGroup,
                DuScriptUI.String.USE,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.USE_THISLAYER_TIP
            );
            useThisLayerButton.onClick = function() {
                Duik.Constraint.removeLayerInExpressions(layerSelector.index);
            }

            var validButtonsGroup = DuScriptUI.group(expressionToolsGroup);

            var cancelButton = DuScriptUI.button(
                validButtonsGroup,
                DuScriptUI.String.BACK_PREVIOUS,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            cancelButton.onClick = function() {
                expressionToolsGroup.visible = false;
                automationGroup.visible = true;
            }

            expressionToolsGroup.built = true;

            DuScriptUI.showUI(expressionToolsGroup);
        }

        hideAllGroups();
        expressionToolsGroup.visible = true;
    }

    var copyExpButton = toolsGroup.addButton(
        DuScriptUI.String.COPY_EXPRESSION,
        w12_copy_expression,
        DuScriptUI.String.COPY_EXPRESSION_TIP
    );
    copyExpButton.onClick = Duik.Automation.copyExpression;

    var pasteExpButton = toolsGroup.addButton(
        DuScriptUI.String.PASTE_EXPRESSION,
        w12_paste_expression,
        DuScriptUI.String.PASTE_EXPRESSION_TIP
    );
    pasteExpButton.onClick = Duik.Automation.pasteExpression;

    var bakeExpButton = toolsGroup.addButton(
        DuScriptUI.String.BAKE_EXPRESSIONS,
        w12_bake,
        DuScriptUI.String.BAKE_EXPRESSIONS_TIP,
        true
    );
    bakeExpButton.optionsPopup.build = function() {
        var selectionModeSelector = DuScriptUI.selectionModeSelector(bakeExpButton.optionsPanel);
        selectionModeSelector.setCurrentIndex(0);

        var bakeMethodSelector = DuScriptUI.selector(
            bakeExpButton.optionsPanel
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.SMART_MODE,
            w16_autorig,
            DuScriptUI.String.BAKE_EXPRESSION_SMART_MODE_TIP
        );
        bakeMethodSelector.addButton(
            DuScriptUI.String.PRECISE_MODE,
            w16_quick,
            DuScriptUI.String.BAKE_EXPRESSION_PRECISE_MODE_TIP
        );
        bakeMethodSelector.setCurrentIndex(0);

        var stepEdit = DuScriptUI.editText(
            bakeExpButton.optionsPanel,
            '1',
            tr(DuScriptUI.String.PRECISION_FACTOR) + ': ',
            '',
            "",
            tr(DuScriptUI.String.PRECISION_FACTOR_TIP),
            false
        );

        bakeExpButton.onClick = function() {
            var step = parseFloat(stepEdit.text);
            if (isNaN(step)) step = 1;
            step = 1 / step;
            Duik.Automation.bakeExpressions(bakeMethodSelector.index, step, selectionModeSelector.index);
        };
    }

    var mainGroup = DuScriptUI.group(this, 'stacked');
    mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var automationGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) automationGroup.spacing = 3;

    // A Spacer
    var spacer = automationGroup.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1, 3];

    var kleanerGroup = DuScriptUI.multiButton(
            automationGroup,
            DuScriptUI.String.KLEANER,
            w16_kleaner,
            DuScriptUI.String.KLEANER_TIP
        );
    kleanerGroup.build = function() {
        var aliveButton = this.addButton(
            DuScriptUI.String.ALIVE
        );
        var inanimateButton = this.addButton(
            DuScriptUI.String.INANIMATE
        );
        var softBodyButton = this.addButton(
            DuScriptUI.String.SOFT_BODY
        );
        var springButton = this.addButton(
            DuScriptUI.String.SPRING
        );
        var springLightButton = this.addButton(
            DuScriptUI.String.SPRING_NO_SIMU
        );
        var kleanButton = this.addButton(
            DuScriptUI.String.KLEAN
        );

        aliveButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Will'].index).setValue(150);
            effect(i['Flexibility'].index).setValue(200);
            effect(i['Soft body']['Flexibility'].index).setValue(10);
        };

        inanimateButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Strength'].index).setValue(10);
            effect(i['Will'].index).setValue(0);
            effect(i['Flexibility'].index).setValue(200);
            effect(i['Friction'].index).setValue(200);
            effect(i['Anticipation']['Anticipation'].index).setValue(0);
            effect(i['Soft body']['Flexibility'].index).setValue(20);
        };

        softBodyButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Strength'].index).setValue(10);
            effect(i['Will'].index).setValue(0);
            effect(i['Anticipation']['Anticipation'].index).setValue(0);
        };

        springButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Anticipation']['Anticipation'].index).setValue(0);
            effect(i['Motion interpolation']['Motion interpolation'].index).setValue(0);
            effect(i['Overlap']['Overlap'].index).setValue(0);
        };

        springLightButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Size'].index).setValue(0);
            effect(i['Weight'].index).setValue(0);
            effect(i['Strength'].index).setValue(0);
            effect(i['Will'].index).setValue(0);
            effect(i['Flexibility'].index).setValue(0);
            effect(i['Friction'].index).setValue(0);
            effect(i['Anticipation']['Anticipation'].index).setValue(0);
            effect(i['Motion interpolation']['Motion interpolation'].index).setValue(0);
            effect(i['Overlap']['Overlap'].index).setValue(0);
            effect(i['Performance']['Always disable simulations'].index).setValue(0);
            effect(i['Performance']['Disable general parameters'].index).setValue(0);
        };

        kleanButton.onClick = function() {
            var effect = Duik.Automation.kleaner();

            var i = Duik.PseudoEffect.KLEANER.props; 
            effect(i['Anticipation']['Anticipation'].index).setValue(0);
            effect(i['Overlap']['Overlap'].index).setValue(0);
            effect(i['Follow through']['Flexibility'].index).setValue(0);
            effect(i['Performance']['Always disable simulations'].index).setValue(0);
        };
    };

    var effectorButton = DuScriptUI.button(
        automationGroup,
        DuScriptUI.String.EFFECTOR,
        w16_effector,
        DuScriptUI.String.EFFECTOR_TIP
    );
    effectorButton.onClick = Duik.Automation.effector;

    var effectorMapButton = DuScriptUI.button(
        automationGroup,
        DuScriptUI.String.EFFECTOR_MAP + '...',
        w16_effector_map,
        DuScriptUI.String.EFFECTOR_MAP_TIP,
        false,
        undefined,
        undefined,
        false
    );
    effectorMapButton.onClick = function() {
        if (!effectorMapGroup.built) {
            var cancelButton = buildEffectorMapGroup(effectorMapGroup);
            cancelButton.onClick = function() {
                effectorMapGroup.visible = false;
                automationGroup.visible = true;
            }
        }

        // Set the layer
        effectorMapGroup.layerSelector.refresh();
        var layer = DuAEComp.getActiveLayer();
        if (layer) effectorMapGroup.layerSelector.setCurrentIndex(layer.index);

        hideAllGroups();
        effectorMapGroup.visible = true;
    };

    var looperButton = DuScriptUI.button(
        automationGroup,
        DuScriptUI.String.LOOPER,
        w16_looper,
        DuScriptUI.String.LOOPER_TIP
    );
    looperButton.onClick = Duik.Automation.looper;

    var expressionToolsGroup = DuScriptUI.group(mainGroup, 'column');
    expressionToolsGroup.visible = false;
    expressionToolsGroup.built = false;

    var effectorMapGroup = DuScriptUI.group(mainGroup, 'column');
    effectorMapGroup.visible = false;
    effectorMapGroup.built = false;
}