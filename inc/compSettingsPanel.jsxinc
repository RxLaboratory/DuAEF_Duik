function buildCompSettingsPanel( container ) {

    function addSetting( c, t ) {
        var settingGroup = DuScriptUI.group(c, 'row');
        settingGroup.margin = 0;
        settingGroup.spacing = 3;
        settingGroup.alignment = ['fill', 'top'];

        t = tr(t);

        var checkbox = DuScriptUI.checkBox( settingGroup, {
            text: t + ':',
            localize: false
        });
        checkbox.alignment = ['left', 'center'];

        settingGroup = DuScriptUI.group(settingGroup, 'row');
        settingGroup.spacing = 0;
        settingGroup.margin = 0;
        settingGroup.alignment = ['fill', 'fill'];
        settingGroup.checked = settingGroup.enabled = false;
        
        checkbox.onClick = function() {
            settingGroup.checked = checkbox.value;
            settingGroup.enabled = checkbox.value;
        }
        return settingGroup;
    }

    var widthGroup = addSetting(container, DuScriptUI.String.WIDTH);
    var widthEdit = DuScriptUI.editText( widthGroup, {
        text: '1920',
        suffix: " px"
    });

    var heightGroup = addSetting(container, DuScriptUI.String.HEIGHT);
    var heightEdit = DuScriptUI.editText( heightGroup, {
        text: '1080',
        suffix: " px"
    });//*/

    var parGroup = addSetting(container, DuScriptUI.String.PIXEL_ASPECT);
    var parEdit = DuScriptUI.selector( parGroup );
    parEdit.addButton( { text: DuScriptUI.String.PAR_SQUARE, data: 1 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_NTSC, data: 0.91 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_NTSC_WIDE, data: 1.21 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_PAL, data: 1.09 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_PAL_WIDE, data: 1.46 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_DVCPRO_720, data: 1.33 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_DVCPRO_1080, data: 1.5 } );
    parEdit.addButton( { text: DuScriptUI.String.PAR_ANAMORPHIC, data: 2 } );//*/
    parEdit.setCurrentIndex(0);

    var frameRateGroup = addSetting(container, DuScriptUI.String.FRAME_RATE);
    var frameRateEdit = DuScriptUI.editText( frameRateGroup, {
        text: '24.00',
        suffix: " fps"
    });

    var durationGroup = addSetting(container, DuScriptUI.String.DURATION);
    var durationEdit = DuScriptUI.editText( durationGroup, {
        text: '00:00:00:00'
    });

    DuScriptUI.separator( container, uiMode <= 1 ? DuScriptUI.String.DISPLAY : '' );

    var resolutionGroup = addSetting(container, DuScriptUI.String.RESOLUTION);
    var resolutionEdit = DuScriptUI.selector( resolutionGroup );
    resolutionEdit.addButton( { text: DuScriptUI.String.RES_FULL, data: [1,1] } );
    resolutionEdit.addButton( { text: DuScriptUI.String.RES_HALF, data: [2,2] } );
    resolutionEdit.addButton( { text: DuScriptUI.String.RES_THIRD, data: [3,3] } );
    resolutionEdit.addButton( { text: DuScriptUI.String.RES_QUARTER, data: [4,4] } );
    resolutionEdit.setCurrentIndex(0);
    
    var preserveResolutionGroup = addSetting(container, DuScriptUI.String.PRESERVE_RESOLUTION);
    var preserveResolutionEdit = DuScriptUI.checkBox( preserveResolutionGroup, { text: DuScriptUI.String.PRESERVE } );

    var bgGroup = addSetting(container, DuScriptUI.String.BG_COLOR);
    var bgEdit = DuScriptUI.colorSelector( bgGroup );

    var shyGroup = addSetting(container, DuScriptUI.String.SHY_LAYERS);
    var shyEdit = DuScriptUI.checkBox( shyGroup, { text: DuScriptUI.String.HIDE } );

    DuScriptUI.separator( container, uiMode <= 1 ? DuScriptUI.String.RENDERING : '' );

    var proxyGroup = addSetting(container, DuScriptUI.String.PROXY);
    var proxyEdit = DuScriptUI.checkBox( proxyGroup, { text: DuScriptUI.String.USE } );

    var rendererGroup = addSetting(container, DuScriptUI.String.RENDERER);
    var rendererEdit = DuScriptUI.selector( rendererGroup );
    // Create a temp comp to populate
    var comp = app.project.items.addComp('temp', 4, 4, 1, 1, 24);
    for (var i = 0, n = comp.renderers.length; i < n; i++) {
        rendererEdit.addButton( { text: DuAEComp.RendererNames[comp.renderers[i]], data: comp.renderers[i] } );
    }
    rendererEdit.setCurrentIndex(0);
    comp.remove();

    var preserveFrameRateGroup = addSetting(container, DuScriptUI.String.PRESERVE_FRAME_RATE);
    var preserveFrameRateEdit = DuScriptUI.checkBox( preserveFrameRateGroup, { text: DuScriptUI.String.PRESERVE } );

    var frameBlendingGroup = addSetting(container, DuScriptUI.String.FRAME_BLENDING);
    var frameBlendingEdit = DuScriptUI.checkBox( frameBlendingGroup, { text: DuScriptUI.String.ENABLED } );

    DuScriptUI.separator( container, uiMode <= 1 ? DuScriptUI.String.MOTION_BLUR : '' );

    var mbGroup = addSetting(container, DuScriptUI.String.MOTION_BLUR);
    var mbEdit = DuScriptUI.checkBox( mbGroup, { text: DuScriptUI.String.ENABLED } );

    var shutterAngleGroup = addSetting(container, DuScriptUI.String.SHUTTER_ANGLE);
    var shutterAngleEdit = DuScriptUI.editText( shutterAngleGroup, {
        text: '90',
        suffix: " \u00B0"
    });

    var shutterPhaseGroup = addSetting(container, DuScriptUI.String.SHUTTER_PHASE);
    var shutterPhaseEdit = DuScriptUI.editText( shutterPhaseGroup, {
        text: '-45',
        suffix: " \u00B0"
    });

    var shutterSamplesGroup = addSetting(container, DuScriptUI.String.SAMPLES);
    var shutterSamplesEdit = DuScriptUI.editText( shutterSamplesGroup, {
        text: '16'
    });

    var shutterLimitGroup = addSetting(container, DuScriptUI.String.ADAPTIVE_SAMPLE_LIMIT);
    var shutterLimitEdit = DuScriptUI.editText( shutterLimitGroup, {
        text: '128'
    });

    DuScriptUI.separator( container );

    var updatePrecompsButton = DuScriptUI.checkBox( container, { text: DuScriptUI.String.UPDATE_PRECOMPOSITIONS } );
    updatePrecompsButton.setChecked( true );

    var validButton = addValidButton (
        container,
        DuScriptUI.String.COMP_SETTINGS,
        DuScriptUI.String.COMP_SETTINGS_TIP
    );
    validButton.onClick = function() {
        // Gather options
        var options = {};

        if (widthGroup.checked) {
            var w = widthEdit.text;
            w = parseInt(w);
            if (!isNaN(w) && w >= 4) options.width = w;
        }
        
        if (heightGroup.checked) {
            var h = heightEdit.text;
            h = parseInt(h);
            if (!isNaN(h) && h >= 4) options.height = h;
        }

        if (parGroup.checked) options.pixelAspect = parEdit.currentData;

        if (frameRateGroup.checked) {
            var fr = parseFloat(frameRateEdit.text);
            if (!isNaN(fr) && fr >= 1 && fr <= 999)  options.frameRate = fr;
        }

        if (durationGroup.checked) options.duration = durationEdit.text;

        if (resolutionGroup.checked) options.resolutionFactor = resolutionEdit.currentData;

        if (preserveResolutionGroup.checked) options.preserveNestedResolution = preserveResolutionEdit.checked;

        if (bgGroup.checked) options.bgColor = bgEdit.color.floatRGB();

        if (shyGroup.checked) options.hideShyLayers = shyEdit.checked;

        if (proxyGroup.checked) options.useProxy = proxyEdit.checked;

        if (rendererGroup.checked) options.renderer = rendererEdit.currentData;

        if (preserveFrameRateGroup.checked) options.preserveNestedFrameRate = preserveFrameRateEdit.checked;

        if (frameBlendingGroup.checked) options.frameBlending = frameBlendingEdit.checked;

        if (mbGroup.checked) options.motionBlur = mbEdit.checked;

        if (shutterAngleGroup.checked) {
            var v = shutterAngleEdit.text;
            v = parseInt(v);
            if (!isNaN(v) && v >= 0 && v <= 720) options.shutterAngle = v;
        }

        if (shutterPhaseGroup.checked) {
            var v = shutterPhaseEdit.text;
            v = parseInt(v);
            if (!isNaN(v) && v >= -360 && v <= 360) options.shutterPhase = v;
        }

        if (shutterSamplesGroup.checked) {
            var v = shutterSamplesEdit.text;
            v = parseInt(v);
            if (!isNaN(v) && v >= 2 && v <= 64) options.motionBlurSamplesPerFrame = v;
        }

        if (shutterLimitGroup.checked) {
            var v = shutterLimitEdit.text;
            v = parseInt(v);
            if (!isNaN(v) && v >= 62 && v <= 256) options.motionBlurAdaptiveSampleLimit = v;
        }

        DuAE.beginUndoGroup( DuScriptUI.String.COMP_SETTINGS );

        DuAEComp.updateSettings(options);

        DuAE.endUndoGroup();
    };
}