function buildToolsPanelUI(tab) {
    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1, 3];

    var toolsTabPanel = DuScriptUI.tabPanel(tab, 'column');

    var compTab = toolsTabPanel.addTab(
        uiMode == 0 ? DuScriptUI.String.COMPOSITION : '',
        w16_composition,
        DuScriptUI.String.COMPOSITION_TOOLS_TIP
    );

    var layerTab = toolsTabPanel.addTab(
        uiMode == 0 ? DuScriptUI.String.LAYER : '',
        w16_layers,
        DuScriptUI.String.LAYER_MANAGER
    );

    var textTab = toolsTabPanel.addTab(
        uiMode == 0 ? DuScriptUI.String.TEXT: '',
        w16_text,
        DuScriptUI.String.TEXT_TOOLS_TIP
    );

    var devTab = toolsTabPanel.addTab(
        uiMode == 0 ? DuScriptUI.String.SCRIPTING : '',
        w16_expression,
        DuScriptUI.String.SCRIPTING_TOOLS_TIP
    );

    compTab.build = function() {
        this.margins = 3;

        function hideAllGroups() {
            compGroup.visible = false;
            compSettingsGroup.visible = false;
        }

        var mainGroup = DuScriptUI.group(this, 'stacked');
        mainGroup.alignment = ['fill', 'fill'];

        var compGroup = DuScriptUI.group(mainGroup, 'column');

        var cropButton = DuScriptUI.button(
            compGroup,
            DuScriptUI.String.CROP_PRECOMPOSITION,
            w16_crop,
            DuScriptUI.String.CROP_PRECOMPOSITION_TIP
        );
        cropButton.onClick = Duik.Tool.cropPrecompositions;

        var compSettingsButton = DuScriptUI.button( compGroup, {
            text: DuScriptUI.String.COMP_SETTINGS + '...',
            image: w16_composition_settings,
            helpTip: DuScriptUI.String.COMP_SETTINGS_TIP,
            localize: false
        });
        compSettingsButton.onClick = function() {
            if (!compSettingsGroup.built) {
                createSubPanel(
                    compSettingsGroup,
                    DuScriptUI.String.COMP_SETTINGS,
                    compGroup,
                    false
                );

                #include "compSettingsPanel.jsxinc"
                buildCompSettingsPanel( compSettingsGroup );

                DuScriptUI.showUI(compSettingsGroup);
            }

            hideAllGroups();
            compSettingsGroup.visible = true;
        };

        var compSettingsGroup = DuScriptUI.group(mainGroup, 'column');
        compSettingsGroup.visible = false;
        compSettingsGroup.built = false;
    }

    devTab.build = function() {

        function hideAllGroups() {
            scriptifyGroup.visible = false;
            scriptLibGroup.visible = false;
            scriptEditorGroup.visible = false;
            devGroup.visible = false;
        }

        var mainGroup = DuScriptUI.group(this, 'stacked');
        mainGroup.margins = 3;
        mainGroup.alignment = ['fill', 'fill'];

        var devGroup = DuScriptUI.group(mainGroup, 'column');
        if (uiMode >= 2) devGroup.spacing = 3;

        var scriptLibButton = DuScriptUI.button(
            devGroup,
            DuScriptUI.String.SCRIPT_LIB + '...',
            w16_library,
            DuScriptUI.String.SCRIPT_LIB_TIP
        );
        scriptLibButton.onClick = function() {
            if (!scriptLibGroup.built) {
                createSubPanel(
                    scriptLibGroup,
                    DuScriptUI.String.SCRIPT_LIB,
                    devGroup,
                    false
                );

                #include "scriptLibPanel.jsxinc"
                buildScriptLibPanel( scriptLibGroup, scriptEditorGroup );

                DuScriptUI.showUI(scriptLibGroup);
            }

            hideAllGroups();
            scriptLibGroup.visible = true;
        };

        var scriptifyButton = DuScriptUI.button(
            devGroup,
            DuScriptUI.String.SCRIPTIFY_EXPRESSION,
            w16_scriptify_expression,
            DuScriptUI.String.SCRIPTIFY_EXPRESSION_TIP
        );
        scriptifyButton.onClick = function() {
            if (!scriptifyGroup.built) {

                createSubPanel(
                    scriptifyGroup,
                    DuScriptUI.String.SCRIPTIFY_EXPRESSION,
                    devGroup,
                    false
                );

                scriptifyGroup.edit = scriptifyGroup.add('edittext', undefined, "", {
                    multiline: true
                });
                scriptifyGroup.edit.alignment = ['fill', 'fill'];

                DuScriptUI.separator( scriptifyGroup ).alignment = ['fill', 'bottom'];

                var validButton = DuScriptUI.button(
                    scriptifyGroup,
                    DuScriptUI.String.SCRIPTIFY_EXPRESSION,
                    w16_scriptify_expression,
                    DuScriptUI.String.SCRIPTIFY_EXPRESSION_TIP,
                    false,
                    'row',
                    'center'
                );
                validButton.alignment = ['center', 'bottom'];
                validButton.onClick = function() {
                    var props = DuAEComp.getSelectedProps();
                    if (props.length == 0) return;
                    prop = props.pop();
                    scriptifyGroup.edit.text = DuAEExpression.scriptifyExpression(prop, prop.name + "Exp");
                };

                scriptifyGroup.refresh = validButton.onClick;

                scriptifyGroup.built = true;
                DuScriptUI.showUI(scriptifyGroup);
            }

            scriptifyGroup.refresh();
            hideAllGroups();
            scriptifyGroup.visible = true;
        };

        var scriptEditorButton = DuScriptUI.button(
            devGroup,
            DuScriptUI.String.SCRIPT_EDITOR,
            w16_script,
            DuScriptUI.String.SCRIPT_EDITOR_TIP
        );
        scriptEditorButton.onClick = function() {
            if (!scriptEditorGroup.built) {
                createSubPanel(
                    scriptEditorGroup,
                    DuScriptUI.String.SCRIPT_EDITOR,
                    devGroup,
                    false
                );

                #include "scriptEditorPanel.jsxinc"
                buildScriptEditorUI( scriptEditorGroup );
            }
            hideAllGroups();
            scriptEditorGroup.visible = true;
        }

        var editExpressionButton = DuScriptUI.button(
            devGroup,
            DuScriptUI.String.EDIT_EXPRESSION,
            w16_expression_file,
            DuScriptUI.String.EDIT_EXPRESSION_TIP,
            true
        );
        editExpressionButton.optionsPopup.build = function() {

            // Default settings
            DuESF.scriptSettings.data.expression = def(DuESF.scriptSettings.data.expression, {});
            DuESF.scriptSettings.data.expression.expressionEditor = def(DuESF.scriptSettings.data.expression.expressionEditor, "");

            // The list of expressions currently being edited
            // Associative array filename -> DuAEProperty.
            var editingExpressions = {};

            var editorSelector = DuScriptUI.fileSelector(
                editExpressionButton.optionsPanel,
                DuScriptUI.String.EXPRESSION_SELECT_EDITOR,
                true,
                DuScriptUI.String.EXPRESSION_SELECT_EDITOR_TIP,
                undefined,
                'open',
                undefined,
                'column'
            );
            editorSelector.onChange = function() {
                var f = editorSelector.getFile();
                if (!f && editorSelector.editText.text != "") return;
                if (f) DuESF.scriptSettings.data.expression.expressionEditor = f.absoluteURI;
                else DuESF.scriptSettings.data.expression.expressionEditor = "";
                DuESF.scriptSettings.save();
            };

            editorSelector.setPath( DuESF.scriptSettings.data.expression.expressionEditor );
            editorSelector.setPlaceholder( DuScriptUI.String.SYSTEM_DEFAULT );

            editExpressionButton.onClick = function() {
                // Get the selected property
                var prop = DuAEComp.getSelectedProperty();
                var editFile = Duik.Tool.editExpression(prop);
                if (editFile) editingExpressions[editFile.absoluteURI] = prop;
            };

            editExpressionButton.onCtrlClick = function() {
                DuAE.beginUndoGroup(DuScriptUI.String.EDIT_EXPRESSION);
                for (f in editingExpressions) {
                    var file = new File(f);
                    if (file.exists) {
                        if (file.open('r')){
                            editingExpressions[f].setExpression(file.read(), false);
                            file.close();
                        }
                    }
                    else {
                        delete editingExpressions[f];
                    }
                };
                DuAE.endUndoGroup(DuScriptUI.String.EDIT_EXPRESSION);
            };
        };

        var scriptifyGroup = DuScriptUI.group(mainGroup, 'column');
        scriptifyGroup.visible = false;
        scriptifyGroup.built = false;

        var scriptLibGroup = DuScriptUI.group(mainGroup, 'column');
        scriptLibGroup.visible = false;
        scriptLibGroup.built = false;

        var scriptEditorGroup = DuScriptUI.group(mainGroup, 'column');
        scriptEditorGroup.visible = false;
        scriptEditorGroup.built = false;
        scriptEditorGroup.edit = function( content ) {
            scriptEditorButton.onClick();
            scriptEditorGroup.editText.text = content;
        };
    };

    #include "layerManager.jsxinc"
    layerTab.build = buildLayerManagerUI;

    toolsTabPanel.buttonsGroup.alignment = ['center', 'top'];

}