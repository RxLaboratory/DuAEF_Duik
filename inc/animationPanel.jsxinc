function buildAnimationPanelUI(tab) {
    // Utils

    function hideAllGroups() {
        animationGroup.visible = false;
        animationLibGroup.visible = false;
        moveAnchorPointGroup.visible = false;
    }

    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1, 3];

    // A title
    DuScriptUI.staticText(tab, DuScriptUI.String.ANIMATION).alignment = ['center', 'top'];

    // tools
    var toolsGroup = DuScriptUI.toolBar(this);

    var selectButton = toolsGroup.addButton(
        DuScriptUI.String.SELECT_KEYFRAMES,
        w12_select,
        DuScriptUI.String.SELECT_KEYFRAMES_TIP,
        true
    );
    selectButton.optionsPopup.build = function() {
        var selectMethodSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.TIME,
            w16_time,
            DuScriptUI.String.SELECT_TIME_TIP
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.RANGE,
            w16_range,
            DuScriptUI.String.SELECT_RANGE_TIP
        );

        selectMethodSelector.setCurrentIndex(1);

        selectMethodSelector.onChange = function() {
            outEdit.enabled = selectMethodSelector.index == 1;
        };

        var currentTimeButton = DuScriptUI.checkBox(
            selectButton.optionsPanel,
            DuScriptUI.String.CURRENT_TIME
        );
        currentTimeButton.setChecked(true);

        currentTimeButton.onClick = function() {
            rangeGroup.visible = !currentTimeButton.checked;
        };

        var rangeGroup = DuScriptUI.group(selectButton.optionsPanel, 'row');

        var inEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.IN_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        inEdit.alignment = ['fill', 'fill'];

        var outEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        outEdit.alignment = ['fill', 'fill'];

        rangeGroup.visible = false;

        var pickRangeButton = DuScriptUI.button(
            rangeGroup,
            '',
            DuScriptUI.Icon.EYE_DROPPER
        );
        pickRangeButton.alignment = ['right', 'center'];

        pickRangeButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;

            if (selectMethodSelector.index == 0) {
                inEdit.setText(timeToCurrentFormat(comp.time + comp.displayStartTime, 1 / comp.frameDuration));
            } else {
                inEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.displayStartTime, 1 / comp.frameDuration));
                outEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.workAreaDuration + comp.displayStartTime, 1 / comp.frameDuration));
            }
        }

        var layerSelectionSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerSelectionSelector.addButton(
            DuScriptUI.String.SELECTED_LAYERS,
            w16_selected_layers
        );
        layerSelectionSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerSelectionSelector.setCurrentIndex(1);

        var layerTypeSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerTypeSelector.addButton(
            DuScriptUI.String.CONTROLLERS,
            w16_controller
        );
        layerTypeSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerTypeSelector.setCurrentIndex(0);

        var propsGroup = DuScriptUI.group(selectButton.optionsPanel, 'row');

        var posButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_move,
            DuScriptUI.String.POSITION
        );
        posButton.alignment = ['center', 'top'];
        posButton.setChecked(true);

        var rotButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_rotate,
            DuScriptUI.String.ROTATION
        );
        rotButton.alignment = ['center', 'top'];
        rotButton.setChecked(true);

        var scaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_scale,
            DuScriptUI.String.SCALE
        );
        scaButton.alignment = ['center', 'top'];
        scaButton.setChecked(true);

        var opaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_opacity,
            DuScriptUI.String.OPACITY
        );
        opaButton.alignment = ['center', 'top'];
        opaButton.setChecked(true);

        var masksButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_mask,
            DuScriptUI.String.MASKS
        );
        masksButton.alignment = ['center', 'top'];
        masksButton.setChecked(true);

        var fxButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_fx,
            DuScriptUI.String.EFFECTS
        );
        fxButton.alignment = ['center', 'top'];
        fxButton.setChecked(true);

        var allPropsButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_props,
            DuScriptUI.String.ALL_PROPERTIES
        );
        allPropsButton.alignment = ['center', 'top'];

        allPropsButton.onClick = function() {
            var checked = allPropsButton.checked;
            posButton.setChecked(checked);
            rotButton.setChecked(checked);
            scaButton.setChecked(checked);
            opaButton.setChecked(checked);
            masksButton.setChecked(checked);
            fxButton.setChecked(checked);
        };

        selectButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;
            // Get range
            var inTime = comp.time;
            var outTime = comp.time;
            if (currentTimeButton.checked) {
                if (selectMethodSelector.index == 1) {
                    inTime = comp.workAreaStart;
                    outTime = comp.workAreaStart + comp.workAreaDuration;
                }
            } else {
                inTime = currentFormatToTime(inEdit.text, 1 / comp.frameDuration) - comp.displayStartTime;
                if (selectMethodSelector.index == 1) outTime = currentFormatToTime(outEdit.text, 1 / comp.frameDuration) - comp.displayStartTime;
                else outTime = inTime;
            }

            // Get property types
            var props = [];
            if (!allPropsButton.checked) {
                if (posButton.checked) {
                    props.push('ADBE Position');
                    props.push('ADBE Vector Position');
                    props.push('ADBE Position_0');
                    props.push('ADBE Position_1');
                    props.push('ADBE Position_2');
                }
                if (rotButton.checked) {
                    props.push('ADBE Rotate Z');
                    props.push('ADBE Rotate Y');
                    props.push('ADBE Rotate X');
                    props.push('ADBE Orientation');
                    props.push('ADBE Vector Rotation');
                }
                if (scaButton.checked) {
                    props.push('ADBE Scale');
                    props.push('ADBE Vector Scale');
                }
                if (opaButton.checked) {
                    props.push('ADBE Opacity');
                    props.push('ADBE Vector Group Opacity');
                }
                if (masksButton.checked) {
                    props.push('ADBE Mask Parade');
                }
                if (fxButton.checked) {
                    props.push('ADBE Effect Parade');
                }
            }

            Duik.Animation.selectKeyframes(
                comp,
                layerSelectionSelector.index == 0,
                layerTypeSelector.index == 0,
                [inTime, outTime],
                props);
        };
    };

    var copyButton = toolsGroup.addButton(
        DuScriptUI.String.COPY_ANIMATION,
        w12_copy,
        DuScriptUI.String.COPY_KEYFRAMES_TIP
    );
    copyButton.onClick = Duik.Animation.copy;

    var pasteButton = toolsGroup.addButton(
        DuScriptUI.String.PASTE_ANIMATION,
        w12_paste,
        DuScriptUI.String.PASTE_KEYFRAMES_TIP,
        true
    );
    pasteButton.optionsPopup.build = function() {

        var offsetSelector = DuScriptUI.selector(pasteButton.optionsPanel);
        offsetSelector.addButton(
            DuScriptUI.String.OFFSET_VALUES,
            w16_offset,
            DuScriptUI.String.OFFSET_VALUES_TIP
        );
        offsetSelector.addButton(
            DuScriptUI.String.ABSOLUTE_VALUES,
            w16_locator,
            DuScriptUI.String.ABSOLUTE_VALUES_TIP
        );
        offsetSelector.setCurrentIndex(1);

        var reverseButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REVERSE_KEYFRAMES,
            undefined,
            DuScriptUI.String.REVERSE_KEYFRAMES_TIP
        );

        var replaceButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REPLACE_KEYFRAMES,
            undefined,
            DuScriptUI.StringREPLACE_KEYFRAMES_TIP
        );

        pasteButton.onClick = function() {
            Duik.Animation.paste(
                undefined,
                replaceButton.checked,
                offsetSelector.index == 0,
                reverseButton.checked
            );
        };
        pasteButton.onCtrlClick = function() {
            Duik.Animation.paste(undefined, false, true);
        };
        pasteButton.onAltClick = function() {
            Duik.Animation.paste(undefined, false, false, true);
        };
        pasteButton.onCtrlAltClick = function() {
            Duik.Animation.paste(undefined, false, true, true);
        };
    };

    var interpolatorButton = toolsGroup.addButton(
        DuScriptUI.String.INTERPOLATOR,
        w12_interpolator,
        DuScriptUI.String.INTERPOLATOR_TIPs
    );
    interpolatorButton.onClick = Duik.Animation.interpolator;

    var zeroButton = toolsGroup.addButton(
        DuScriptUI.String.ADD_ZERO,
        w12_zero,
        DuScriptUI.String.CONSTRAINT_ZERO_TIP
    );
    zeroButton.onClick = Duik.Constraint.zero;
    zeroButton.onAltClick = Duik.Constraint.resetPRS;
    zeroButton.onCtrlAltClick = function() {
        Duik.Constraint.resetPRS(undefined, true);
    };

    var moveAnchorPointButton = createMoveAnchorPointButton(toolsGroup, mainGroup, hideAllGroups);
    moveAnchorPointButton.onClick = function() {

        if (!moveAnchorPointGroup.built) {
            var cancelButton = buildMoveAnchorPointGroup(moveAnchorPointGroup);

            cancelButton.onClick = function() {
                hideAllGroups();
                animationGroup.visible = true;
            }
        }

        hideAllGroups();
        moveAnchorPointGroup.visible = true;
    };

    createAlignButton(toolsGroup);

    var mainGroup = DuScriptUI.group(this, 'stacked');
    mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var animationGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) constraintsGroup.spacing = 3;

    var keyEditGroup = DuScriptUI.group( animationGroup, 'row' );
    var ksettingsButton = DuScriptUI.button(
        keyEditGroup,
        '',
        DuScriptUI.Icon.OPTIONS,
        DuScriptUI.String.SET_KEY_OPTIONS
    );
    ksettingsButton.alignment = ['left', 'fill'];
    var krovingButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kroving,
        DuScriptUI.String.ROVING
    );
    krovingButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addRovingKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setRoving();
        }
    };
    var klinButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_klin,
        DuScriptUI.String.LINEAR
    );
    klinButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addLinearKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setLinear();
        }
    };
    var kinbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kinbez,
        DuScriptUI.String.EASE_IN
    );
    kinbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEaseInKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEaseIn();
        }
    };
    var koutbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_koutbez,
        DuScriptUI.String.EASE_OUT
    );
    koutbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEaseOutKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEaseOut();
        }
    };
    var kbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kbez,
        DuScriptUI.String.EASY_EASE
    );
    kbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEasyEaseKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEasyEase();
        }
    };
    var kautoButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kauto,
        DuScriptUI.String.CONTINUOUS
    );
    kautoButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addContinuousKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setContinuous();
        }
    };
    var kholdButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_khold,
        DuScriptUI.String.HOLD
    );
    kholdButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addHoldKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setHold();
        }
    };

    var keyEditOptionsPopup = DuScriptUI.popUp( DuScriptUI.String.KEYFRAME_OPTIONS );
    var keyEditModeSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditModeSelector.addButton( DuScriptUI.String.ADD_KEYFRAMES, w12_add );
    keyEditModeSelector.addButton( DuScriptUI.String.EDIT_SELECTED_KEYFRAMES, w12_edit );
    keyEditModeSelector.setCurrentIndex(1);
    keyEditModeSelector.onChange = function() {
        var i = keyEditModeSelector.index == 0;
        keyEditPropsSelector.enabled = i;
        keyEditLayersSelector.enabled = i;
    }
    var keyEditPropsSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditPropsSelector.addButton( DuScriptUI.String.ANIMATED_PROPERTIES, w16_animated_prop );
    keyEditPropsSelector.addButton( DuScriptUI.String.SELECTED_PROPERTIES, w16_selected_props );
    keyEditPropsSelector.enabled = false;
    keyEditPropsSelector.setCurrentIndex(0);

    var keyEditLayersSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditLayersSelector.addButton( DuScriptUI.String.SELECTED_LAYERS, w16_selected_layers );
    keyEditLayersSelector.addButton( DuScriptUI.String.ALL_LAYERS, w16_layers );
    keyEditLayersSelector.enabled = false;
    keyEditLayersSelector.setCurrentIndex(0);

    keyEditOptionsPopup.tieTo( ksettingsButton );

    var animationLibButton = DuScriptUI.button(
        animationGroup,
        DuScriptUI.String.ANIMATION_LIB + '...',
        w16_library,
        DuScriptUI.String.ANIMATION_LIB_TIP
    );
    animationLibButton.onClick = function() {
        var folderURI = def(DuESF.scriptSettings.data.animationLibFolder, DuESF.scriptSettings.file.parent.absoluteURI + '/' + DuScriptUI.String.ANIMATION_LIB);
        var libFolder = new Folder(folderURI);
        if (!libFolder.exists) libFolder.create();

        if (!animationLibGroup.built) {
            animationLibGroup.built = true;

            #include "animationLibPanel.jsxinc"
            buildAnimationLibPanel( animationLibGroup );

            // Close button
            var cancelButton = DuScriptUI.button(
                animationLibGroup,
                DuScriptUI.String.CLOSE,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            cancelButton.alignment = ['fill', 'bottom'];
            cancelButton.onClick = function() {
                hideAllGroups();
                animationGroup.visible = true;
            }

            DuScriptUI.showUI(animationLibGroup);
        }

        hideAllGroups();
        animationLibGroup.visible = true;
        animationLibGroup.refreshLib();
    }

    var nlaButton = DuScriptUI.button(
        animationGroup,
        DuScriptUI.String.NLA,
        w16_nla,
        DuScriptUI.String.NLA_TIP,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        true // no button on the options popup
    );
    nlaButton.onClick = Duik.Automation.setupNLA;
    nlaButton.optionsPopup.build = function() {
        var clipButton = DuScriptUI.button(
            nlaButton.optionsPanel,
            DuScriptUI.String.NLA_NEW_CLIP,
            w12_add,
            DuScriptUI.String.NLA_NEW_CLIP_TIP
        );
        clipButton.onClick = Duik.Automation.addNLAClip;
    }

    var animationLibGroup = DuScriptUI.group(mainGroup, 'column');
    animationLibGroup.visible = false;
    animationLibGroup.built = false;

    var moveAnchorPointGroup = DuScriptUI.group(mainGroup, 'column');
    moveAnchorPointGroup.visible = false;
    moveAnchorPointGroup.built = false;
}