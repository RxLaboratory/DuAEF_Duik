function buildAnimationPanelUI(tab, standAlone) {
    standAlone = def(standAlone, false);

    // Utils

    function hideAllGroups() {
        animationGroup.visible = false;
        animationLibGroup.visible = false;
        moveAnchorPointGroup.visible = false;
        celAnimationGroup.visible = false;
        sequenceGroup.visible = false;
    }

    if (!standAlone) {
        // A Spacer
        var spacer = tab.add('group');
        spacer.margins = 0;
        spacer.spacing = 0;
        spacer.size = [-1, 3];

        // A title
        DuScriptUI.staticText(tab, DuScriptUI.String.ANIMATION).alignment = ['center', 'top'];
    }
    
    // tools
    var toolsGroup = DuScriptUI.toolBar(tab);

    var selectButton = toolsGroup.addButton(
        DuScriptUI.String.SELECT_KEYFRAMES,
        w12_select,
        DuScriptUI.String.SELECT_KEYFRAMES_TIP,
        true
    );
    selectButton.optionsPopup.build = function() {
        var selectMethodSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.TIME,
            w16_time,
            DuScriptUI.String.SELECT_TIME_TIP
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.RANGE,
            w16_range,
            DuScriptUI.String.SELECT_RANGE_TIP
        );

        selectMethodSelector.setCurrentIndex(1);

        selectMethodSelector.onChange = function() {
            outEdit.enabled = selectMethodSelector.index == 1;
        };

        var currentTimeButton = DuScriptUI.checkBox(
            selectButton.optionsPanel,
            DuScriptUI.String.CURRENT_TIME
        );
        currentTimeButton.setChecked(true);

        currentTimeButton.onClick = function() {
            rangeGroup.visible = !currentTimeButton.checked;
        };

        var rangeGroup = DuScriptUI.group(selectButton.optionsPanel, 'row');

        var inEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.IN_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        inEdit.alignment = ['fill', 'fill'];

        var outEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        outEdit.alignment = ['fill', 'fill'];

        rangeGroup.visible = false;

        var pickRangeButton = DuScriptUI.button(
            rangeGroup,
            '',
            DuScriptUI.Icon.EYE_DROPPER
        );
        pickRangeButton.alignment = ['right', 'center'];

        pickRangeButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;

            if (selectMethodSelector.index == 0) {
                inEdit.setText(timeToCurrentFormat(comp.time + comp.displayStartTime, 1 / comp.frameDuration));
            } else {
                inEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.displayStartTime, 1 / comp.frameDuration));
                outEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.workAreaDuration + comp.displayStartTime, 1 / comp.frameDuration));
            }
        }

        var layerSelectionSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerSelectionSelector.addButton(
            DuScriptUI.String.SELECTED_LAYERS,
            w16_selected_layers
        );
        layerSelectionSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerSelectionSelector.setCurrentIndex(1);

        var layerTypeSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerTypeSelector.addButton(
            DuScriptUI.String.CONTROLLERS,
            w16_controller
        );
        layerTypeSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerTypeSelector.setCurrentIndex(0);

        var propsGroup = DuScriptUI.group(selectButton.optionsPanel, 'row');

        var posButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_move,
            DuScriptUI.String.POSITION
        );
        posButton.alignment = ['center', 'top'];
        posButton.setChecked(true);

        var rotButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_rotate,
            DuScriptUI.String.ROTATION
        );
        rotButton.alignment = ['center', 'top'];
        rotButton.setChecked(true);

        var scaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_scale,
            DuScriptUI.String.SCALE
        );
        scaButton.alignment = ['center', 'top'];
        scaButton.setChecked(true);

        var opaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_opacity,
            DuScriptUI.String.OPACITY
        );
        opaButton.alignment = ['center', 'top'];
        opaButton.setChecked(true);

        var masksButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_mask,
            DuScriptUI.String.MASKS
        );
        masksButton.alignment = ['center', 'top'];
        masksButton.setChecked(true);

        var fxButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_fx,
            DuScriptUI.String.EFFECTS
        );
        fxButton.alignment = ['center', 'top'];
        fxButton.setChecked(true);

        var allPropsButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_props,
            DuScriptUI.String.ALL_PROPERTIES
        );
        allPropsButton.alignment = ['center', 'top'];

        allPropsButton.onClick = function() {
            var checked = allPropsButton.checked;
            posButton.setChecked(checked);
            rotButton.setChecked(checked);
            scaButton.setChecked(checked);
            opaButton.setChecked(checked);
            masksButton.setChecked(checked);
            fxButton.setChecked(checked);
        };

        selectButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;
            // Get range
            var inTime = comp.time;
            var outTime = comp.time;
            if (currentTimeButton.checked) {
                if (selectMethodSelector.index == 1) {
                    inTime = comp.workAreaStart;
                    outTime = comp.workAreaStart + comp.workAreaDuration;
                }
            } else {
                inTime = currentFormatToTime(inEdit.text, 1 / comp.frameDuration) - comp.displayStartTime;
                if (selectMethodSelector.index == 1) outTime = currentFormatToTime(outEdit.text, 1 / comp.frameDuration) - comp.displayStartTime;
                else outTime = inTime;
            }

            // Get property types
            var props = [];
            if (!allPropsButton.checked) {
                if (posButton.checked) {
                    props.push('ADBE Position');
                    props.push('ADBE Vector Position');
                    props.push('ADBE Position_0');
                    props.push('ADBE Position_1');
                    props.push('ADBE Position_2');
                }
                if (rotButton.checked) {
                    props.push('ADBE Rotate Z');
                    props.push('ADBE Rotate Y');
                    props.push('ADBE Rotate X');
                    props.push('ADBE Orientation');
                    props.push('ADBE Vector Rotation');
                }
                if (scaButton.checked) {
                    props.push('ADBE Scale');
                    props.push('ADBE Vector Scale');
                }
                if (opaButton.checked) {
                    props.push('ADBE Opacity');
                    props.push('ADBE Vector Group Opacity');
                }
                if (masksButton.checked) {
                    props.push('ADBE Mask Parade');
                }
                if (fxButton.checked) {
                    props.push('ADBE Effect Parade');
                }
            }

            Duik.Animation.selectKeyframes(
                comp,
                layerSelectionSelector.index == 0,
                layerTypeSelector.index == 0,
                [inTime, outTime],
                props);
        };
    };

    var copyButton = toolsGroup.addButton(
        DuScriptUI.String.COPY_ANIMATION,
        w12_copy,
        DuScriptUI.String.COPY_KEYFRAMES_TIP
    );
    copyButton.onClick = Duik.Animation.copy;

    var pasteButton = toolsGroup.addButton(
        DuScriptUI.String.PASTE_ANIMATION,
        w12_paste,
        DuScriptUI.String.PASTE_KEYFRAMES_TIP,
        true
    );
    pasteButton.optionsPopup.build = function() {

        var offsetSelector = DuScriptUI.selector(pasteButton.optionsPanel);
        offsetSelector.addButton(
            DuScriptUI.String.OFFSET_VALUES,
            w16_offset,
            DuScriptUI.String.OFFSET_VALUES_TIP
        );
        offsetSelector.addButton(
            DuScriptUI.String.ABSOLUTE_VALUES,
            w16_locator,
            DuScriptUI.String.ABSOLUTE_VALUES_TIP
        );
        offsetSelector.setCurrentIndex(1);

        var reverseButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REVERSE_KEYFRAMES,
            undefined,
            DuScriptUI.String.REVERSE_KEYFRAMES_TIP
        );

        var replaceButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REPLACE_KEYFRAMES,
            undefined,
            DuScriptUI.StringREPLACE_KEYFRAMES_TIP
        );

        pasteButton.onClick = function() {
            Duik.Animation.paste(
                undefined,
                replaceButton.checked,
                offsetSelector.index == 0,
                reverseButton.checked
            );
        };
        pasteButton.onCtrlClick = function() {
            Duik.Animation.paste(undefined, false, true);
        };
        pasteButton.onAltClick = function() {
            Duik.Animation.paste(undefined, false, false, true);
        };
        pasteButton.onCtrlAltClick = function() {
            Duik.Animation.paste(undefined, false, true, true);
        };
    };

    var interpolatorButton = toolsGroup.addButton(
        DuScriptUI.String.INTERPOLATOR,
        w12_interpolator,
        DuScriptUI.String.INTERPOLATOR_TIPs
    );
    interpolatorButton.onClick = Duik.Animation.interpolator;

    var zeroButton = toolsGroup.addButton(
        DuScriptUI.String.ADD_ZERO,
        w12_zero,
        DuScriptUI.String.CONSTRAINT_ZERO_TIP
    );
    zeroButton.onClick = Duik.Constraint.zero;
    zeroButton.onAltClick = Duik.Constraint.resetPRS;
    zeroButton.onCtrlAltClick = function() {
        Duik.Constraint.resetPRS(undefined, true);
    };

    var moveAnchorPointButton = createMoveAnchorPointButton(toolsGroup, mainGroup, hideAllGroups);
    moveAnchorPointButton.onClick = function() {

        if (!moveAnchorPointGroup.built) {
            buildMoveAnchorPointGroup(moveAnchorPointGroup, animationGroup);
        }

        hideAllGroups();
        moveAnchorPointGroup.visible = true;
    };

    createAlignButton(toolsGroup);

    var snapButton = toolsGroup.addButton(
        DuScriptUI.String.SNAP_KEYS,
        w12_snap,
        DuScriptUI.String.SNAP_KEYS_TIP
    );
    snapButton.onClick = Duik.Animation.snapKeys;

    var motionTrailButton = toolsGroup.addButton(
        DuScriptUI.String.MOTION_TRAIL,
        w12_motion_trail,
        DuScriptUI.String.MOTION_TRAIL_TIP
    );
    motionTrailButton.onClick = Duik.Automation.motionTrail;
    motionTrailButton.onAltClick = function() { Duik.Automation.motionTrail(true) };

    var mainGroup = DuScriptUI.group(tab, 'stacked');
    //mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var animationGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) animationGroup.spacing = 3;

    var keyEditGroup = DuScriptUI.group( animationGroup, 'row' );
    var ksettingsButton = DuScriptUI.button(
        keyEditGroup,
        '',
        DuScriptUI.Icon.OPTIONS,
        DuScriptUI.String.SET_KEY_OPTIONS
    );
    ksettingsButton.alignment = ['left', 'fill'];
    var krovingButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kroving,
        DuScriptUI.String.ROVING
    );
    krovingButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addRovingKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setRoving();
        }
    };
    var klinButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_klin,
        DuScriptUI.String.LINEAR
    );
    klinButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addLinearKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setLinear();
        }
    };
    var kinbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kinbez,
        DuScriptUI.String.EASE_IN
    );
    kinbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEaseInKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEaseIn();
        }
    };
    var koutbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_koutbez,
        DuScriptUI.String.EASE_OUT
    );
    koutbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEaseOutKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEaseOut();
        }
    };
    var kbezButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kbez,
        DuScriptUI.String.EASY_EASE
    );
    kbezButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addEasyEaseKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setEasyEase();
        }
    };
    var kautoButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_kauto,
        DuScriptUI.String.CONTINUOUS
    );
    kautoButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addContinuousKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setContinuous();
        }
    };
    var kholdButton = DuScriptUI.button( 
        keyEditGroup,
        '',
        w12_khold,
        DuScriptUI.String.HOLD
    );
    kholdButton.onClick = function() {
        if (keyEditModeSelector.index == 0) {
            var animatedProps = keyEditPropsSelector.index == 0;
            var selectedLayers = keyEditLayersSelector.index == 0;
            Duik.Animation.addHoldKey(animatedProps, selectedLayers);
        }
        else 
        {
            Duik.Animation.setHold();
        }
    };

    var keyEditOptionsPopup = DuScriptUI.popUp( DuScriptUI.String.KEYFRAME_OPTIONS );
    var keyEditModeSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditModeSelector.addButton( DuScriptUI.String.ADD_KEYFRAMES, w12_add );
    keyEditModeSelector.addButton( DuScriptUI.String.EDIT_SELECTED_KEYFRAMES, w12_edit );
    keyEditModeSelector.setCurrentIndex(1);
    keyEditModeSelector.onChange = function() {
        var i = keyEditModeSelector.index == 0;
        keyEditPropsSelector.enabled = i;
        keyEditLayersSelector.enabled = i;
    }
    var keyEditPropsSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditPropsSelector.addButton( DuScriptUI.String.ANIMATED_PROPERTIES, w16_animated_prop );
    keyEditPropsSelector.addButton( DuScriptUI.String.SELECTED_PROPERTIES, w16_selected_props );
    keyEditPropsSelector.enabled = false;
    keyEditPropsSelector.setCurrentIndex(0);

    var keyEditLayersSelector = DuScriptUI.selector( keyEditOptionsPopup.content );
    keyEditLayersSelector.addButton( DuScriptUI.String.SELECTED_LAYERS, w16_selected_layers );
    keyEditLayersSelector.addButton( DuScriptUI.String.ALL_LAYERS, w16_layers );
    keyEditLayersSelector.enabled = false;
    keyEditLayersSelector.setCurrentIndex(0);

    keyEditOptionsPopup.tieTo( ksettingsButton );

    if (uiMode < 2) DuScriptUI.separator( animationGroup, uiMode <= 1 ? DuScriptUI.String.TWEENING : ''  );

    var tweenTools = DuScriptUI.toolBar(animationGroup);

    var splitKeyButton = tweenTools.addButton(
        DuScriptUI.String.SPLIT_KEYS,
        w16_split_keyframe,
        DuScriptUI.String.SPLIT_KEYFRAME_TIP,
        true
    );
    splitKeyButton.optionsPopup.build = function() {
        var splitKeyDurationEdit = DuScriptUI.editText(
            splitKeyButton.optionsPanel,
            '2',
            DuScriptUI.String.DURATION + ': ',
            DuScriptUI.String.FRAMES,
            '',
            ' ' + DuScriptUI.String.SPLIT_KEY_DURATION_TIP,
            false
        );

        var splitKeyAlignmentSelector = DuScriptUI.selector(splitKeyButton.optionsPanel);
        splitKeyAlignmentSelector.addButton(
            DuScriptUI.String.CENTER,
            w16_align_center,
            DuScriptUI.String.ALIGN_CENTER_TIME_TIP
        );
        splitKeyAlignmentSelector.addButton(
            DuScriptUI.String.AFTER,
            w16_align_in,
            DuScriptUI.String.ALIGN_AFTER_TIP
        );
        splitKeyAlignmentSelector.addButton(
            DuScriptUI.String.BEFORE,
            w16_align_out,
            DuScriptUI.String.ALIGN_BEFORE_TIP
        );
        splitKeyAlignmentSelector.setCurrentIndex(0);

        splitKeyButton.onClick = function() {
            var alignment = DuAE.TimeAlignment.CENTER;
            if (splitKeyAlignmentSelector.index == 1) alignment = DuAE.TimeAlignment.IN_POINT;
            else if (splitKeyAlignmentSelector.index == 2) alignment = DuAE.TimeAlignment.OUT_POINT;

            var duration = parseInt(splitKeyDurationEdit.text);

            Duik.Animation.splitKeys(duration, alignment);
        };
    };

    var freezePoseButton = tweenTools.addButton(
        DuScriptUI.String.FREEZE_POSE,
        w16_freeze_pose,
        DuScriptUI.String.FREEZE_POSE_TIP,
        true
    );
    freezePoseButton.optionsPopup.build = function() {
        var propsSelector = DuScriptUI.selector( freezePoseButton.optionsPanel );
        propsSelector.addButton( DuScriptUI.String.ANIMATED_PROPERTIES, w16_animated_prop );
        propsSelector.addButton( DuScriptUI.String.SELECTED_PROPERTIES, w16_selected_props );
        propsSelector.setCurrentIndex(0);
        var layersSelector = DuScriptUI.selector( freezePoseButton.optionsPanel );
        layersSelector.addButton( DuScriptUI.String.SELECTED_LAYERS, w16_selected_layers );
        layersSelector.addButton( DuScriptUI.String.ALL_LAYERS, w16_layers );
        layersSelector.setCurrentIndex(0);

        freezePoseButton.onClick = function() {
            var animatedProps = tweenPropsSelector.index == 0;
            var selectedLayers = tweenLayersSelector.index == 0;
            Duik.Animation.freezePose(animatedProps, selectedLayers);
        };
        freezePoseButton.onAltClick = function() {
            var animatedProps = tweenPropsSelector.index == 0;
            var selectedLayers = tweenLayersSelector.index == 0;
            Duik.Animation.freezePose(animatedProps, selectedLayers, true);
        };
    };

    var syncKeysButton = tweenTools.addButton(
        DuScriptUI.String.SYNC,
        w16_sync_keys,
        DuScriptUI.String.SYNC_KEYS_TIP
    );
    syncKeysButton.onClick = Duik.Animation.syncKeys; 

    var tweenGroup = DuScriptUI.group( animationGroup, 'row' );

    var tweenSettingsButton = DuScriptUI.button(
        tweenGroup,
        '',
        DuScriptUI.Icon.OPTIONS,
        DuScriptUI.String.TWEEN_OPTIONS
    );
    tweenSettingsButton.alignment = ['left', 'fill'];
    var tweenOptionsPopup = DuScriptUI.popUp( DuScriptUI.String.TWEEN_OPTIONS );
    var tweenPropsSelector = DuScriptUI.selector( tweenOptionsPopup.content );
    tweenPropsSelector.addButton( DuScriptUI.String.ANIMATED_PROPERTIES, w16_animated_prop );
    tweenPropsSelector.addButton( DuScriptUI.String.SELECTED_PROPERTIES, w16_selected_props );
    tweenPropsSelector.setCurrentIndex(0);
    var tweenLayersSelector = DuScriptUI.selector( tweenOptionsPopup.content );
    tweenLayersSelector.addButton( DuScriptUI.String.SELECTED_LAYERS, w16_selected_layers );
    tweenLayersSelector.addButton( DuScriptUI.String.ALL_LAYERS, w16_layers );
    tweenLayersSelector.setCurrentIndex(0);
    tweenOptionsPopup.tieTo(tweenSettingsButton);

    var tweenSlider = DuScriptUI.slider(tweenGroup,50,0,100,'column',false,'','%','left',[0,25,33,50,66,75,100]);
    tweenSlider.onChange = function() {
        var animatedProps = tweenPropsSelector.index == 0;
        var selectedLayers = tweenLayersSelector.index == 0;
        Duik.Animation.tween( tweenSlider.value / 100, animatedProps, selectedLayers);
    };

    DuScriptUI.separator( animationGroup, uiMode <= 1 ? DuScriptUI.String.TEMPORAL_INTERPOLATION : '' );

    var easePresetsGroup = DuScriptUI.group( animationGroup );
    var easePresetSettingsButton = DuScriptUI.button(
        easePresetsGroup,
        '',
        DuScriptUI.Icon.OPTIONS,
        DuScriptUI.String.SET_KEY_OPTIONS
    );
    easePresetSettingsButton.alignment = ['left', 'fill'];
    var easeOptionsPopup = DuScriptUI.popUp( DuScriptUI.String.EASE_OPTIONS );
    var easeResetListButton = DuScriptUI.button(
        easeOptionsPopup.content,
        DuScriptUI.String.RESET_PRESET_LIST,
        w16_reset,
        DuScriptUI.String.RESET_PRESET_LIST_TIP
    );
    easeResetListButton.onClick = function() {
        easePresetList.removeAll();
        for(var i = 0; i < defaultEasePresets.length; i++) {
            easePresetList.add('item', defaultEasePresets[i]);
        };
        easePresetList.selection = 0;
        DuESF.scriptSettings.data.easePresets = defaultEasePresets;
        DuESF.scriptSettings.save();
        easeOptionsPopup.hide();
    };
    easeOptionsPopup.tieTo(easePresetSettingsButton);
    var defaultEasePresets = [ "Ease presets",
        "25/75 | 0/0", "33/33 | 0/0", "33/33 | 100/100", "33/66 | 0/0", "50/50 | 0/0", "50/50 | 100/100", "66/33 | 0/0", "75/25 | 0/0", "80/80 | 0/0"
    ];
    DuESF.scriptSettings.data.easePresets = def(DuESF.scriptSettings.data.easePresets, defaultEasePresets);
    var easePresetList = easePresetsGroup.add('dropdownlist',undefined,DuESF.scriptSettings.data.easePresets);
    easePresetList.alignment = ['fill', 'top'];
    easePresetList.selection = 0;
    easePresetList.onChange = function() {
        if (!easePresetList.selection) return;
        if (easePresetList.selection.index == 0) return;
        var preset = easePresetList.selection.text;
        var rePreset = /(\d+)\/(\d+) \| (-?\d+)\/(-?\d+)/i;
        var vals = preset.match(rePreset);
        if (vals == null) return;
        if (vals.length != 5) return;
        easeInSlider.setValue( parseInt(vals[1]) );
        easeOutSlider.setValue( parseInt(vals[2]) );
        velocityInSlider.setValue( vals[3] );
        velocityOutSlider.setValue( vals[4] );
        easeLinkButton.setChecked(vals[1] != vals[2]);
        velocityLinkButton.setChecked(vals[3] != vals[4]);
        easeApplyAllButton.onClick();
    }
    var easePresetAddButton = DuScriptUI.button( 
        easePresetsGroup,
        '',
        w12_add,
        DuScriptUI.String.ADD_EASE_PRESET
    );
    easePresetAddButton.alignment = ['right', 'fill'];
    easePresetAddButton.onClick = function() {
        var presets = [];
        for (var i = 1 ; i < easePresetList.items.length ; i++)
        {
            presets.push(easePresetList.items[i].text);
        }
        presets.push(easeInSlider.value + '/' + easeOutSlider.value + ' | ' + velocityInSlider.value + '/' + velocityOutSlider.value);
        presets.sort();
        presets.unshift('Ease presets');
        easePresetList.removeAll();
        for (var i=0;i<presets.length;i++)
        {
            easePresetList.add('item',presets[i]);
        }
        DuESF.scriptSettings.data.easePresets = presets;
        DuESF.scriptSettings.save();
        easePresetList.selection = 0;
    };
    var easePresetRemoveButton = DuScriptUI.button( 
        easePresetsGroup,
        '',
        w12_remove,
        DuScriptUI.String.REMOVE_EASE_PRESET
    );
    easePresetRemoveButton.alignment = ['right', 'fill'];
    easePresetRemoveButton.onClick = function() {
        if (!easePresetList.selection) return;
        if (easePresetList.selection.index == 0) return;
        easePresetList.remove(easePresetList.selection);
        var presets = [];
        for (var i = 0 ; i < easePresetList.items.length ; i++)
        {
            presets.push(easePresetList.items[i].text);
        }
        DuESF.scriptSettings.data.easePresets = presets;
        DuESF.scriptSettings.save();
        easePresetList.selection = 0;
    };
    var easePickButton = DuScriptUI.button(
        easePresetsGroup,
        '',
        DuScriptUI.Icon.EYE_DROPPER,
        DuScriptUI.String.PICK_EASE_TIP
    );
    easePickButton.alignment = ['right', 'fill'];
    easePickButton.onClick = function() {
        var props = DuAEComp.getSelectedProps();
        props = new DuList(props);
        if (props.length == 0) return;

        var propInfo;
        while(propInfo = props.next()) {
            var prop = propInfo.getProperty();
			if (prop.selectedKeys.length == 0) continue;
			var speed = propInfo.velocityToPercent(prop.selectedKeys[0]);
			var speedIn = speed[0];
			var speedOut = speed[1];
			var easeIn = prop.keyInTemporalEase(prop.selectedKeys[0])[0].influence;
			var easeOut = prop.keyOutTemporalEase(prop.selectedKeys[0])[0].influence;
			easeInSlider.setValue(easeIn);
			easeOutSlider.setValue(easeOut);
			velocityInSlider.setValue(speedIn);
			velocityOutSlider.setValue(speedOut);
			easeLinkButton.setChecked(easeIn != easeOut);
			velocityLinkButton.setChecked(speedIn != speedOut);
			break;
        }
    };
    var easeApplyAllButton = DuScriptUI.button(
        easePresetsGroup,
        '',
        DuScriptUI.Icon.CHECK,
        DuScriptUI.String.APPLY_EASE_VELOCITY_TIP
    );
    easeApplyAllButton.alignment = ['right', 'fill'];
    easeApplyAllButton.onClick = function() {
        DuAE.beginUndoGroup(DuScriptUI.String.SET_EASE);
        easeApplyButton.onClick();
        velocityApplyButton.onClick();
        DuAE.endUndoGroup();
    };

    var easeGroup = DuScriptUI.group(animationGroup, 'row');
    var easeInSlider = DuScriptUI.slider(easeGroup,33,1,100,'column',true,'','%','right',[75,50,33]);
    easeInSlider.onChange = function() {
        easeInSlider.lastModified = true;
		easeOutSlider.lastModified = false;

		if (!easeLinkButton.checked) easeOutSlider.setValue(easeInSlider.value);

		easeApplyButton.onClick();
    };
    easeInSlider.onChanging = function() {
        if (!easeLinkButton.checked) easeOutSlider.setValue(easeInSlider.value);
    };
    var easeButtonGroup = DuScriptUI.group( easeGroup, 'column' );
    easeButtonGroup.alignment = ['center', 'fill'];
    var easeSwitchButton = DuScriptUI.button(
        easeButtonGroup,
        '',
        w12_switch,
        DuScriptUI.String.SWITCH_EASES_TIP
    );
    easeSwitchButton.onClick = function() {
        var inVal = easeInSlider.value;
		easeInSlider.setValue(easeOutSlider.value);
		easeOutSlider.setValue(inVal);
		easeApplyButton.onClick();
    };
    var easeLinkButton = DuScriptUI.checkBox(
        easeButtonGroup,
        '',
        w12_constraints,
        '',
        '',
        w12_unlink_chain
    );
    easeLinkButton.onClick = function() {
        if (easeInSlider.lastModified)
		{
			easeOutSlider.setValue(easeInSlider.value);
		}
		else
		{
			easeInSlider.setValue(easeOutSlider.value);
		}
    };
    var easeOutSlider = DuScriptUI.slider(easeGroup,33,1,100,'column',false,'','%','left',[33,50,75]);
    easeOutSlider.onChange = function() {
        easeInSlider.lastModified = false;
		easeOutSlider.lastModified = true;

		if (!easeLinkButton.checked) easeInSlider.setValue(easeOutSlider.value);

		easeApplyButton.onClick();
    };
    easeOutSlider.onChanging = function() {
        if (!easeLinkButton.checked) easeInSlider.setValue(easeOutSlider.value);
    };
    var easeApplyButton = DuScriptUI.button(
        easeGroup,
        '',
        DuScriptUI.Icon.CHECK,
        DuScriptUI.String.APPLY_EASE_TIP
    );
    easeApplyButton.alignment = ['right', 'fill'];
    easeApplyButton.onClick =  function() {
        Duik.Animation.setEase( easeInSlider.value, easeOutSlider.value );
    };

    var velocityGroup = DuScriptUI.group(animationGroup,'row');
    var velocityInSlider = DuScriptUI.slider(velocityGroup,0,-400,400,'column',true,'','%','right',[200,100,0]);
    velocityInSlider.onChange = function() {
        velocityInSlider.lastModified = true;
		velocityOutSlider.lastModified = false;

		if (!velocityLinkButton.checked) velocityOutSlider.setValue(velocityInSlider.value);

		velocityApplyButton.onClick();
    };
    velocityInSlider.onChanging = function() {
        if (!velocityLinkButton.checked) velocityOutSlider.setValue(velocityInSlider.value);
    };
    var velocityButtonGroup = DuScriptUI.group( velocityGroup, 'column' );
    velocityButtonGroup.alignment = ['center', 'fill'];
    var velocitySwitchButton = DuScriptUI.button(
        velocityButtonGroup,
        '',
        w12_switch,
        DuScriptUI.String.SWITCH_VELOCITIES_TIP
    );
    velocitySwitchButton.onClick = function() {
        var inVal = velocityInSlider.value;
		velocityInSlider.setValue(velocityOutSlider.value);
		velocityOutSlider.setValue(inVal);
		velocityApplyButton.onClick();
    }
    var velocityLinkButton = DuScriptUI.checkBox(
        velocityButtonGroup,
        '',
        w12_constraints,
        '',
        '',
        w12_unlink_chain
    );
    velocityLinkButton.onClick = function() {
        if (velocityInSlider.lastModified)
		{
			velocityOutSlider.setValue(velocityInSlider.value);
		}
		else
		{
			velocityInSlider.setValue(velocityOutSlider.value);
		}
    };
    var velocityOutSlider = DuScriptUI.slider(velocityGroup,0,-400,400,'column',false,'','%','left',[0, 100, 200]);
    velocityOutSlider.onChange = function() {
        velocityInSlider.lastModified = false;
		velocityOutSlider.lastModified = true;

		if (!velocityLinkButton.checked) velocityInSlider.setValue(velocityOutSlider.value);

		velocityApplyButton.onClick();
    };
    velocityOutSlider.onChanging = function() {
        if (!velocityLinkButton.checked) velocityInSlider.setValue(velocityOutSlider.value);
    };
    var velocityApplyButton = DuScriptUI.button(
        velocityGroup,
        '',
        DuScriptUI.Icon.CHECK,
        DuScriptUI.String.APPLY_VELOCITY_TIP
    );
    velocityApplyButton.alignment = ['right', 'fill'];
    velocityApplyButton.onClick = function() {
        Duik.Animation.setVelocity( velocityInSlider.value, velocityOutSlider.value );
    };

    DuScriptUI.separator( animationGroup, uiMode <= 1 ? DuScriptUI.String.SPATIAL_INTERPOLATION : '' );

    var spatialInterpolationGroup = DuScriptUI.group( animationGroup, 'row' );

    var spatialLinButton = DuScriptUI.button(
        spatialInterpolationGroup,
        '',
        w16_linear,
        DuScriptUI.String.SET_SPATIAL_LINEAR_TIP
    );
    spatialLinButton.onClick = Duik.Animation.setSpatialLinear;
    var spatialBezierInOutButton = DuScriptUI.button(
        spatialInterpolationGroup,
        '',
        w16_bezier_in_out,
        DuScriptUI.String.SET_SPATIAL_BEZIER_TIP
    );
    spatialBezierInOutButton.onClick = Duik.Animation.setSpatialBezier;
    var spatialBezierOutButton = DuScriptUI.button(
        spatialInterpolationGroup,
        '',
        w16_bezier_out,
        DuScriptUI.String.SET_SPATIAL_BEZIER_OUT_TIP
    );
    spatialBezierOutButton.onClick = Duik.Animation.setSpatialBezierOut;
    var spatialBezierInButton = DuScriptUI.button(
        spatialInterpolationGroup,
        '',
        w16_bezier_in,
        DuScriptUI.String.SET_SPATIAL_BEZIER_IN_TIP
    );
    spatialBezierInButton.onClick = Duik.Animation.setSpatialBezierIn;
    var spatialAutoButton = DuScriptUI.button(
        spatialInterpolationGroup,
        uiMode >= 2 ? '': DuScriptUI.String.FIX,
        w16_autorig,
        DuScriptUI.String.SET_SPATIAL_AUTO_TIP
    );
    spatialAutoButton.onClick = Duik.Animation.fixSpatialInterpolation;

    DuScriptUI.separator( animationGroup );

    var line1 = DuScriptUI.group(animationGroup, uiMode >= 2 ? 'row' : 'column');

    var animationLibButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.ANIMATION_LIB + '...',
        w16_library,
        DuScriptUI.String.ANIMATION_LIB_TIP
    );
    animationLibButton.onClick = function() {
        var folderURI = def(DuESF.scriptSettings.data.animationLibFolder, DuESF.scriptSettings.file.parent.absoluteURI + '/' + DuScriptUI.String.ANIMATION_LIB);
        var libFolder = new Folder(folderURI);
        if (!libFolder.exists) libFolder.create();

        if (!animationLibGroup.built) {
            createSubPanel(
                animationLibGroup,
                DuScriptUI.String.ANIMATION_LIB,
                animationGroup,
                false
            );

            #include "animationLibPanel.jsxinc"
            buildAnimationLibPanel( animationLibGroup );

            DuScriptUI.showUI(animationLibGroup);
        }

        hideAllGroups();
        animationLibGroup.visible = true;
    }

    createKleanerButton( line1 );

    var sequenceButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.SEQUENCE,
        w16_sequencer,
        DuScriptUI.String.SEQUENCE_TIP,
        true, // option panel
        undefined, // orientation
        undefined, // alignment
        undefined, // localize
        undefined, // ingore ui mode
        undefined, // options without button
        undefined, // options button text
        true // options without panel
    );
    sequenceButton.onOptions = function(showUI) {
        showUI = def(showUI, true);

        if (!sequenceGroup.built){
            createSubPanel(
                sequenceGroup,
                DuScriptUI.String.SEQUENCE,
                animationGroup,
                false
            );

            var layerKeySelector = DuScriptUI.selector( sequenceGroup );
            layerKeySelector.addButton(
                DuScriptUI.String.LAYERS,
                w16_layers
            );
            layerKeySelector.addButton(
                DuScriptUI.String.KEYFRAMES,
                w16_keyframe
            );
            layerKeySelector.setCurrentIndex(0);
            layerKeySelector.onChange = function() {
                layerModeSelector.visible = layerKeySelector.index == 0;
            };

            var layerModeSelector = DuScriptUI.selector( sequenceGroup );

            layerModeSelector.addButton(
                DuScriptUI.String.TIMES,
                w16_sequencer_times
            );
            layerModeSelector.addButton(
                DuScriptUI.String.IN_POINTS,
                w16_sequencer
            );
            layerModeSelector.addButton(
                DuScriptUI.String.OUT_POINTS,
                w16_sequencer_out
            );
            layerModeSelector.setCurrentIndex(0);

            var shapeSelector = DuScriptUI.selector( sequenceGroup );
            shapeSelector.addButton(
                DuScriptUI.String.LINEAR,
                w16_linear_interpolation
            );
            shapeSelector.addButton(
                DuScriptUI.String.SIGMOID,
                w16_interpolator
            );
            shapeSelector.addButton(
                DuScriptUI.String.GAUSSIAN_BELL,
                w16_gaussian_interpolation
            );
            shapeSelector.addButton(
                DuScriptUI.String.EASE_IN_LOGARITHMIC,
                w16_logarithmic_interpolation
            );
            shapeSelector.addButton(
                DuScriptUI.String.EASE_OUT_EXPONENTIAL,
                w16_exponential_interpolation
            );
            shapeSelector.setCurrentIndex(2);

            var durationEdit = DuScriptUI.editText(
                sequenceGroup,
                '24',
                DuScriptUI.String.DURATION + ': ',
                ' ' + DuScriptUI.String.FRAMES,
                '',
                '',
                false
            );

            var rateSlider = DuScriptUI.slider(
                sequenceGroup,
                30,
                0,
                100,
                'row',
                false,
                DuScriptUI.String.RATE
            );

            DuScriptUI.separator(sequenceGroup);

            var okButton = DuScriptUI.button(
                sequenceGroup,
                DuScriptUI.String.SEQUENCE,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.SEQUENCE_TIP,
                false,
                'row',
                'center'
            );
            okButton.onClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                if (layerKeySelector.index == 0) Duik.Animation.sequenceLayers(duration, moveLayers, inPoints, false, getInterpolation());
                else Duik.Animation.sequenceKeys(duration, false, getInterpolation());
            };
            sequenceButton.onClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                Duik.Animation.sequenceLayers(duration, moveLayers, inPoints, false, getInterpolation());
            };
            okButton.onAltClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                if (layerKeySelector.index == 0) Duik.Animation.sequenceLayers(duration, moveLayers, inPoints, true, getInterpolation());
                else Duik.Animation.sequenceKeys(duration, true, getInterpolation());
            };
            sequenceButton.onAltClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                Duik.Animation.sequenceLayers(duration, moveLayers, inPoints, true, getInterpolation());
            };

            sequenceButton.onCtrlClick = okButton.onCtrlClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                Duik.Animation.sequenceKeys(duration, false, getInterpolation());
            };
            sequenceButton.onCtrlAltClick = okButton.onCtrlAltClick = function() {
                var moveLayers = layerModeSelector.index == 0;
                var inPoints = layerModeSelector.index == 1;

                var duration = parseInt(durationEdit.text);
                if (isNaN(duration)) duration = 24;

                Duik.Animation.sequenceKeys(duration, true, getInterpolation());
            };

            function getInterpolation() {

                // For now, approximate with a Bezier function
                var rate = rateSlider.value / 100;
                var s = shapeSelector.index;
                if (s == 0) return DuInterpolation.linear;

                if (s == 1) { // S
                    return function(t, tm, tM, vm, vM) {
                        return DuInterpolation.bezier(t, tm, tM, vm, vM, [0, rate, 1, 1-rate]);
                    };
                }
                if (s == 2) { // B
                    //var outRate = 
                    return function(t, tm, tM, vm, vM) {
                        return DuInterpolation.bezier(t, tm, tM, vm, vM, [0, rate, 1, rate]);
                    };
                }
                if (s == 3) { // Log
                    //var outRate = 
                    return function(t, tm, tM, vm, vM) {
                        return DuInterpolation.bezier(t, tm, tM, vm, vM, [0, 0, 1, 1-rate]);
                    };
                }
                if (s == 4) { // exp
                    //var outRate = 
                    return function(t, tm, tM, vm, vM) {
                        return DuInterpolation.bezier(t, tm, tM, vm, vM, [0, rate, 1, 1]);
                    };
                }

                /*
                if (s == 1) {
                    rate = DuInterpolation.linear(rate, 0, 20, 0, 1);
                    return function(t, tm, tM, vm, vM) { return DuInterpolation.logistic(t, tm, tM, vm, vM, rate); };
                }
                if (s == 2) return DuInterpolation.inverseGaussian;
                if (s == 3) return DuInterpolation.logarithmic;
                if (s == 4) return DuInterpolation.exponential;
                return DuInterpolation.gaussian;*/
            }

            DuScriptUI.showUI(sequenceGroup);
        }
        if (showUI) {
            hideAllGroups();
            sequenceGroup.visible = true;
        }
    }

    createXSheetButton( line1 );

    var nlaButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.NLA,
        w16_nla,
        DuScriptUI.String.NLA_TIP,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        true // no button on the options popup
    );
    nlaButton.onClick = Duik.Automation.setupNLA;
    nlaButton.optionsPopup.build = function() {
        var clipButton = DuScriptUI.button(
            nlaButton.optionsPanel,
            DuScriptUI.String.NLA_NEW_CLIP,
            w12_add,
            DuScriptUI.String.NLA_NEW_CLIP_TIP
        );
        clipButton.onClick = Duik.Automation.addNLAClip;
    }

    var celAnimationButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.CEL_ANIMATION + '...',
        w16_cel_animation,
        DuScriptUI.String.CEL_ANIMATION_TIP,
        false,
        undefined,
        undefined,
        false // Don't translate
    );
    celAnimationButton.onClick = function() {
        if (!celAnimationGroup.built) {
            createSubPanel(
                celAnimationGroup,
                DuScriptUI.String.CEL_ANIMATION,
                animationGroup,
                false
            );

            var newCelButton = DuScriptUI.button(
                celAnimationGroup,
                DuScriptUI.String.NEW_CEL,
                w16_new_cel,
                DuScriptUI.String.NEW_CEL_TIP
            );
            newCelButton.onClick = Duik.Animation.newCel;
            newCelButton.onAltClick = function() { Duik.Animation.newCel(true) };

            DuScriptUI.separator(celAnimationGroup);

            var onionSkinGroup = DuScriptUI.group( celAnimationGroup, 'row');

            var onionSkinButton = DuScriptUI.checkBox(
                onionSkinGroup,
                DuScriptUI.String.ONION_SKIN,
                w16_onion_skin,
                DuScriptUI.String.ONION_SKIN_TIP
            );
            onionSkinButton.alignment = ['left', 'fill'];
            onionSkinButton.setChecked(true);
            onionSkinButton.onClick = function() {
                if (onionSkinButton.checked) {
                    onionInGroup.enabled = true;
                    onionOutGroup.enabled = true;
                    onionSkinEdit.enabled = true;
                }
                else {
                    onionInGroup.enabled = false;
                    onionOutGroup.enabled = false
                    onionSkinEdit.enabled = false;
                }

                var i = onionInSlider.value;
                var o = onionOutSlider.value;
                if (!onionInButton.checked) i = 0;
                if (!onionOutButton.checked) o = 0;

                var f = parseInt( onionSkinEdit.text );
                var e = parseInt( frameEditButton.text );

                Duik.Animation.celOnionSkin( onionSkinButton.checked, f, e, i, o);
            };
            
            var onionSkinEdit = DuScriptUI.editText(
                onionSkinGroup,
                '5',
                '',
                ' ' + DuScriptUI.String.FRAMES,
                '',
                '',
                false
            );
            onionSkinEdit.onChange = onionSkinButton.onClick;

            var onionInGroup = DuScriptUI.group( celAnimationGroup, 'row');

            var onionInButton = DuScriptUI.checkBox(
                onionInGroup,
                DuScriptUI.String.IN
            );
            onionInButton.setChecked(true);
            onionInButton.alignment = ['left', 'fill'];
            onionInButton.onClick = function() {
                onionInSlider.enabled = onionInButton.checked;
                onionSkinButton.onClick();
            };

            var onionInSlider = DuScriptUI.slider(
                onionInGroup,
                50,
                0,
                100,
                'row',
                undefined,
                '',
                '%'
            );
            onionInSlider.onChange = onionSkinButton.onClick;

            var onionOutGroup = DuScriptUI.group( celAnimationGroup, 'row');

            var onionOutButton = DuScriptUI.checkBox(
                onionOutGroup,
                DuScriptUI.String.OUT
            );
            onionOutButton.setChecked(true);
            onionOutButton.alignment = ['left', 'fill'];
            onionOutButton.onClick = function() {
                onionOutSlider.enabled = onionOutButton.checked;
                onionSkinButton.onClick();
            };

            var onionOutSlider = DuScriptUI.slider(
                onionOutGroup,
                50,
                0,
                100,
                'row',
                undefined,
                '',
                '%'
            );
            onionOutSlider.onChange = onionSkinButton.onClick;

            DuScriptUI.separator(celAnimationGroup);

            var celFrameGroup = DuScriptUI.group( celAnimationGroup, 'row');

            var prevFrameButton = DuScriptUI.button(
                celFrameGroup,
                '',
                w16_previous_frame,
                DuScriptUI.String.PREVIOUS_FRAME_TIP
            );
            prevFrameButton.onClick = function() {
                var e = parseInt( frameEditButton.text );
                Duik.Animation.previousCel(e);
            };

            var frameEditButton = DuScriptUI.editText(
                celFrameGroup,
                '2',
                DuScriptUI.String.EXPOSURE + ': ',
                ' ' + DuScriptUI.String.FRAMES,
                '',
                DuScriptUI.String.EXPOSURE_TIP,
                false
            );

            var nextFrameButton = DuScriptUI.button(
                celFrameGroup,
                '',
                w16_next_frame,
                DuScriptUI.String.NEXT_FRAME_TIP
            );
            nextFrameButton.onClick = function() {
                var e = parseInt( frameEditButton.text );
                Duik.Animation.nextCel(e);
            };

            DuScriptUI.showUI(celAnimationGroup);
        }

        hideAllGroups();
        celAnimationGroup.visible = true;
    };

    var animationLibGroup = DuScriptUI.group(mainGroup, 'column');
    animationLibGroup.visible = false;
    animationLibGroup.built = false;

    var moveAnchorPointGroup = DuScriptUI.group(mainGroup, 'column');
    moveAnchorPointGroup.visible = false;
    moveAnchorPointGroup.built = false;

    var celAnimationGroup = DuScriptUI.group(mainGroup, 'column');
    celAnimationGroup.visible = false;
    celAnimationGroup.built = false;

    var sequenceGroup = DuScriptUI.group(mainGroup, 'column');
    sequenceGroup.visible = false;
    sequenceGroup.built = false;
    //*/
}