function buildAnimationPanelUI( tab )
{
    // Utils

    function hideAllGroups()
    {
        animationGroup.visible = false;
        animationLibGroup.visible = false;
        moveAnchorPointGroup.visible = false;
    }

    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1,3];
    
    // A title
    DuScriptUI.staticText( tab, DuScriptUI.String.ANIMATION ).alignment = ['center', 'top'];

    // tools
    var toolsGroup = DuScriptUI.toolBar( this );

    var selectButton = toolsGroup.addButton(
        DuScriptUI.String.SELECT_KEYFRAMES,
        w12_select,
        DuScriptUI.String.SELECT_KEYFRAMES_TIP,
        true
    );
    selectButton.optionsPopup.build = function()
    {
        var selectMethodSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.TIME,
            w16_time,
            DuScriptUI.String.SELECT_TIME_TIP
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.RANGE,
            w16_range,
            DuScriptUI.String.SELECT_RANGE_TIP
        );

        selectMethodSelector.setCurrentIndex(1);

        selectMethodSelector.onChange = function() {
            outEdit.enabled = selectMethodSelector.index == 1;
        };

        var currentTimeButton = DuScriptUI.checkBox(
            selectButton.optionsPanel,
            DuScriptUI.String.CURRENT_TIME
        );
        currentTimeButton.setChecked( true );

        currentTimeButton.onClick = function() {
            rangeGroup.visible = !currentTimeButton.checked;
        };

        var rangeGroup = DuScriptUI.group( selectButton.optionsPanel, 'row' );
        
        var inEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        inEdit.alignment = ['fill', 'fill'];

        var outEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        outEdit.alignment = ['fill', 'fill'];

        rangeGroup.visible = false;

        var pickRangeButton = DuScriptUI.button(
            rangeGroup,
            '',
            DuScriptUI.Icon.EYE_DROPPER
        );
        pickRangeButton.alignment = ['right', 'center'];

        pickRangeButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;

            if (selectMethodSelector.index == 0)
            {
                inEdit.setText(timeToCurrentFormat(comp.time+comp.displayStartTime,1/comp.frameDuration));
            }
            else
            {
                inEdit.setText(timeToCurrentFormat(comp.workAreaStart+comp.displayStartTime,1/comp.frameDuration));
                outEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.workAreaDuration+comp.displayStartTime,1/comp.frameDuration));
            }
        }

        var layerSelectionSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerSelectionSelector.addButton(
            DuScriptUI.String.SELECTED_LAYERS,
            w16_selected_layers
        );
        layerSelectionSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerSelectionSelector.setCurrentIndex(1);

        var layerTypeSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerTypeSelector.addButton(
            DuScriptUI.String.CONTROLLERS,
            w16_controller
        );
        layerTypeSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerTypeSelector.setCurrentIndex(0);

        var propsGroup = DuScriptUI.group( selectButton.optionsPanel, 'row' );

        var posButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_move,
            DuScriptUI.String.POSITION
        );
        posButton.alignment = ['center','top'];
        posButton.setChecked(true);

        var rotButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_rotate,
            DuScriptUI.String.ROTATION
        );
        rotButton.alignment = ['center','top'];
        rotButton.setChecked(true);

        var scaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_scale,
            DuScriptUI.String.SCALE
        );
        scaButton.alignment = ['center','top'];
        scaButton.setChecked(true);

        var opaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_opacity,
            DuScriptUI.String.OPACITY
        );
        opaButton.alignment = ['center','top'];
        opaButton.setChecked(true);

        var masksButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_mask,
            DuScriptUI.String.MASKS
        );
        masksButton.alignment = ['center','top'];
        masksButton.setChecked(true);

        var fxButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_fx,
            DuScriptUI.String.EFFECTS
        );
        fxButton.alignment = ['center','top'];
        fxButton.setChecked(true);

        var allPropsButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_props,
            DuScriptUI.String.ALL_PROPERTIES
        );
        allPropsButton.alignment = ['center','top'];

        allPropsButton.onClick = function() {
            var checked = allPropsButton.checked;
            posButton.setChecked(checked);
            rotButton.setChecked(checked);
            scaButton.setChecked(checked);
            opaButton.setChecked(checked);
            masksButton.setChecked(checked);
            fxButton.setChecked(checked);
        };

        selectButton.onClick = function ()
        {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;
            // Get range
            var inTime = comp.time;
		    var outTime = comp.time;
            if (currentTimeButton.checked)
            {
                if (selectMethodSelector.index == 1)
                {
                    inTime = comp.workAreaStart;
                    outTime = comp.workAreaStart + comp.workAreaDuration;
                }
            }
            else
            {
                inTime = currentFormatToTime(inEdit.text,1/comp.frameDuration)-comp.displayStartTime;
                if (selectMethodSelector.index == 1) outTime = currentFormatToTime(outEdit.text,1/comp.frameDuration)-comp.displayStartTime;
                else outTime = inTime;
            }

            // Get property types
            var props = [];
            if (!allPropsButton.checked)
            {
                if (posButton.checked) {
                    props.push( 'ADBE Position' );
                    props.push( 'ADBE Vector Position' );
                    props.push( 'ADBE Position_0' );
                    props.push( 'ADBE Position_1' );
                    props.push( 'ADBE Position_2' );
                }
                if (rotButton.checked) {
                    props.push( 'ADBE Rotate Z' );
                    props.push( 'ADBE Rotate Y' );
                    props.push( 'ADBE Rotate X' );
                    props.push( 'ADBE Orientation' );
                    props.push( 'ADBE Vector Rotation' );
                }
                if (scaButton.checked) {
                    props.push( 'ADBE Scale' );
                    props.push( 'ADBE Vector Scale' );
                }
                if (opaButton.checked) {
                    props.push( 'ADBE Opacity' );
                    props.push( 'ADBE Vector Group Opacity' );
                }
                if (masksButton.checked) {
                    props.push( 'ADBE Mask Parade' );
                }
                if (fxButton.checked) {
                    props.push( 'ADBE Effect Parade' );
                }
            }

            Duik.Animation.selectKeyframes(
                comp,
                layerSelectionSelector.index == 0,
                layerTypeSelector.index == 0,
                [inTime, outTime],
                props );
        };
    };

    var copyButton = toolsGroup.addButton(
        DuScriptUI.String.COPY_ANIMATION,
        w12_copy,
        DuScriptUI.String.COPY_KEYFRAMES_TIP
    );
    copyButton.onClick = Duik.Animation.copy;

    var pasteButton = toolsGroup.addButton(
        DuScriptUI.String.PASTE_ANIMATION,
        w12_paste,
        DuScriptUI.String.PASTE_KEYFRAMES_TIP,
        true
    );
    pasteButton.optionsPopup.build = function() {

        var offsetSelector = DuScriptUI.selector( pasteButton.optionsPanel );
        offsetSelector.addButton(
            DuScriptUI.String.OFFSET_VALUES,
            w16_offset,
            DuScriptUI.String.OFFSET_VALUES_TIP
        );
        offsetSelector.addButton(
            DuScriptUI.String.ABSOLUTE_VALUES,
            w16_locator,
            DuScriptUI.String.ABSOLUTE_VALUES_TIP
        );
        offsetSelector.setCurrentIndex(1);

        var reverseButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REVERSE_KEYFRAMES,
            undefined,
            DuScriptUI.String.REVERSE_KEYFRAMES_TIP
        );

        var replaceButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REPLACE_KEYFRAMES,
            undefined,
            DuScriptUI.StringREPLACE_KEYFRAMES_TIP
        );

        pasteButton.onClick = function () {
            Duik.Animation.paste(
                undefined,
                replaceButton.checked,
                offsetSelector.index == 0,
                reverseButton.checked
            );
        };
        pasteButton.onCtrlClick = function () { Duik.Animation.paste( undefined, false, true ); };
        pasteButton.onAltClick = function () { Duik.Animation.paste( undefined, false, false, true ); };
        pasteButton.onCtrlAltClick = function () { Duik.Animation.paste( undefined, false, true, true ); };
    };

    var interpolatorButton = toolsGroup.addButton(
        DuScriptUI.String.INTERPOLATOR,
        w12_interpolator,
        DuScriptUI.String.INTERPOLATOR_TIPs
    );
    interpolatorButton.onClick = Duik.Animation.interpolator;

    var zeroButton = toolsGroup.addButton(
        DuScriptUI.String.ADD_ZERO,
        w12_zero,
        DuScriptUI.String.CONSTRAINT_ZERO_TIP
    );
    zeroButton.onClick = Duik.Constraint.zero;
    zeroButton.onAltClick = Duik.Constraint.resetPRS;
    zeroButton.onCtrlAltClick = function () { Duik.Constraint.resetPRS(undefined, true); };

    var moveAnchorPointButton = toolsGroup.addButton(
        DuScriptUI.String.MOVE_ANCHOR_POINTS,
        w12_move_anchor_point,
        DuScriptUI.String.MOVE_ANCHOR_POINTS_TIP
    );
    moveAnchorPointButton.onClick = function()
    {
        if (!moveAnchorPointGroup.built)
        {
            var maskButton = DuScriptUI.checkBox(
                moveAnchorPointGroup,
                DuScriptUI.String.INCLUDE_MASKS,
                w16_mask,
                DuScriptUI.String.INCLUDE_MASKS_TIP
            );

            var gridGroup = DuScriptUI.group(moveAnchorPointGroup, 'row');
            gridGroup.alignment = ['center', 'top'];
            var column1 = DuScriptUI.group(gridGroup, 'column');
            var column2 = DuScriptUI.group(gridGroup, 'column');
            var column3 = DuScriptUI.group(gridGroup, 'column');

            var tlButton = DuScriptUI.button(
                column1,
                '',
                w12_move_tl
            );
            tlButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.TOP_LEFT, marginsSlider.value, maskButton.checked); };
            var lButton = DuScriptUI.button(
                column1,
                '',
                w12_move_l
            );
            lButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.LEFT, marginsSlider.value, maskButton.checked); };
            var blButton = DuScriptUI.button(
                column1,
                '',
                w12_move_bl
            );
            blButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.BOTTOM_LEFT, marginsSlider.value, maskButton.checked); };

            var tButton = DuScriptUI.button(
                column2,
                '',
                w12_move_t
            );
            tButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.TOP, marginsSlider.value, maskButton.checked); };
            var cButton = DuScriptUI.button(
                column2,
                '',
                w12_center
            );
            cButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.CENTER, marginsSlider.value, maskButton.checked); };
            var bButton = DuScriptUI.button(
                column2,
                '',
                w12_move_b
            );
            bButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.BOTTOM, marginsSlider.value, maskButton.checked); };

            var trButton = DuScriptUI.button(
                column3,
                '',
                w12_move_tr
            );
            trButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.TOP_RIGHT, marginsSlider.value, maskButton.checked); };
            var rButton = DuScriptUI.button(
                column3,
                '',
                w12_move_r
            );
            rButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.RIGHT, marginsSlider.value, maskButton.checked); };
            var brButton = DuScriptUI.button(
                column3,
                '',
                w12_move_br
            );
            brButton.onClick = function() { Duik.Constraint.moveAnchorPoint(DuMath.Location.BOTTOM_RIGHT, marginsSlider.value, maskButton.checked); };

            var marginsSlider = DuScriptUI.slider(
                moveAnchorPointGroup,
                0,
                -500,
                500,
                'column',
                false,
                DuScriptUI.String.MARGIN + ": ",
                ' ' + DuAE.UnitText.PIXELS
            );

            // Close button
            var cancelButton = DuScriptUI.button(
                moveAnchorPointGroup,
                DuScriptUI.String.CLOSE,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            cancelButton.alignment = ['fill', 'top'];
            cancelButton.onClick = function () {
                hideAllGroups();
                animationGroup.visible = true;
            }

            moveAnchorPointGroup.built = true;
            DuScriptUI.showUI( moveAnchorPointGroup );
        }

        hideAllGroups();
        moveAnchorPointGroup.visible = true;
    };

    createAlignButton( toolsGroup );

    var mainGroup = DuScriptUI.group(this, 'stacked');
    mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var animationGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) constraintsGroup.spacing = 3;

    var animationLibButton = DuScriptUI.button(
        animationGroup,
        DuScriptUI.String.ANIMATION_LIB + '...',
        w16_library,
        DuScriptUI.String.ANIMATION_LIB_TIP
    );
    animationLibButton.onClick = function()
    {
        var folderURI = def( DuESF.scriptSettings.data.animationLibFolder, DuESF.scriptSettings.file.parent.absoluteURI + '/' + DuScriptUI.String.ANIMATION_LIB);
        var libFolder = new Folder( folderURI );
        if (!libFolder.exists) libFolder.create();

        if (!animationLibGroup.built)
        {
            animationLibGroup.built = true;

            // Popups
            var catNameEditor = DuScriptUI.stringPrompt(
                DuScriptUI.String.ANIMATION_LIB_RENAME_CAT,
                DuScriptUI.String.ANIMATION_LIB_NEW_CAT
            );

            var animNameEditor = DuScriptUI.stringPrompt(
                DuScriptUI.String.ANIMATION_LIB_RENAME_ANIM,
                DuScriptUI.String.ANIMATION_LIB_NEW_ANIM
            );

            // Categories
            var categoriesGroup = DuScriptUI.group( animationLibGroup, 'row' );

            var removeCatButton = DuScriptUI.button(
                categoriesGroup,
                "",
                w12_remove,
                DuScriptUI.String.ANIMATION_LIB_REMOVE_CAT_TIP
            );
            removeCatButton.alignment = ['left', 'fill'];
            removeCatButton.onClick = function()
            {
                if (catSelector.index < 2) return;
                var ok = confirm( DuString.args(DuScriptUI.String.ANIMATION_LIB_CONFIRM_REMOVE_CAT, [catSelector.text] ) );
                if (!ok) return;
                var folder = new Folder( libFolder.absoluteURI + '/' + catSelector.text );
                DuFolder.wipeFolder( folder );
                animationLibGroup.refreshLib();
            }

            var editCatButton = DuScriptUI.button(
                categoriesGroup,
                "",
                w12_edit,
                DuScriptUI.String.ANIMATION_LIB_RENAME_CAT_TIP
            );
            editCatButton.alignment = ['left', 'fill'];
            editCatButton.onClick = function()
            {
                if (catSelector.index < 2)
                {
                    catNameEditor.block = true;
                    return;
                }
                catNameEditor.setText( catSelector.text );
                catNameEditor.edit();
            };

            var addCatButton = DuScriptUI.button(
                categoriesGroup,
                "",
                w12_add,
                DuScriptUI.String.ANIMATION_LIB_ADD_CAT_TIP
            );
            addCatButton.alignment = ['left', 'fill'];
            addCatButton.onClick = function()
            {
                catNameEditor.setText('');
                catNameEditor.edit();
            }

            var catSelector = DuScriptUI.selector( categoriesGroup );
            catSelector.addButton( 'All categories' );
            catSelector.addButton( 'Uncategorized' );
            catSelector.onChange = function() {

                // A function to list anims
                function listAnims( folder ) {
                    var files = folder.getFiles('*.duio');
                    for(var i = 0, n = files.length; i < n; i++)
                    {
                        var f = files[i];
                        var icon = new File( DuPath.switchExtension( f, 'png' ) );
                        var item = animationList.add( 'item', DuPath.getBasename( f ) );
                        item.file = f;
                        if (icon.exists)
                        {
                            // The image may not be written yet, or contain invalid data
                            try { item.image = icon.absoluteURI; }
                            catch(e) {};
                        }
                    }
                }

                // List anim files
                animationList.removeAll();

                if (catSelector.index == 0) // All
                {
                    listAnims( libFolder );
                    var subFiles = libFolder.getFiles();
                    for (var i = 0, n = subFiles.length; i < n; i++)
                    {
                        if (!(subFiles[i] instanceof Folder)) continue;
                        // Add the content
                        listAnims( subFiles[i] );
                    }
                }
                else if (catSelector.index == 1) // Uncategorized
                {
                    listAnims( libFolder );
                }
                else
                {
                    var folder = new Folder( libFolder.absoluteURI + '/' + catSelector.text );
                    listAnims( folder );
                }
            }

            // Main group
            var listGroup = DuScriptUI.group( animationLibGroup, 'row') ;
            listGroup.alignment = ['fill','fill'];

            // Animations
            var animationList = listGroup.add( 'listbox' );
            animationList.alignment = ['fill','fill'];

            // Buttons
            var buttonGroup = DuScriptUI.group( listGroup, 'column');
            buttonGroup.alignment = ['right', 'fill'];
            // Top (apply & settings)
            var topButtons = DuScriptUI.group( buttonGroup, 'column');
            topButtons.alignment = ['right', 'top'];

            var applyButton = DuScriptUI.button(
                topButtons,
                '',
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.APPLY_ANIMATION_TIP,
                true
            );
            applyButton.optionsPopup.build = function()
            {
                if (applyButton.optionsPopup.built) return;
                applyButton.optionsPopup.built = true;
                
                var settingsKeysSelector = DuScriptUI.selector( applyButton.optionsPanel );
                settingsKeysSelector.addButton(
                    DuScriptUI.String.ALL_PROPERTIES,
                    w16_props
                );
                settingsKeysSelector.addButton(
                    DuScriptUI.String.KEYFRAMES_ONLY,
                    w16_keyframe
                );
                settingsKeysSelector.setCurrentIndex(0);

                var propsGroup = DuScriptUI.group( applyButton.optionsPanel, 'row' );
                propsGroup.alignment = ['center','top'];

                var posButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_move,
                    DuScriptUI.String.POSITION
                );
                posButton.setChecked(true);

                var rotButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_rotate,
                    DuScriptUI.String.ROTATION
                );
                rotButton.setChecked(true);

                var scaButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_scale,
                    DuScriptUI.String.SCALE
                );
                scaButton.setChecked(true);

                var opaButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_opacity,
                    DuScriptUI.String.OPACITY
                );
                opaButton.setChecked(true);

                var masksButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_mask,
                    DuScriptUI.String.MASKS
                );
                masksButton.setChecked(true);

                var fxButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_fx,
                    DuScriptUI.String.EFFECTS
                );
                fxButton.setChecked(true);

                var allPropsButton = DuScriptUI.checkBox(
                    propsGroup,
                    '',
                    w16_props,
                    DuScriptUI.String.ALL_PROPERTIES
                );
                allPropsButton.setChecked(true);

                allPropsButton.onClick = function() {
                    var checked = allPropsButton.checked;
                    posButton.setChecked(checked);
                    rotButton.setChecked(checked);
                    scaButton.setChecked(checked);
                    opaButton.setChecked(checked);
                    masksButton.setChecked(checked);
                    fxButton.setChecked(checked);
                };

                function getMatchNames() {
                    var props = [];
                    if (!allPropsButton.checked)
                    {
                        if (posButton.checked) {
                            props.push( 'ADBE Position' );
                            props.push( 'ADBE Vector Position' );
                            props.push( 'ADBE Position_0' );
                            props.push( 'ADBE Position_1' );
                            props.push( 'ADBE Position_2' );
                        }
                        if (rotButton.checked) {
                            props.push( 'ADBE Rotate Z' );
                            props.push( 'ADBE Rotate Y' );
                            props.push( 'ADBE Rotate X' );
                            props.push( 'ADBE Orientation' );
                            props.push( 'ADBE Vector Rotation' );
                        }
                        if (scaButton.checked) {
                            props.push( 'ADBE Scale' );
                            props.push( 'ADBE Vector Scale' );
                        }
                        if (opaButton.checked) {
                            props.push( 'ADBE Opacity' );
                            props.push( 'ADBE Vector Group Opacity' );
                        }
                        if (masksButton.checked) {
                            props.push( 'ADBE Mask Parade' );
                        }
                        if (fxButton.checked) {
                            props.push( 'ADBE Effect Parade' );
                        }
                    }
                    return props;
                }

                var offsetSelector = DuScriptUI.selector( applyButton.optionsPanel );
                offsetSelector.addButton(
                    DuScriptUI.String.OFFSET_VALUES,
                    w16_offset,
                    DuScriptUI.String.OFFSET_VALUES_TIP
                );
                offsetSelector.addButton(
                    DuScriptUI.String.ABSOLUTE_VALUES,
                    w16_locator,
                    DuScriptUI.String.ABSOLUTE_VALUES_TIP
                );
                offsetSelector.setCurrentIndex(1);

                var reverseButton = DuScriptUI.checkBox(
                    applyButton.optionsPanel,
                    DuScriptUI.String.REVERSE_KEYFRAMES,
                    undefined,
                    DuScriptUI.String.REVERSE_KEYFRAMES_TIP
                );

                applyButton.onClick = function() {
                    if (!animationList.selection) return;

                    // Build matchname list
                    var props = getMatchNames();

                    DuIO.Animation.fromJson(
                        animationList.selection.file,
                        undefined,
                        settingsKeysSelector.index == 1,
                        props,
                        offsetSelector.index == 0,
                        reverseButton.checked
                    );
                };

                applyButton.onCtrlClick = function() {
                    if (!animationList.selection) return;

                    // Build matchname list
                    var props = getMatchNames();

                    DuIO.Animation.fromJson(
                        animationList.selection.file,
                        undefined,
                        settingsKeysSelector.index == 1,
                        props,
                        true,
                        reverseButton.checked
                    );
                }

                applyButton.onAltClick = function() {
                    if (!animationList.selection) return;

                    // Build matchname list
                    var props = getMatchNames();

                    DuIO.Animation.fromJson(
                        animationList.selection.file,
                        undefined,
                        settingsKeysSelector.index == 1,
                        props,
                        offsetSelector.index == 0,
                        true
                    );
                }

                applyButton.onCtrlAltClick = function() {
                    if (!animationList.selection) return;

                    // Build matchname list
                    var props = getMatchNames();

                    DuIO.Animation.fromJson(
                        animationList.selection.file,
                        undefined,
                        settingsKeysSelector.index == 1,
                        props,
                        true,
                        true
                    );
                }
            }
            animationList.onDoubleClick = function() { applyButton.optionsPopup.build(); applyButton.onClick(); };

            var folderButton = DuScriptUI.button(
                topButtons,
                '',
                DuScriptUI.Icon.FOLDER,
                DuScriptUI.String.SELECT_ANIM_LIB_FOLDER_TIP
            );
            folderButton.onClick = function()
            {
                var folder = Folder.selectDialog( DuScriptUI.String.ANIMATION_LIB_FOLDER_PROMPT );
                if ( folder == null ) return;
                libFolder = folder;
                if (!libFolder.exists) libFolder.create();
                DuESF.scriptSettings.data.animationLibFolder = folder.absoluteURI;
                DuESF.scriptSettings.save();

                // Reload categories and animations
                animationLibGroup.refreshLib();
            };
            folderButton.onAltClick = function()
            {
                if (libFolder.exists) libFolder.execute();
                else alert( DuScriptUI.String.ANIMATION_LIB_NO_FOLDER );
            };

            // Bottom (create, edit & remove)
            var bottomButtons = DuScriptUI.group( buttonGroup, 'column');
            bottomButtons.alignment = ['right', 'bottom'];

            var addAnimButton = DuScriptUI.button(
                bottomButtons,
                "",
                w12_add,
                DuScriptUI.String.ANIMATION_LIB_ADD_ANIM_TIP
            );
            addAnimButton.alignment = ['right', 'bottom'];
            addAnimButton.onClick = function()
            {
                animNameEditor.setText('');
                animNameEditor.edit();
            }

            var editAnimButton = DuScriptUI.button(
                bottomButtons,
                "",
                w12_edit,
                DuScriptUI.String.ANIMATION_LIB_RENAME_ANIM_TIP
            );
            editAnimButton.alignment = ['right', 'bottom'];
            editAnimButton.onClick = function()
            {
                if (!animationList.selection)
                {
                    animNameEditor.block = true;
                    return;
                }
                animNameEditor.setText( animationList.selection.text );
                animNameEditor.edit();
            };

            var removeAnimButton = DuScriptUI.button(
                bottomButtons,
                "",
                w12_remove,
                DuScriptUI.String.ANIMATION_LIB_REMOVE_ANIM_TIP
            );
            removeAnimButton.alignment = ['right', 'bottom'];
            removeAnimButton.onClick = function() {
                if (!animationList.selection) return;

                var item = animationList.selection;

                var ok = confirm( DuString.args(DuScriptUI.String.ANIMATION_LIB_CONFIRM_REMOVE_ANIM, [item.text] ) );
                if (!ok) return;

                var animFile = item.file;
                var iconFile = new File( DuPath.switchExtension( animFile, 'png'));

                if (animFile.exists) animFile.remove();
                if (iconFile.exists) iconFile.remove();

                animationList.remove(item);
            };

            // Close button
            var cancelButton = DuScriptUI.button(
                animationLibGroup,
                DuScriptUI.String.CLOSE,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            cancelButton.alignment = ['fill', 'bottom'];
            cancelButton.onClick = function () {
                hideAllGroups();
                animationGroup.visible = true;
            }

            catNameEditor.onAccept = function ( newName )
            {
                if (newName == '') return;

                // Create
                if (catNameEditor.previousString == '')
                {
                    var folder = new Folder( libFolder.absoluteURI + '/' + newName);
                    if (folder.exists) return;
                    folder.create();
                    catSelector.addButton( newName );
                }
                // Rename
                else
                {
                    // Get the current name
                    if (catSelector.index < 2) return;
                    var folder = new Folder( libFolder.absoluteURI + '/' + catSelector.text);
                    if (!folder.exists) return;
                    folder.rename(newName);
                }

                // Refresh list
                animationLibGroup.refreshLib();
                // Reset selection
                catSelector.setCurrentText( newName );
            }

            animNameEditor.onAccept = function ( newName )
            {
                if (newName == '') return;

                // Create
                if (animNameEditor.previousString == '')
                {
                    // Get the containing folder.
                    var folderPath = libFolder.absoluteURI;
                    if (catSelector.index >= 2) folderPath += '/' + catSelector.text;
                    // The file
                    newName = DuPath.fixName(newName, '_');
                    var saveFile = new File( folderPath + '/' + newName + '.duio' );
                    var ok = true;
                    if (saveFile.exists) ok = confirm( DuScriptUI.ANIMATION_LIB_FILE_EXISTS );
                    if (!ok) return;

                    DuIO.Animation.toJson( saveFile );

                    // Save thumbnail
                    var thumbnailFile = new File( folderPath + '/' + newName + '.png' );
                    DuAEComp.thumbnail( thumbnailFile, [32,32] );          

                    // Add to list
                    var item = animationList.add('item', newName);
                    // The image may not be written yet
                    try { item.image = thumbnailFile.absoluteURI; }
                    catch(e) {};
                }
                // Rename
                else
                {
                    // Get the current file
                    if (!animationList.selection) return;
                    // Get the containing folder.
                    var folderPath = libFolder.absoluteURI;
                    if (catSelector.index >= 2) folderPath += '/' + catSelector.text;
                    // rename
                    newName = DuPath.fixName(newName, '_');
                    imageFile = new File( DuPath.switchExtension( animationList.selection.file, 'png' ) );
                    if (imageFile.exists) imageFile.rename( newName + '.png' );
                    animationList.selection.file.rename( newName  + '.duio' );
                    // rename thumbnail too
                    animationLibGroup.refreshLib();
                }

                // Refresh list
                animationLibGroup.refreshLib();
                // Reset selection
                catSelector.setCurrentText( newName );
            }

            animationLibGroup.refreshLib = function()
            {
                if (!animationLibGroup.visible) return;

                // Keep current cat
                var currentCat = catSelector.text;

                // Reset cat list
                catSelector.clear();
                catSelector.addButton( 'All categories' );
                catSelector.addButton( 'Uncategorized' );
                catSelector.setCurrentIndex(0);

                // Load other cats
                if (!libFolder.exists) return;
                var subFiles = libFolder.getFiles();
                for (var i = 0, n = subFiles.length; i < n; i++)
                {
                    if (!(subFiles[i] instanceof Folder)) continue;
                    // Add the folder name
                    catSelector.addButton( DuPath.getName( subFiles[i] ) );
                }

                catSelector.setCurrentText( currentCat );
            }

            catNameEditor.tieTo( editCatButton );
            catNameEditor.tieTo( addCatButton );

            animNameEditor.tieTo( editAnimButton );
            animNameEditor.tieTo( addAnimButton );

            DuScriptUI.addEvent( animationLibGroup.refreshLib, 10000 );

            var settingsPopup = {};
            settingsPopup.built = false;

            DuScriptUI.showUI( animationLibGroup );
        }
        
        hideAllGroups();
        animationLibGroup.visible = true;
        animationLibGroup.refreshLib();
    }

    var animationLibGroup = DuScriptUI.group( mainGroup, 'column' );
    animationLibGroup.visible = false;
    animationLibGroup.built = false;

    var moveAnchorPointGroup = DuScriptUI.group( mainGroup, 'column' );
    moveAnchorPointGroup.visible = false;
    moveAnchorPointGroup.built = false;
}