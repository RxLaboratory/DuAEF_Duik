function buildAnimationPanelUI( tab )
{
    // A Spacer
    var spacer = tab.add('group');
    spacer.margins = 0;
    spacer.spacing = 0;
    spacer.size = [-1,3];
    
    // A title
    DuScriptUI.staticText( tab, DuScriptUI.String.ANIMATION ).alignment = ['center', 'top'];

    // tools
    var toolsGroup = DuScriptUI.group(this);
    toolsGroup.spacing = 3;
    toolsGroup.margins = 3;

    DuScriptUI.setBackgroundColor(toolsGroup , DuColor.Color.DARK_GREY );

    var selectButton = DuScriptUI.button(
        toolsGroup,
        '',
        w12_select,
        DuScriptUI.String.SELECT_KEYFRAMES_TIP,
        true
    );
    selectButton.alignment = ['center','top'];
    selectButton.optionsPopup.build = function()
    {
        var selectMethodSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.TIME,
            w16_time,
            DuScriptUI.String.SELECT_TIME_TIP
        );

        selectMethodSelector.addButton(
            DuScriptUI.String.RANGE,
            w16_range,
            DuScriptUI.String.SELECT_RANGE_TIP
        );

        selectMethodSelector.setCurrentIndex(1);

        selectMethodSelector.onChange = function() {
            outEdit.enabled = selectMethodSelector.index == 1;
        };

        var currentTimeButton = DuScriptUI.checkBox(
            selectButton.optionsPanel,
            DuScriptUI.String.CURRENT_TIME
        );
        currentTimeButton.setChecked( true );

        currentTimeButton.onClick = function() {
            rangeGroup.visible = !currentTimeButton.checked;
        };

        var rangeGroup = DuScriptUI.group( selectButton.optionsPanel, 'row' );
        
        var inEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        inEdit.alignment = ['fill', 'fill'];

        var outEdit = DuScriptUI.editText(
            rangeGroup,
            '',
            DuScriptUI.String.OUT_TIME + ' ',
            '',
            '00:00:00:00',
            '',
            false
        );
        outEdit.alignment = ['fill', 'fill'];

        rangeGroup.visible = false;

        var pickRangeButton = DuScriptUI.button(
            rangeGroup,
            '',
            DuScriptUI.Icon.EYE_DROPPER
        );
        pickRangeButton.alignment = ['right', 'center'];

        pickRangeButton.onClick = function() {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;

            if (selectMethodSelector.index == 0)
            {
                inEdit.setText(timeToCurrentFormat(comp.time+comp.displayStartTime,1/comp.frameDuration));
            }
            else
            {
                inEdit.setText(timeToCurrentFormat(comp.workAreaStart+comp.displayStartTime,1/comp.frameDuration));
                outEdit.setText(timeToCurrentFormat(comp.workAreaStart + comp.workAreaDuration+comp.displayStartTime,1/comp.frameDuration));
            }
        }

        var layerSelectionSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerSelectionSelector.addButton(
            DuScriptUI.String.SELECTED_LAYERS,
            w16_selected_layers
        );
        layerSelectionSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerSelectionSelector.setCurrentIndex(1);

        var layerTypeSelector = DuScriptUI.selector(
            selectButton.optionsPanel
        );

        layerTypeSelector.addButton(
            DuScriptUI.String.CONTROLLERS,
            w16_controller
        );
        layerTypeSelector.addButton(
            DuScriptUI.String.ALL_LAYERS,
            w16_layers
        );

        layerTypeSelector.setCurrentIndex(0);

        var propsGroup = DuScriptUI.group( selectButton.optionsPanel, 'row' );

        var posButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_move,
            DuScriptUI.String.POSITION
        );
        posButton.alignment = ['center','top'];
        posButton.setChecked(true);

        var rotButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_rotate,
            DuScriptUI.String.ROTATION
        );
        rotButton.alignment = ['center','top'];
        rotButton.setChecked(true);

        var scaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_scale,
            DuScriptUI.String.SCALE
        );
        scaButton.alignment = ['center','top'];
        scaButton.setChecked(true);

        var opaButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_opacity,
            DuScriptUI.String.OPACITY
        );
        opaButton.alignment = ['center','top'];
        opaButton.setChecked(true);

        var masksButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_mask,
            DuScriptUI.String.MASKS
        );
        masksButton.alignment = ['center','top'];
        masksButton.setChecked(true);

        var fxButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_fx,
            DuScriptUI.String.EFFECTS
        );
        fxButton.alignment = ['center','top'];
        fxButton.setChecked(true);

        var allPropsButton = DuScriptUI.checkBox(
            propsGroup,
            '',
            w16_props,
            DuScriptUI.String.ALL_PROPERTIES
        );
        allPropsButton.alignment = ['center','top'];

        allPropsButton.onClick = function() {
            var checked = allPropsButton.checked;
            posButton.setChecked(checked);
            rotButton.setChecked(checked);
            scaButton.setChecked(checked);
            opaButton.setChecked(checked);
            masksButton.setChecked(checked);
            fxButton.setChecked(checked);
        };

        selectButton.onClick = function ()
        {
            var comp = DuAEProject.getActiveComp();
            if (!comp) return;
            // Get range
            var inTime = comp.time;
		    var outTime = comp.time;
            if (currentTimeButton.checked)
            {
                if (selectMethodSelector.index == 1)
                {
                    inTime = comp.workAreaStart;
                    outTime = comp.workAreaStart + comp.workAreaDuration;
                }
            }
            else
            {
                inTime = currentFormatToTime(inEdit.text,1/comp.frameDuration)-comp.displayStartTime;
                if (selectMethodSelector.index == 1) outTime = currentFormatToTime(outEdit.text,1/comp.frameDuration)-comp.displayStartTime;
                else outTime = inTime;
            }

            // Get property types
            var props = [];
            if (!allPropsButton.checked)
            {
                if (posButton.checked) {
                    props.push( 'ADBE Position' );
                    props.push( 'ADBE Vector Position' );
                    props.push( 'ADBE Position_0' );
                    props.push( 'ADBE Position_1' );
                    props.push( 'ADBE Position_2' );
                }
                if (rotButton.checked) {
                    props.push( 'ADBE Rotate Z' );
                    props.push( 'ADBE Rotate Y' );
                    props.push( 'ADBE Rotate X' );
                    props.push( 'ADBE Orientation' );
                    props.push( 'ADBE Vector Rotation' );
                }
                if (scaButton.checked) {
                    props.push( 'ADBE Scale' );
                    props.push( 'ADBE Vector Scale' );
                }
                if (opaButton.checked) {
                    props.push( 'ADBE Opacity' );
                    props.push( 'ADBE Vector Group Opacity' );
                }
                if (masksButton.checked) {
                    props.push( 'ADBE Mask Parade' );
                }
                if (fxButton.checked) {
                    props.push( 'ADBE Effect Parade' );
                }
            }

            Duik.Animation.selectKeyframes(
                comp,
                layerSelectionSelector.index == 0,
                layerTypeSelector.index == 0,
                [inTime, outTime],
                props );
        };
    };

    var copyButton = DuScriptUI.button(
        toolsGroup,
        '',
        w12_copy,
        DuScriptUI.String.COPY_KEYFRAMES_TIP
    );
    copyButton.onClick = Duik.Animation.copy;

    var pasteButton = DuScriptUI.button(
        toolsGroup,
        '',
        w12_paste,
        DuScriptUI.String.PASTE_KEYFRAMES_TIP,
        true
    );
    pasteButton.optionsPopup.build = function() {

        var offsetSelector = DuScriptUI.selector( pasteButton.optionsPanel );
        offsetSelector.addButton(
            DuScriptUI.String.OFFSET_VALUES,
            w16_offset,
            DuScriptUI.String.OFFSET_VALUES_TIP
        );
        offsetSelector.addButton(
            DuScriptUI.String.ABSOLUTE_VALUES,
            w16_locator,
            DuScriptUI.String.ABSOLUTE_VALUES_TIP
        );
        offsetSelector.setCurrentIndex(1);

        var reverseButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REVERSE_KEYFRAMES,
            undefined,
            DuScriptUI.String.REVERSE_KEYFRAMES_TIP
        );

        var replaceButton = DuScriptUI.checkBox(
            pasteButton.optionsPanel,
            DuScriptUI.String.REPLACE_KEYFRAMES,
            undefined,
            DuScriptUI.StringREPLACE_KEYFRAMES_TIP
        );

        pasteButton.onClick = function () {
            Duik.Animation.paste(
                undefined,
                replaceButton.checked,
                offsetSelector.index == 0,
                reverseButton.checked
            );
        };
        pasteButton.onCtrlClick = function () { Duik.Animation.paste( undefined, false, true ); };
        pasteButton.onAltClick = function () { Duik.Animation.paste( undefined, false, false, true ); };
        pasteButton.onCtrlAltClick = function () { Duik.Animation.paste( undefined, false, true, true ); };
    };

    var zeroButton = DuScriptUI.button(
        toolsGroup,
        '',
        w12_zero,
        DuScriptUI.String.CONSTRAINT_ZERO_TIP
    );
    zeroButton.alignment = ['center','top'];
    zeroButton.onClick = Duik.Constraint.zero;
    zeroButton.onAltClick = Duik.Constraint.resetPRS;
    zeroButton.onCtrlAltClick = function () { Duik.Constraint.resetPRS(undefined, true); };

    createAlignButton( toolsGroup );

    var mainGroup = DuScriptUI.group(this, 'stacked');
    mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var animationLibButton = DuScriptUI.button(
        mainGroup,
        DuScriptUI.String.ANIMATION_LIB + '...',
        w16_library,
        DuScriptUI.String.ANIMATION_LIB_TIP
    );

}