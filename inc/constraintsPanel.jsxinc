function buildConstraintsUI( )
{
    // tools
    var toolsGroup = DuScriptUI.toolBar( this );

    var toolsCol1 = DuScriptUI.group(toolsGroup, 'column');
    var toolsCol2 = DuScriptUI.group(toolsGroup, 'column');
    var toolsCol3 = DuScriptUI.group(toolsGroup, 'column');

    var listButton = DuScriptUI.button(
        toolsCol1,
        uiMode == 0 ? DuScriptUI.String.CONSTRAINT_LIST : '',
        w12_list,
        DuScriptUI.String.CONSTRAINT_LIST_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    listButton.onClick = Duik.Constraint.list;

    var separateButton = DuScriptUI.button(
        toolsCol2,
        uiMode == 0 ? DuScriptUI.String.SEPARATE_DIMENSIONS : '',
        w12_separate_dimensions,
        DuScriptUI.String.CONSTRAINT_SEPARATE_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    separateButton.onClick = Duik.Constraint.separateDimensions;

    var unlinkButton = DuScriptUI.button(
        toolsCol3,
        uiMode == 0 ? DuScriptUI.String.EDIT_MODE : '',
        w12_unlink,
        DuScriptUI.String.TOGGLE_EDIT_MODE,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    unlinkButton.onClick = Duik.Layer.unlink;

    var lockButton = DuScriptUI.button(
        toolsCol1,
        uiMode == 0 ? DuScriptUI.String.LOCK_PROP : '',
        w12_lock,
        DuScriptUI.String.CONSTRAINT_LOCK_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    lockButton.onClick = Duik.Constraint.lock;

    var zeroButton = DuScriptUI.button(
        toolsCol2,
        uiMode == 0 ? DuScriptUI.String.ADD_ZERO : '',
        w12_zero,
        DuScriptUI.String.CONSTRAINT_ZERO_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    zeroButton.onClick = Duik.Constraint.zero;
    zeroButton.onAltClick = Duik.Constraint.resetPRS;
    zeroButton.onCtrlAltClick = function () { Duik.Constraint.resetPRS(undefined, true); };

    createAlignButton( toolsCol3 );

    var etmButton = DuScriptUI.button(
        toolsCol1,
        uiMode == 0 ? DuScriptUI.String.EXPOSE_TRANSFORM : '',
        w12_expose_transform,
        DuScriptUI.String.CONSTRAINT_ETM_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    etmButton.onClick = Duik.Constraint.exposeTransform;

    var measureButton = DuScriptUI.button(
        toolsCol2,
        uiMode == 0 ? DuScriptUI.String.MEASURE_DISTANCE : '',
        w12_measure,
        DuScriptUI.String.MEASURE_DISTANCE_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    measureButton.onClick = function () {
        // Build panel
        if (!measureGroup.built)
        {
            measureGroup.built = true;
            measureText = DuScriptUI.staticText( measureGroup, '', undefined, false);

            var measureCancelButton = DuScriptUI.button(
                measureGroup,
                DuScriptUI.String.BACK_PREVIOUS,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            measureCancelButton.onClick = function () {
                measureGroup.visible = false;
                constraintsGroup.visible = true;
            }

            DuScriptUI.showUI( measureGroup );
        }
            
        var dist = DuAELayer.getDistance();
        dist = Math.round( dist );
        if (dist < 0) measureText.setText( DuScriptUI.String.MEASURE_HELP );
        else measureText.setText( DuScriptUI.String.MEASURE_RESULT.replace("{#}", dist) );

        parentAcrossCompGroup.visible = false;
        pathConstraintGroup.visible = false;
        constraintsGroup.visible = false;
        propInfoGroup.visible = false;
        measureGroup.visible = true;
    }

    var propInfoButton = DuScriptUI.button(
        toolsCol3,
        uiMode == 0 ? DuScriptUI.String.PROP_INFO : '',
        DuScriptUI.Icon.HELP,
        DuScriptUI.String.PROP_INFO_TIP,
        false,
        uiMode == 0 ? 'column' : undefined
    );
    propInfoButton.onClick = function() {
        function update() {
            var props = DuAEComp.getSelectedProps();
            if (props.length == 0) return;
            var prop = props[props.length-1];
            propInfoGroup.prop = prop;
            propInfoGroup.propInfoIndex.text = prop.index;
            propInfoGroup.name.text = prop.name;
            propInfoGroup.matchName.text = prop.matchName;
            propInfoGroup.dimensions.text = prop.dimensions();
            propInfoGroup.link.text = prop.expressionLink(prop, true, true);
            var preExpression = propInfoGroup.preExp.value;
		    var fastMode = !propInfoGroup.precision.value;

            //Min and max val per axis
            var minVal = "";
            var maxVal = "";
            if (prop.dimensions() == 1)
            {
                var range = prop.range(0, preExpression, fastMode);
                minVal = Math.round(range[0]*100)/100;
                maxVal = Math.round(range[1]*100)/100;
            }
            else
            {
                for (var i = 0; i < prop.dimensions() ; i++)
                {
                    var range = prop.range(i, preExpression);
                    if (i == 0)
                    {
                        minVal += "[ ";
                        maxVal += "[ ";
                    }

                    minVal += Math.round(range[0]*100)/100;
                    maxVal += Math.round(range[1]*100)/100;

                    if (i == prop.dimensions() - 1)
                    {
                        minVal += " ]";
                        maxVal += " ]";
                    }
                    else
                    {
                        minVal += " , ";
                        maxVal += " , ";
                    }
                }
            }
            propInfoGroup.minVal.text = minVal;
            propInfoGroup.maxVal.text = maxVal;
            var maxSpeed = Math.round( prop.maxVelocity( preExpression, fastMode )*100)/100;
            propInfoGroup.velocity.text = maxSpeed;
            if (maxSpeed == 0) propInfoGroup.averageVelocity.text = 0;
            else propInfoGroup.averageVelocity.text = Math.round( prop.averageSpeed(preExpression, fastMode)*100)/100;
        }

        // Build panel
        if (!propInfoGroup.built)
        {
            var propInfoForm = DuScriptUI.form( propInfoGroup );
            propInfoGroup.propInfoIndex = propInfoForm.addField("Index","statictext","0","The index of the property")[1];
            propInfoGroup.name = propInfoForm.addField("Name","edittext","","The name of the property")[1];
            propInfoGroup.matchName = propInfoForm.addField("Match Name","edittext","","The matchName of the property")[1];
            propInfoGroup.dimensions = propInfoForm.addField("Num Dimensions","statictext","0","The number of dimensions of the property")[1];
            propInfoGroup.link = propInfoForm.addField("Expression link","edittext","","The expression link to the property (from the layer)")[1];
            propInfoGroup.minVal = propInfoForm.addField("Minimum value","edittext","","The minimum value during the animation.")[1];
            propInfoGroup.maxVal = propInfoForm.addField("Maximum value","edittext","","The maximum value during the animation.")[1];
            propInfoGroup.velocity = propInfoForm.addField("Maximum velocity","edittext","","The maximum velocity during the animation.")[1];
            propInfoGroup.averageVelocity = propInfoForm.addField("Average velocity","edittext","","The average velocity during the animation.")[1];
            propInfoGroup.preExp = propInfoForm.addField("Pre-expression val.","checkbox","","Display pre-expression values.")[1];
            propInfoGroup.precision = propInfoForm.addField("Hi-precision","checkbox","","Samples the values and velocity with a higher precision.\nWarning: this can be quite slong if the composition is very long.")[1];

            var validButtonsGroup = DuScriptUI.group( propInfoGroup );

            var propInfoCancelButton = DuScriptUI.button(
                validButtonsGroup,
                DuScriptUI.String.BACK_PREVIOUS,
                DuScriptUI.Icon.BACK,
                DuScriptUI.String.CLOSE,
                false,
                'row',
                'center'
            );
            propInfoCancelButton.onClick = function () {
                propInfoGroup.visible = false;
                constraintsGroup.visible = true;
            }
            
            var validButton = DuScriptUI.button(
                validButtonsGroup,
                DuScriptUI.String.PROPERTY_INFO,
                DuScriptUI.Icon.CHECK,
                DuScriptUI.String.PROP_INFO_TIP,
                false,
                'row',
                'center'
            )
            validButton.onClick = update;

            propInfoGroup.built = true;

            DuScriptUI.showUI( propInfoGroup );
        }

		//values
        update( );

        parentAcrossCompGroup.visible = false;
        pathConstraintGroup.visible = false;
        constraintsGroup.visible = false;
        propInfoGroup.visible = true;
        measureGroup.visible = false;
    }

    var mainGroup = DuScriptUI.group(this, 'stacked');
    mainGroup.margins = 3;
    mainGroup.alignment = ['fill', 'fill'];

    var constraintsGroup = DuScriptUI.group(mainGroup, 'column');
    if (uiMode >= 2) constraintsGroup.spacing = 3;

    var line1 = DuScriptUI.group( constraintsGroup , uiMode >= 2 ? 'row' : 'column');

    var autorigButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.AUTORIG,
        w16_autorig,
        DuScriptUI.String.AUTORIG_TIP,
        true
    );
    autorigButton.onClick = Duik.Rig.auto;

    /*var connectorButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.DUIK_CONNECTOR,
        w16_connector,
        DuScriptUI.String.CONNECTOR_TIP,
        true
    );*/

    var keyMorphButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.DUIK_KEY_MORPH,
        w16_shape_keys,
        DuScriptUI.String.KEY_MORPH_TIP
    );
    keyMorphButton.onClick = Duik.Constraint.morphKeys;

    var pinsButton = DuScriptUI.button(
        line1,
        DuScriptUI.String.DUIK_PINS,
        w16_pin,
        DuScriptUI.String.PINS_TIP,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        true // no button on the options popup
    );
    pinsButton.optionsPopup.build = function ()
    {
        // Utils
        function updateEditPanel()
        {
            setSideSelector( sideEditSelector, Duik.Layer.side() );

            setLocationSelector( locationEditSelector, Duik.Layer.location());

            colorEditSelector.setColor( Duik.Pin.color( ) );

            sizeEdit.setText( Duik.Pin.size() );

            characterEdit.setText( Duik.Layer.characterName() );

            limbEdit.setText( Duik.Layer.limbName() );
        }

        function setSide()
        {
            var side = getSide(sideEditSelector);
            Duik.Pin.setSide(side);
        }

        function setLocation()
        {
            var location = getLocation(locationEditSelector);
            Duik.Pin.setLocation(location);
        }

        function setColor()
        {
            var color = colorEditSelector.color;
            Duik.Pin.setColor(color);
        }

        function setSize()
        {
            var size = parseInt( sizeEdit.text );
            if (isNaN(size)) return;
            Duik.Pin.setSize(size);
        }

        function setCharacterName()
        {
            Duik.Pin.setCharacterName( characterEdit.text );
        }

        function setLimbName()
        {
            Duik.Pin.setLimbName( limbEdit.text );
        }

        var pickButton = DuScriptUI.button(
            pinsButton.optionsPanel,
            DuScriptUI.String.PICK_LAYER,
            DuScriptUI.Icon.EYE_DROPPER
        );
        pickButton.onClick = updateEditPanel;

        var sideEditGroup = DuScriptUI.group(pinsButton.optionsPanel, 'row');
        var sideEditSelector = createSideSelector( sideEditGroup );
        var sideEditApplyButton = DuScriptUI.button(
            sideEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_SIDE_TIP
        );
        sideEditApplyButton.alignment = ['right', 'center'];
        sideEditApplyButton.onClick = setSide;

        var locationEditGroup = DuScriptUI.group(pinsButton.optionsPanel, 'row');
        var locationEditSelector = createLocationSelector( locationEditGroup );
        var locationEditApplyButton = DuScriptUI.button(
            locationEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_LOCATION_TIP
        );
        locationEditApplyButton.alignment = ['right', 'center'];
        locationEditApplyButton.onClick = setLocation;

        var colorEditGroup = DuScriptUI.group(pinsButton.optionsPanel, 'row');
        var colorEditSelector = DuScriptUI.colorSelector( colorEditGroup, DuScriptUI.String.LAYER_COLOR_TIP );
        var colorEditApplyButton = DuScriptUI.button(
            colorEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_COLOR_TIP
        );
        colorEditApplyButton.alignment = ['right', 'center'];
        colorEditApplyButton.onClick = setColor;

        var sizeEditGroup = DuScriptUI.group( pinsButton.optionsPanel, 'row' );
        var sizeEditLabel = DuScriptUI.staticText( sizeEditGroup, tr(DuScriptUI.String.SIZE) + ':',  undefined, false);
        sizeEditLabel.alignment = ['left', 'center'];
        var sizeEdit = DuScriptUI.editText(
            sizeEditGroup,
            "100",
            '',
            " %",
            "100",
            tr(DuScriptUI.String.LAYER_SIZE_TIP),
            false
        );
        sizeEdit.alignment = ['fill', 'fill'];
        var sizeEditApplyButton = DuScriptUI.button(
            sizeEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_SIZE_TIP
        );
        sizeEditApplyButton.alignment = ['right', 'center'];
        sizeEditApplyButton.onClick = setSize;
    
        var characterEditGroup = DuScriptUI.group( pinsButton.optionsPanel, 'row' );
        var characterEditLabel = DuScriptUI.staticText( characterEditGroup, tr(DuScriptUI.String.CHARACTER) + ':',  undefined, false);
        characterEditLabel.alignment = ['left', 'center'];
        var characterEdit = DuScriptUI.editText(
            characterEditGroup,
            '',
            '',
            '',
            DuScriptUI.String.CHARACTER_NAME,
            DuScriptUI.String.LAYER_CHARACTER_TIP,
            false
        )
        characterEdit.alignment = ['fill', 'fill'];
        var characterEditApplyButton = DuScriptUI.button(
            characterEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_CHARACTER_TIP
        );
        characterEditApplyButton.alignment = ['right', 'center'];
        characterEditApplyButton.onClick = setCharacterName;

        var limbEditGroup = DuScriptUI.group( pinsButton.optionsPanel, 'row' );
        var limbEditLabel = DuScriptUI.staticText( limbEditGroup, tr(DuScriptUI.String.LIMB) + ':',  undefined, false);
        limbEditLabel.alignment = ['left', 'center'];
        var limbEdit = DuScriptUI.editText(
            limbEditGroup,
            '',
            '',
            '',
            DuScriptUI.String.LIMB_NAME,
            tr(DuScriptUI.String.LAYER_LIMB_TIP),
            false
        )
        limbEdit.alignment = ['fill', 'fill'];
        var limbEditApplyButton = DuScriptUI.button(
            limbEditGroup,
            "",
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.LAYER_LIMB_TIP
        );
        limbEditApplyButton.alignment = ['right', 'center'];
        limbEditApplyButton.onClick = setLimbName;

        DuScriptUI.separator( pinsButton.optionsPanel );

        // Valid button

        var applyEditButton = DuScriptUI.button(
            pinsButton.optionsPanel,
            DuScriptUI.String.APPLY,
            DuScriptUI.Icon.CHECK,
            DuScriptUI.String.APPLY
        )
        applyEditButton.onClick = function ()
        {
            setSide();
            setLocation();
            setColor();
            setSize();
            setCharacterName();
            setLimbName();
            pinsButton.optionsPopup.hide();
        }

    }
    pinsButton.onClick = Duik.Constraint.pin;
    pinsButton.onAltClick = function( ) { Duik.Constraint.pin( false ) };

    var line2 = DuScriptUI.group( constraintsGroup , uiMode >= 2 ? 'row' : 'column');

    var ikGroup = DuScriptUI.multiButton(
        line2,
        DuScriptUI.String.KINEMATICS,
        w16_ik_fk,
        DuScriptUI.String.CONSTRAINT_IK_FK_TIP
    );
    ikGroup.build = function () {
        var ikButton = this.addButton(
            DuScriptUI.String.IK,
            w16_ik,
            DuScriptUI.String.IK_TIP,
            true
        );
        var ikSelector;
        ikButton.optionsPopup.build = function ()
        {
            ikSelector = DuScriptUI.selector( ikButton.optionsPanel );
            ikSelector.addButton(
                DuScriptUI.String.THREE_IK,
                w16_three_ik,
                DuScriptUI.String.THREE_IK_TIP
            );
            ikSelector.addButton(
                DuScriptUI.String.ONE_TWO_IK,
                w16_one_two_ik,
                DuScriptUI.String.ONE_TWO_TIP
            );
            ikSelector.addButton(
                DuScriptUI.String.TWO_ONE_IK,
                w16_two_one_ik,
                DuScriptUI.String.TWO_ONE_TIP
            );
            ikSelector.setCurrentIndex( 1 );
        }

        var bezierIKButton = this.addButton(
            DuScriptUI.String.BEZIER_IK,
            w16_bezier_ik,
            DuScriptUI.String.BEZIER_IK_TIP
        );

        var fkButton = this.addButton(
            DuScriptUI.String.FK,
            w16_fk,
            DuScriptUI.String.FK_TIP
        );

        ikButton.onClick = function ()
        {
            Duik.Constraint.ik( ikSelector.index );
        }

        bezierIKButton.onClick = function ()
        {
            Duik.Constraint.ik(undefined, true);
        }

        fkButton.onClick = Duik.Constraint.fk;
    }

    var parentGroup = DuScriptUI.multiButton(
        line2,
        DuScriptUI.String.PARENT,
        w16_parent,
        DuScriptUI.String.CONSTRAINT_PARENT_TIP
    );
    parentGroup.build = function () {
        var autoParentButton = this.addButton(
            DuScriptUI.String.AUTO_PARENT,
            w16_auto_parent,
            DuScriptUI.String.AUTO_PARENT_TIP
        );
        autoParentButton.onClick = Duik.Constraint.autoParent;
        autoParentButton.onAltClick = function () { Duik.Constraint.autoParent(true) };

        var parentConstraintButton = this.addButton(
            DuScriptUI.String.PARENT_CONSTRAINT,
            w16_parent,
            DuScriptUI.String.PARENT_CONSTRAINT_TIP
        );
        parentConstraintButton.onClick = Duik.Constraint.parent;

        var parentAcrossCompButton = this.addButton(
            DuScriptUI.String.PARENT_ACROSS_COMP,
            w16_parent_across_comp,
            DuScriptUI.String.PARENT_ACROSS_COMP_TIP
        );
        parentAcrossCompButton.onClick = function()
        {
            // build panel
            if (!parentAcrossCompGroup.built)
            {
                parentAcrossCompGroup.built = true;

                var locatorsGroup = DuScriptUI.group(parentAcrossCompGroup, 'row');
                DuScriptUI.setBackgroundColor( locatorsGroup, DuColor.Color.DARK_GREY );

                var locatorButton = DuScriptUI.button(
                    locatorsGroup,
                    '',
                    w12_locator,
                    DuScriptUI.String.LOCATOR_TIP
                );
                locatorButton.alignment = ['center', 'top'];
                locatorButton.onClick = Duik.Constraint.locator;

                var extractLocatorButton = DuScriptUI.button(
                    locatorsGroup,
                    '',
                    w12_extract_locator,
                    DuScriptUI.String.EXTRACT_LOCATOR_TIP,
                    true
                );
                extractLocatorButton.alignment = ['center', 'top'];
                extractLocatorButton.onClick = function() 
                {
                    var useEssentialProperties = locatorModeSelector.index == 1;
                    Duik.Constraint.extractLocators(useEssentialProperties);
                }

                var locatorModeSelector;
                extractLocatorButton.optionsPopup.build = function ()
                {
                    locatorModeSelector = DuScriptUI.selector( extractLocatorButton.optionsPanel );
                    locatorModeSelector.addButton(
                        DuScriptUI.String.USE_EXPRESSIONS,
                        w16_expression
                    );
                    locatorModeSelector.addButton(
                        DuScriptUI.String.USE_ESSENTIAL_PROPERTIES,
                        w16_essential_property
                    );
                    locatorModeSelector.setCurrentIndex( 1 );
                }

                DuScriptUI.staticText(
                    parentAcrossCompGroup,
                    DuScriptUI.String.PARENT_COMP + ':',
                    undefined,
                    false
                );

                var parentCompSelector = DuScriptUI.compSelector(
                    parentAcrossCompGroup
                );
                parentCompSelector.filterComps = DuAEComp.getRelatives;
                parentCompSelector.onChange = function () 
                {
                    var comp = parentCompSelector.getComp();
                    if ( !comp ) return;
                    parentCompLayerSelector.comp = comp;
                    parentCompLayerSelector.refresh();
                }

                DuScriptUI.staticText(
                    parentAcrossCompGroup,
                    DuScriptUI.String.PARENT_LAYER + ':',
                    undefined,
                    false
                );

                var parentCompLayerSelector = DuScriptUI.layerSelector(
                    parentAcrossCompGroup
                );
                parentCompLayerSelector.onChange = function() 
                {
                    if ( parentCompLayerSelector.index > 0 ) parentCompValidButton.enabled = true;
                    else parentCompValidButton.enabled = false;
                }

                DuScriptUI.separator( parentAcrossCompGroup );

                var parentCompValidGroup = DuScriptUI.group(
                    parentAcrossCompGroup,
                    'row'
                );

                var parentCompCancelButton = DuScriptUI.button(
                    parentCompValidGroup,
                    DuScriptUI.String.BACK_PREVIOUS,
                    DuScriptUI.Icon.BACK,
                    DuScriptUI.String.CLOSE_SETTINGS,
                    false,
                    'row',
                    'center'
                );
                parentCompCancelButton.onClick = function () {
                    parentAcrossCompGroup.visible = false;
                    constraintsGroup.visible = true;
                }

                var parentCompValidButton = DuScriptUI.button(
                    parentCompValidGroup,
                    DuScriptUI.String.PARENT_ACROSS_COMP,
                    DuScriptUI.Icon.CHECK,
                    DuScriptUI.String.PARENT_ACROSS_COMP_TIP,
                    false,
                    'row',
                    'center'
                );
                parentCompValidButton.enabled = false;
                parentCompValidButton.onClick = function ()
                {
                    //get comp and layer
                    var comp = parentCompSelector.getComp();
                    var layer = comp.layer( parentCompLayerSelector.index );

                    // We need the options of the extract locator button
                    extractLocatorButton.optionsPopup.build();

                    var useEssentialProperties = locatorModeSelector.index == 1;

                    Duik.Constraint.parentAcrossComp( layer, useEssentialProperties );

                    parentAcrossCompGroup.visible = false;
                    constraintsGroup.visible = true;
                }

                DuScriptUI.showUI( parentAcrossCompGroup );
            }

            constraintsGroup.visible = false;
            parentAcrossCompGroup.visible = true;
        }
    }   

    var transformGroup = DuScriptUI.multiButton(
        line2,
        DuScriptUI.String.TRANSFORM,
        w16_constraint,
        DuScriptUI.String.CONSTRAINT_TRANSFORM_TIP
    );
    transformGroup.build = function () {
        var positionConstraintButton = this.addButton(
            DuScriptUI.String.POSITION_CONSTRAINT,
            w16_move,
            DuScriptUI.String.POSITION_CONSTRAINT_TIP
        );
        positionConstraintButton.onClick = Duik.Constraint.position;

        var orientationConstraintButton = this.addButton(
            DuScriptUI.String.ORIENTATION_CONSTRAINT,
            w16_rotate,
            DuScriptUI.String.ORIENTATION_CONSTRAINT_TIP
        );
        orientationConstraintButton.onClick = Duik.Constraint.orientation;

        var pathConstraintButton = this.addButton(
            DuScriptUI.String.PATH_CONSTRAINT + '...',
            w16_bezier,
            DuScriptUI.String.PATH_CONSTRAINT_TIP,
            false,
            undefined,
            undefined,
            false
        );
        pathConstraintButton.onClick = function ()
        {
            var pathProp = null;
            // Get path prop
            function pickPath() {
                pathProp = null;
                pathConstraintValidButton.enabled = false;
                pathConstraintLabel.text = DuScriptUI.String.PICK_PATH;
                var props = DuAEComp.getSelectedProps( PropertyValueType.SHAPE );
                if ( props.length == 0 ) return false;

                pathProp = props.pop();
                var parentProp = pathProp.getProperty().parentProperty;
                pathConstraintLabel.text = pathProp.layer.index + " - " + pathProp.layer.name + " # " + parentProp.name;
                pathConstraintValidButton.enabled = true;
            }

            // build panel
            if (!pathConstraintGroup.built)
            {
                pathConstraintGroup.built = true;

                var pathGroup = DuScriptUI.group(pathConstraintGroup, 'row');

                pathConstraintLabel = DuScriptUI.staticText(pathGroup, DuScriptUI.String.PICK_PATH );
                pathConstraintLabel.alignment = ['fill', 'center'];

                var pickPathButton = DuScriptUI.button(
                    pathGroup,
                    '',
                    DuScriptUI.Icon.EYE_DROPPER_BIG,
                    DuScriptUI.String.PICK_PATH
                );
                pickPathButton.alignment = ['right', 'center'];
                pickPathButton.onClick = pickPath;

                var pathConstraintValidGroup = DuScriptUI.group(pathConstraintGroup, 'row');

                var pathConstraintCancelButton = DuScriptUI.button(
                    pathConstraintValidGroup,
                    DuScriptUI.String.BACK_PREVIOUS,
                    DuScriptUI.Icon.BACK,
                    DuScriptUI.String.CANCEL,
                    false,
                    'row',
                    'center'
                );
                pathConstraintCancelButton.onClick = function () {
                    pathConstraintGroup.visible = false;
                    constraintsGroup.visible = true;
                }

                pathConstraintValidButton = DuScriptUI.button(
                    pathConstraintValidGroup,
                    DuScriptUI.String.PATH_CONSTRAINT,
                    DuScriptUI.Icon.CHECK,
                    DuScriptUI.String.PATH_CONSTRAINT_TIP,
                    false,
                    'row',
                    'center'
                );
                pathConstraintValidButton.enabled = false;
                pathConstraintValidButton.onClick = function ()
                {
                    Duik.Constraint.path( pathProp );
                    pathConstraintGroup.visible = false;
                    constraintsGroup.visible = true;
                }

                DuScriptUI.showUI( pathConstraintGroup );
            }

            // we can create
            if (Duik.Constraint.path()) return;

            // ask for the path
            constraintsGroup.visible = false;
            pathConstraintGroup.visible = true;
            pickPath();
        }
    }

    var parentAcrossCompGroup = DuScriptUI.group( mainGroup, 'column');
    parentAcrossCompGroup.visible = false;
    parentAcrossCompGroup.built = false;

    var pathConstraintValidButton;
    var pathConstraintLabel;
    var pathConstraintGroup = DuScriptUI.group( mainGroup, 'column');
    pathConstraintGroup.visible = false;
    pathConstraintGroup.built = false;

    var measureText;
    var measureGroup = DuScriptUI.group( mainGroup, 'column' );
    measureGroup.visible = false;
    measureGroup.built = false;

    var propInfoGroup = DuScriptUI.group( mainGroup, 'column' );
    propInfoGroup.visible = false;
    propInfoGroup.built = false;
}