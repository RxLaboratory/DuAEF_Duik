/**
 * (Auto)Rigging tools.
 * @namespace
 */
Duik.Rig = {};

/**
 * The list of (auto)rigging functions
 */
Duik.CmdLib['Auto-rig'] = [];


Duik.CmdLib['Auto-rig']['Rig'] = 'Duik.Rig.auto()';
/**
 * The auto-rig for everything
 * @param {Boolean} [bakeBones=true] Wether to bake the appearance of rigged bones to improve performance or not.
 * @param {Boolean} [tailIK=false] Set to true if you prefer using Bézier IK than FK with overlap for tails and other chains consisting of more than 3 layers.
 * @param {Duik.Constraint.IKType} [longChainMode=Duik.Constraint.IKType.ONE_TWO] The type of IK to use with custom 3-layer chains.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @return {Layer[]} The controllers which are used in the rig
 */
Duik.Rig.auto = function ( bakeBones, tailIK, longChainMode, layers )
{
    bakeBones = def( bakeBones, true );
    longChainMode = def( longChainMode, Duik.Constraint.IKType.ONE_TWO );
    tailIK = def( tailIK , false );

    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return;

    //check if there are 3D Layers
    for (var i = 0, n = layers.length; i < n; i++)
    {
        if (layers[i].threeDLayer)
        {
            alert( DuScriptUI.String.NO_3D + '\n' + DuScriptUI.String.CANNOT_RIG);
            return;
        }
    }

    DuAE.beginUndoGroup( DuScriptUI.String.AUTORIG, false );
    DuAEProject.setProgressMode( true );

    // Start by baking (improves perf and keeps envelops)
    if (bakeBones) Duik.Bone.bake(layers);

    // Progress
    DuScriptUI.progressBar.reset(1);
    DuScriptUI.progressBar.stg(DuScriptUI.String.AUTORIG);
    DuScriptUI.progressBar.msg('Sorting selected bones.');

    // What we expect
	var arms = [];
	var legs = [];
	var spines = [];
	var tails = [];
    var wings = [];
    var snakeSpines = [];
    var fishSpines = [];
    var fins = [];
    var hairs = [];
	var customArmatures = [];
	var customControllers = [];
    // A function to add layers to list of limbs
    function addToLimb( layer, limbGroup, armatureId )
    {
        // look for existing limb
        var limb = null;
        for (var i = 0, n = limbGroup.length; i < n; i++)
        {
            if( limbGroup[i].id == armatureId )
            {
                limb = limbGroup[i];
                break;
            }
        }
        // create 
        if (limb == null)
        {
            limb = [];
            limb.id = armatureId;
            limbGroup.push(limb);
        }

        limb.push( layer );
    }

    // Sort layers
    layers.do(function( layer )
    {
        var tag = DuAETag.get( layer );

        // It's a bone
        if ( Duik.Layer.isType( layer, Duik.Layer.Type.BONE ) )
        {
            // Limbs
            var limb = DuAETag.getValue( layer, DuAETag.Key.DUIK_LIMB, DuAETag.Type.STRING, tag );
            var armatureId = DuAETag.getValue( layer, DuAETag.Key.DUIK_LIMB_ID, DuAETag.Type.INT, tag );

            if ( limb == DuOCO.Limb.SPINE ) addToLimb( layer, spines, armatureId );
            else if ( limb == DuOCO.Limb.TAIL ) addToLimb( layer, tails, armatureId );
            else if ( limb == DuOCO.Limb.ARM ) addToLimb( layer, arms, armatureId );
            else if ( limb == DuOCO.Limb.LEG ) addToLimb( layer, legs, armatureId );
            else if ( limb == DuOCO.Limb.WING ) addToLimb( layer, wings, armatureId );
            else if ( limb == DuOCO.Limb.HAIR ) addToLimb( layer, hairs, armatureId );
            else if ( limb == DuOCO.Limb.SNAKE_SPINE ) addToLimb( layer, snakeSpines, armatureId );
            else if ( limb == DuOCO.Limb.FISH_SPINE ) addToLimb( layer, fishSpines, armatureId );
            else if ( limb == DuOCO.Limb.FIN ) addToLimb( layer, fins, armatureId );
            else if ( limb == DuOCO.Limb.CUSTOM ) addToLimb( layer, customArmatures, armatureId );
        }
        // It's a controller
        else if ( Duik.Layer.isType( layer, Duik.Layer.Type.CONTROLLER ) )
        {
            customControllers.push(layer);
        } 
    });

    // Let's rig!

    DuScriptUI.progressBar.addMax( arms.length );
    DuScriptUI.progressBar.addMax( legs.length );
    DuScriptUI.progressBar.addMax( spines.length );
    DuScriptUI.progressBar.addMax( tails.length );
    DuScriptUI.progressBar.addMax( wings.length );
    DuScriptUI.progressBar.addMax( fins.length );
    DuScriptUI.progressBar.addMax( hairs.length );
    DuScriptUI.progressBar.addMax( snakeSpines.length );
    DuScriptUI.progressBar.addMax( fishSpines.length );
    DuScriptUI.progressBar.addMax( customArmatures.length );

    // Result
    var riggedSpines = [];

    for (var i = 0, n = spines.length; i < n; i++) riggedSpines.push( Duik.Rig.spine( spines[i], customControllers ) ); 
    var parentSpine;
    if( riggedSpines.length > 0) parentSpine = riggedSpines[0];

    for (var i = 0, n = tails.length; i < n; i++) Duik.Rig.tail( tails[i], tailIK, parentSpine, customControllers );
    for (var i = 0, n = legs.length; i < n; i++) Duik.Rig.leg( legs[i], parentSpine, customControllers );
    for (var i = 0, n = arms.length; i < n; i++) Duik.Rig.arm( arms[i], parentSpine, customControllers );

    var fishRiggedSpines = [];
    for (var i = 0, n = fishSpines.length; i < n; i++) fishRiggedSpines.push( Duik.Rig.fishSpines( fishSpines[i], tailIK, parentSpine, customControllers ) );
    var fishParentSpine;
    if( fishRiggedSpines.length > 0) fishParentSpine = fishRiggedSpines[0];
    else if( riggedSpines.length > 0) fishParentSpine = riggedSpines[0];

    for (var i = 0, n = fins.length; i < n; i++) Duik.Rig.fin( fins[i], fishParentSpine, customControllers );
    /*for (var i = 0, n = wings.length; i < n; i++) Duik.Rig.wing( wings[i], customControllers );
    for (var i = 0, n = hairs.length; i < n; i++) Duik.Rig.hair( hairs[i], customControllers );
    for (var i = 0, n = snakeSpines.length; i < n; i++) Duik.Rig.snakeSpine( snakeSpines[i], customControllers );
    for (var i = 0, n = customArmatures.length; i < n; i++) Duik.Rig.custom( customArmatures[i], tailIK, longChainMode, customControllers );*/

    DuAEProject.setProgressMode( false );
    DuAE.endUndoGroup( DuScriptUI.String.AUTORIG );
}

/**
 * Rigs a spine.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @param {Layer[]|DuList.<Layer>} [customControllers] - Existing custom controllers to use
 * @returns {Object} An object with two Arrays: bones and controllers.
 */
Duik.Rig.spine = function( layers, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);

    var riggedSpine = {};
    riggedSpine.bones = [];
    riggedSpine.controllers = [];

    if( layers.isEmpty() ) return riggedSpine;
    if( layers.length() == 1 ) return riggedSpine;

    DuScriptUI.progressBar.stg(DuScriptUI.String.SPINE);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // Sort

    // a sorter for spine and neck
	function sortBones(a,b)
	{
		return a.i - b.i;
	}

    // expected
    var head = null;
    var hips =  null;
    var spine = [];
    var neck = [];
    var tip = null;

    layers.do(function( layer )
    {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );
        var boneIndex = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_INDEX, DuAETag.Type.INT, tag );

        if ( bone == DuOCO.Bone.HIPS ) hips = layer;
        else if (bone == DuOCO.Bone.SKULL ) head = layer;
        else if (bone == DuOCO.Bone.TIP ) tip = layer;
        else if (bone == DuOCO.Bone.SPINE )
        {
            var b = layer;
            b.i = boneIndex;
            spine.push(b);
        }
        else if (bone == DuOCO.Bone.NECK )
        {
            var b = layer;
            b.i = boneIndex;
            neck.push(b);
        }
    } );

    spine.sort( sortBones );
    neck.sort( sortBones );

    if (hips) riggedSpine.bones.push( hips );
    riggedSpine.bones = riggedSpine.bones.concat( spine );
    riggedSpine.bones = riggedSpine.bones.concat( neck );
    if (head) riggedSpine.bones.push( head );
    if (tip) riggedSpine.bones.push( tip );

    //find the root
	var spineRoot = null;
	if (hips) spineRoot = hips;
	else if (spine.length > 0) spineRoot = spine[0];
	else if (neck.length > 0) spineRoot = neck[0];
	else if (head) spineRoot = head;
	else if (tip) spineRoot = tip;

	//find the torso
	var spineTorso = null;
	if (spine.length > 0) spineTorso = spine[spine.length-1];
	else if (hips) spineTorso = hips;
	else if (neck.length) spineTorso = neck[0];
	else if (head) spineTorso = head;
	else if (tip) spineTorso = tip;

    // Nothing to do
    if (spineRoot == null) return riggedSpine;

    // Let's rig!

    DuScriptUI.progressBar.msg('Creating controllers...');

    // unparent everything, just to be sure
    var spineRootParent = spineRoot.parent;
    spineRoot.parent = null;
    for ( var i = 0, n = spine.length ; i < n; i++ ) spine[i].parent = null;
    for ( var i = 0, n = neck.length ; i < n; i++ ) neck[i].parent = null;
    if ( head ) head.parent = null;
    if ( tip ) tip.parent = null;

    // Controllers
    var bodyCtrl = null;
    var hipsCtrl = null;
    var shoulderCtrl = null;
    var headCtrl = null;

    // Create hips controllers
    if (hips)
    {
        bodyCtrl = Duik.Controller.getCreate( hips, Duik.Controller.Type.BODY, customControllers );
        hipsCtrl = Duik.Controller.create(comp, Duik.Controller.Type.HIPS, hips);
    }
    else if (spine.spine.length > 0)
    {
        bodyCtrl = Duik.Controller.getCreate( spine[0], Duik.Controller.Type.BODY, customControllers );
        hipsCtrl = Duik.Controller.create(comp, Duik.Controller.Type.HIPS, spine[0]);
    }
    if (bodyCtrl)
    {
        Duik.Layer.setLimbName( DuScriptUI.String.BODY, bodyCtrl );
        Duik.Layer.setLimbName( DuScriptUI.String.HIPS, hipsCtrl );
    }

    // Shoudlers controller
    if (neck.length > 0)
    {
        shoulderCtrl = Duik.Controller.getCreate( neck[0], Duik.Controller.Type.SHOULDERS, customControllers);
        Duik.Layer.setLimbName( DuScriptUI.String.SHOULDERS_AND_NECK, shoulderCtrl );
    }

    // Head controller
    if (head)
    {
        headCtrl = Duik.Controller.getCreate(head, Duik.Controller.Type.HEAD, customControllers);
        Duik.Layer.setLimbName( DuScriptUI.String.HEAD, headCtrl );
    }

    DuScriptUI.progressBar.msg('Parenting bones...');

    // Parenting
    // parent bones
    if (hips)
    {
        hips.parent = hipsCtrl;
    }
    if (spine.length > 0)
    {
        if (!hips)
        {
            spine[0].parent = hipsCtrl;
            // if bone, disable display link (bug AE)
            if ( Duik.Layer.isType( spine[0] , Duik.Layer.Type.BONE) )
            {
                var pe = Duik.PseudoEffect.BONE;
                var effect = spine[0].effect( pe.matchName );
                if (effect) effect( pe.props['Target'].index ).setValue(0);
            }
        }
        else spine[0].parent = hips;
    }
    if (neck.length > 0)
    {
        if (spine.length > 0) neck[0].parent = spine[spine.length-1];
        else if (hips) neck[0].parent = hips;
        else neck[0].parent = shoulderCtrl;
        for (var i = 1, n = neck.length; i < n; i++)
        {
            neck[i].parent = neck[i-1];
        }
    }
    if (head)
    {
        if (neck.length > 0) head.parent = neck[neck.length-1];
        else if (spine.length > 0) head.parent = spine[spine.length-1];
        else if (hips) head.parent = hips;
        else head.parent = headCtrl;
    }
    if (tip)
    {
        if (head) tip.parent = head;
        else if (neck.length > 0) tip.parent = neck[neck.length-1];
        else if (spine.length > 0) tip.parent = spine[spine.length-1];
        else if (hips) tip.parent = hips;
        else
        {
            hipsCtrl = Duik.Controller.create(comp, Duik.Controller.Type.HIPS, tip);
            tip.parent = hipsCtrl;
        }
    }

    // parent controllers
    if (bodyCtrl)
    {
        bodyCtrl.parent = spineRootParent;
        hipsCtrl.parent = bodyCtrl;
    }
    if (shoulderCtrl)
    {
        if (bodyCtrl) shoulderCtrl.parent = bodyCtrl;
    }
    if (headCtrl)
    {
        if (shoulderCtrl) headCtrl.parent = shoulderCtrl;
        else if (bodyCtrl) headCtrl.parent = bodyCtrl;
    }

    DuScriptUI.progressBar.msg('Rigging...');

    //spine IK
    var goal;
    if (neck.length > 0) goal = neck[0];
    else if (head) goal = head;
    else if (tip) goal = tip;
    var ctrl;
    if (shoulderCtrl) ctrl = shoulderCtrl;
    else if (headCtrl) ctrl = headCtrl;

    if (ctrl || goal)
    {
        if (hips && spine.length == 0)
        {
            var backCtrl = Duik.Constraint.oneLayerIK(hips , goal, ctrl, false);
            if (!ctrl) backCtrl.parent = bodyCtrl;
        }
        else if (spine.length == 1)
        {
            var backCtrl = Duik.Constraint.oneLayerIK(spine[0], goal, ctrl, false);
            if (!ctrl) backCtrl.parent = bodyCtrl;
        }
        else if (spine.length > 1)
        {
            var backCtrl = Duik.Constraint.bezierIK(spine, goal, ctrl, false);
            if (goal) goal.parent = spine[spine.length-1];

            backCtrl[0].parent = bodyCtrl;
            backCtrl[0].moveBefore(hipsCtrl);
            var peCurve = Duik.PseudoEffect.BEZIER_IK_CURVE;
            backCtrl[0].effect( peCurve.matchName ).property( peCurve.props["Draw guides"].index ).setValue(0);
            backCtrl[1].moveBefore(backCtrl[0]);
            backCtrl[2].parent = hipsCtrl;
            backCtrl[2].moveAfter(bodyCtrl);
            backCtrl[2].locked = true;
            if (!ctrl) backCtrl[1].parent = bodyCtrl;

            if (hips) Duik.Constraint.oneLayerIK(hips,undefined,backCtrl[2]);
        }
    }

    //other controls
    //neck
    if (neck.length > 0)
    {
        Duik.Constraint.simpleFK(neck, shoulderCtrl );
    }

    //head
    if (head)
    {
        Duik.Constraint.simpleFK(head, headCtrl);
        if (shoulderCtrl)
        {
            var exp = [ DuAEExpression.Id.AUTORIG_HEAD,
                'var ctrlLayer = ' + DuAELayer.expressionLink(headCtrl, true) + ';',
                'var result = ctrlLayer.toWorld( ctrlLayer.anchorPoint );',
                'if ( hasParent ) result = parent.fromWorld(result);',
                'result;'
            ].join('\n');
            head.transform.position.expression = exp;
        }
    }

    if ( bodyCtrl ) riggedSpine.controllers.push(bodyCtrl);
    if ( hipsCtrl ) riggedSpine.controllers.push(hipsCtrl);
    if ( shoulderCtrl ) riggedSpine.controllers.push(shoulderCtrl);
    if ( headCtrl ) riggedSpine.controllers.push(headCtrl);
    return riggedSpine;
}

/**
 * Rigs a tail.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @param {Boolean} [tailIK=false] Set to true if you prefer using Bézier IK than FK with overlap for tails and other chains consisting of more than 3 layers.
 * @param {Object} [parentSpine] An object with two Arrays: bones and controllers.
 * @param {Layer[]|DuList.<Layer>} [customControllers] - Existing custom controllers to use
 * @returns {Layer[]} The controllers of the tail
 */
Duik.Rig.tail = function ( layers, tailIK, parentSpine, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return [];

    tailIK = def(tailIK, false);

    DuScriptUI.progressBar.stg(DuScriptUI.String.TAIL);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    if (typeof parentSpine === 'undefined')
    {
        parentSpine = {};
        parentSpine.bones = [];
        parentSpine.controllers = [];
    }

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // expected
    var tail = [];
    var tip = null;

    layers.do(function( layer )
    {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );
        var boneIndex = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_INDEX, DuAETag.Type.INT, tag );

        if ( bone == DuOCO.Bone.TIP ) tip = layer;
        else
        {
            var b = layer;
            b.i = boneIndex;
            tail.push(b);
        }
    } );

    // Sort
    // a sorter for spine and neck
	function sortBones(a,b)
	{
		return a.i - b.i;
	}

    tail.sort(sortBones);

    DuScriptUI.progressBar.msg('Creating controllers...');

    //unparent
    for (var i=1, num = tail.length ; i < num ; i++ ) tail[i].parent = null;

    if (!tip && tail.length > 1) tip = tail.pop();
    else if (tail.length == 1)
    {
        var tailCtrl = Duik.Controller.create(comp, Duik.Controller.Type.TAIL, tail[0] );
        tail[0].parent = tailCtrl;
        if (parentSpine.bones.length > 0) tailCtrl.parent = parentSpine.bones[0];
        return;
    }

    DuScriptUI.progressBar.msg('Rigging...');

    //ik
    if (tailIK)
    {
        //controllers
        var tailCtrl = Duik.Controller.getCreate( tip, Duik.Controller.Type.TAIL, customControllers);

        if (tail.length > 1)
        {
            var ctrls = Duik.Constraint.bezierIK( tail, tip, tailCtrl, false);
            //parent
            if (parentSpine.controllers.length > 0)
            {
                ctrls[0].parent = parentSpine.controllers[0];
                ctrls[1].parent = parentSpine.controllers[0];
            }
            if (parentSpine.bones.length > 0) tail[0].parent = parentSpine.bones[0];
        }
        else
        {
            Duik.Constraint.oneLayerIK( tail[0], tip, tailCtrl, false);
            //parent
            if (parentSpine.controllers.length > 0) tailCtrl.parent = parentSpine.controllers[0];
            if (parentSpine.bones.length > 0) tail[0].parent = parentSpine.bones[0];
        }
        return;
    }

    //fk

    //controllers
    var tailCtrl = Duik.Controller.getCreate( tail[0], Duik.Controller.Type.TAIL, customControllers);
    tail.push(tip);

    var tailRoot = tail[0];
    Duik.Constraint.fk( tail.reverse(), tailCtrl);
    //parent
    if (parentSpine.controllers.length > 0) tailCtrl.parent = parentSpine.controllers[0];
    if (parentSpine.bones.length > 0) tailRoot.parent = parentSpine.bones[0];
}

/**
 * Rigs a leg.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @param {Object} [parentSpine] An object with two Arrays: bones and controllers.
 * @param {Layer[]|DuList.<Layer>} [customControllers] - Existing custom controllers to use
 * @returns {Layer[]} The controllers of the tail
 */
Duik.Rig.leg = function ( layers, parentSpine, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return [];

    if (typeof parentSpine === 'undefined')
    {
        parentSpine = {};
        parentSpine.bones = [];
        parentSpine.controllers = [];
    }

    DuScriptUI.progressBar.stg(DuScriptUI.String.LEG);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // expected
    var femur = null;
    var tibia = null;
    var foot = null;
    var toes = null;
    var tip = null;
    var heel = null;

    var side = DuOCO.Side.NONE;
    var type = DuOCO.LimbType.CUSTOM;

    // get'em all
    layers.do(function(layer) {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );

        if (bone == DuOCO.Bone.FEMUR) femur = layer;
        else if (bone == DuOCO.Bone.TIBIA) tibia = layer;
        else if (bone == DuOCO.Bone.TARSUS) foot = layer;
        else if (bone == DuOCO.Bone.TOE) toes = layer;
        else if (bone == DuOCO.Bone.TIP) tip = layer;
        else if (bone == DuOCO.Bone.HEEL) heel = layer;

        if ( side == DuOCO.Side.NONE ) side = Duik.Layer.side(layer);
        if ( type == DuOCO.LimbType.CUSTOM ) type = DuAETag.getValue( layer, DuAETag.Key.DUIK_LIMB_TYPE, DuAETag.Type.STRING, tag );
    });

    //unparent
    if (tibia && femur) tibia.parent = null;
    if (foot && (tibia || femur)) foot.parent = null;
    if (toes  && (foot || tibia || femur)) toes.parent = null;
    if (tip) tip.parent = null;
    if (heel) heel.parent = null;

    //reset transformations
    if (femur) Duik.Bone.resetTransform(femur);
    if (tibia) Duik.Bone.resetTransform(tibia);
    if (foot) Duik.Bone.resetTransform(foot);
    if (toes) Duik.Bone.resetTransform(toes);
    if (tip) Duik.Bone.resetTransform(tip);
    if (heel) Duik.Bone.resetTransform(heel);

    //adjust/fix what we got! We're very friendly...
    if (type == DuOCO.LimbType.UNGULATE)
    {
        // We need toes (hoof)
        if (!toes)
        {
            if (tip)
            {
                toes = tip;
                tip = null;
            }
            else if (foot)
            {
                toes = foot;
                foot = null;
            }
            else if (tibia)
            {
                toes = tibia;
                tibia = null;
            }
            else if (femur)
            {
                toes = femur;
                femur = null;
            }
        }
        // No foot without both femur and tibia
        if ( (!femur || !tibia) && foot)
        {
            if (femur)
            {
                tibia = foot;
                foot = null;
            }
            else if (tibia)
            {
                femur = tibia;
                tibia = foot;
                foot = null;
            }
            else
            {
                femur = foot;
                foot = null;
            }
        }
        // No tibia without femur
        if ( tibia && !femur )
        {
            femur = tibia;
            tibia = null;
        }
    }

    DuScriptUI.progressBar.msg('Creating controllers...');

    //add nulls and controllers for the footRoll
    var toesNull, footNull;
    //the foot roll needs all parts
    if ((toes || tip) && foot && tibia && femur && type != DuOCO.LimbType.UNGULATE)
    {
        if (!toes)
        {
            toes = tip;
            tip = null;
        }

        //claws
        toesNull = DuAEComp.addNull(comp, 20, toes);
        Duik.Layer.copyAttributes( toesNull, toes, Duik.Layer.Type.IK );

        var footSize = toes.transform.position.value[0] - foot.transform.position.value[0];
        //tiptoe
        if (!tip)
        {
            tip = DuAEComp.addNull(comp, 20, toes);
            Duik.Layer.copyAttributes( tip, toes, Duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( Duik.Layer.limbName(toes) + '_Tip', tip );
            tip.transform.position.setValue([toesNull.transform.position.value[0] + footSize/2,toesNull.transform.position.value[1]]);
        }

        if (!heel && (type == DuOCO.LimbType.PLANTIGRADE || type == DuOCO.LimbType.HOMINOID) )
        {
            heel = DuAEComp.addNull(comp, 20, toes);
            Duik.Layer.copyAttributes( heel, foot, Duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( DuScriptUI.String.HEEL, heel );
            heel.transform.position.setValue([foot.transform.position.value[0],toesNull.transform.position.value[1]]);
        }

        //foot
        footNull = DuAEComp.addNull(comp, 20, foot);
        Duik.Layer.copyAttributes( footNull, foot, Duik.Layer.Type.IK );
    }

    //Controller for the leg
    var ctrlType = Duik.Controller.Type.FOOT;
    if (type == DuOCO.LimbType.DIGITIGRADE) ctrlType = Duik.Controller.Type.CLAWS;
    if (type == DuOCO.LimbType.UNGULATE) ctrlType = Duik.Controller.Type.HOOF;
	
    var ctrl = null;
    if (type == DuOCO.LimbType.UNGULATE) ctrl = Duik.Controller.getCreate(toes, ctrlType, customControllers);
    else
    {
        if (foot && ((femur || tibia) || (!toes && !tip))) ctrl = Duik.Controller.getCreate(foot, ctrlType, customControllers);
        else if (toes && ((femur || tibia) || !tip)) ctrl = Duik.Controller.getCreate(toes, ctrlType, customControllers);
        else if (tip) ctrl = Duik.Controller.getCreate(tip, ctrlType, customControllers);
        else if (heel) ctrl = Duik.Controller.getCreate(heel, ctrlType, customControllers);
        else if (tibia) ctrl = Duik.Controller.getCreate(tibia, ctrlType, customControllers);
        else if (femur) ctrl = Duik.Controller.getCreate(femur, ctrlType, customControllers);
    }

    // Rename controller
    Duik.Layer.setLimbName( DuScriptUI.String.LEG, ctrl);

    DuScriptUI.progressBar.msg('Parenting...');
    
    //parenting
    var spineRoot = null;
    if ( parentSpine.bones.length > 0 ) spineRoot =  parentSpine.bones[0];
    if (toes)
    {
        if (foot) toes.parent = foot;
        else if (tibia) toes.parent = tibia;
        else if (femur) toes.parent = femur;
        else if (tip || heel ) toes.parent = spineRoot;
        else
        {
            toes.parent = ctrl;
            ctrl.parent = spineRoot;
        }
    }
    if (foot)
    {
        if (tibia) foot.parent = tibia;
        else if (femur) foot.parent = femur;
        else if (toes || tip || heel ) foot.parent = spineRoot;
        else
        {
            foot.parent = ctrl;
            ctrl.parent = spineRoot;
        }
    }
    if (tibia)
    {
        if (femur) tibia.parent = femur;
        else if (foot || toes || heel) tibia.parent = spineRoot;
        else
        {
            tibia.parent = ctrl;
            ctrl.parent = spineRoot;
        }
    }
    if (femur)
    {
        if (tibia || foot || toes || heel) femur.parent = spineRoot;
        else
        {
            femur.parent = ctrl;
            if (spineRoot) ctrl.parent = spineRoot;
        }
    }
    if (tip)
    {
        if (heel) tip.parent = heel;
        else if (toes) tip.parent = toes;
        else if (foot) tip.parent = foot;
        else if (tibia) tip.parent = tibia;
        else if (femur) tip.parent = femur;
    }
    if (footNull)
    {
        footNull.parent = toesNull;
        toesNull.parent = tip;
        if (type == DuOCO.LimbType.PLANTIGRADE || type == DuOCO.LimbType.HOMINOID) heel.parent = ctrl;
        else if (type == DuOCO.LimbType.DIGITIGRADE) tip.parent = ctrl;
    }

    // Rig!
    DuScriptUI.progressBar.msg('Rigging...');

    if (type == DuOCO.LimbType.UNGULATE)
    {
        if (femur && tibia && foot)
        {
            Duik.Constraint.twoOneLayerIK(femur, tibia, foot, toes, ctrl, false);
            // Rename effects
            var footIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.ONE_LAYER_IK.matchName );
            DuAEProperty.rename( footIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.FOOT);
            var legIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.TWO_LAYER_IK.matchName );
            DuAEProperty.rename( legIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.LEG);
            var hoofAngle = DuAELayer.lastEffect( ctrl, 'ADBE Angle Control' );
            DuAEProperty.rename( hoofAngle, DuScriptUI.String.HOOF);
        }
        else if (femur && tibia) Duik.Constraint.twoLayerIK(femur, tibia, toes, ctrl, false);
        else if (femur) Duik.Constraint.oneLayerIK(femur, toes, ctrl, false);
    }
    else if (footNull)
    {
        //claws
        Duik.Constraint.oneLayerIK(toes,undefined,tip, false);
        //leg
        Duik.Constraint.twoLayerIK(femur,tibia,foot,footNull, false);
        //foot
        Duik.Constraint.oneLayerIK(foot,undefined,toesNull, false);

        //add an IK effect on the controller
        var pe2 = Duik.PseudoEffect.TWO_LAYER_IK;
        var pe1 = Duik.PseudoEffect.ONE_LAYER_IK;
        var ikCtrl = pe2.apply(ctrl);
        //the effect on the null of the foot
        var ikEffect = footNull.effect(pe2.matchName);
        var ikFoot = toesNull.effect(pe1.matchName);
        var ikToes = tip.effect(pe1.matchName);
        ikCtrl.name = ikEffect.name;
        //link the properties
        //The main IK
        //Set the "side" property
        ikCtrl( pe2.props["Side"].index ).setValue(ikEffect( pe2.props["Side"].index ).value);
        var ikEffectProp = new DuAEProperty( ikEffect );
        ikEffectProp.linkProperties(ikCtrl,true);
        //the IK/FK Switches
        var ikSwitch = new DuAEProperty( ikFoot( pe1.props["IK"].index ) )
        ikSwitch.linkProperties( ikCtrl( pe2.props["IK / FK"].index ), true);
        var fkExp = 'if (effect("' + ikFoot.name + '")(' + pe1.props["IK"].index + ').value) value;\n';
        fkExp += 'else ';
        var fkEnd = new DuAEProperty( ikCtrl( pe2.props["FK"]["End"].index ) );
        fkExp += fkEnd.expressionLink( true );
        fkExp += ';';
        ikFoot( pe1.props["FK"].index ).expression = fkExp;
        var ikToesSwitch = new DuAEProperty( ikToes( pe1.props["IK"].index ) );
        ikToesSwitch.linkProperties( ikCtrl( pe2.props["IK / FK"].index ), true);
        //and re-setup the layers & needed data
        ikCtrl( pe2.props["Data"]["Layers"]["Upper"].index ).setValue(ikEffect( pe2.props["Data"]["Layers"]["Upper"].index ).value);
        ikCtrl( pe2.props["Data"]["Layers"]["Lower"].index ).setValue(ikEffect( pe2.props["Data"]["Layers"]["Lower"].index ).value);
        ikCtrl( pe2.props["Data"]["Layers"]["Goal"].index ).setValue(ikEffect( pe2.props["Data"]["Layers"]["Goal"].index ).value);
        var endPos = new DuAEProperty( ikCtrl( pe2.props["Data"]["Stretch data"]["Goal position"].index ) );
        endPos.pickWhip( ikEffect( pe2.props["Data"]["Stretch data"]["Goal position"].index ));
        var endWPos = new DuAEProperty( ikCtrl( pe2.props["Data"]["Stretch data"]["Goal world position"].index ) );
        endWPos.pickWhip( ikEffect( pe2.props["Data"]["Stretch data"]["Goal world position"].index ));

        //tiptoe, heel and footroll
        if (type == DuOCO.LimbType.PLANTIGRADE || type == DuOCO.LimbType.HOMINOID)
        {
            //detect right or left, depending on the toes position
            var right = false;
            if (toes && foot)
            {
                var toesPos = DuAELayer.getWorldPos(toes);
                var footPos = DuAELayer.getWorldPos(foot);
                right = (toesPos[0] - footPos[0]) > 0;
            }
            
            var pe = Duik.PseudoEffect.FOOT_ROLL;
            var footCtrl = pe.apply(ctrl);
            tip.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(" + pe.props["Tiptoe"].index + ");";
            var op  = right ? "<" : ">";
            heel.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(" + pe.props["Heel"].index + ");\n" +
                "var roll = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(" + pe.props["Foot roll"].index + ");\n" +
                "roll " + op + " 0 ? roll+ctrl : ctrl;";
            op = right ? ">" : "<";
            toesNull.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(" + pe.props["Foot roll"].index + ");\n" +
                "ctrl " + op + " 0 ? ctrl : 0;";
            var ikToesEffect = tip.effect( pe1.matchName);
            ikToesEffect( pe1.props["FK"].index ).expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(" + pe.props["Toes"].index + ");";
        }
        else if (type == DuOCO.LimbType.DIGITIGRADE)
        {
            var pe = Duik.PseudoEffect.DIGI_FOOT_ROLL;
            var footCtrl = pe.apply(ctrl);
            tip.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(1);";
            toesNull.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(3);\n" +
                "var tiptoe = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(1);\n" +
                "ctrl-tiptoe;";
            tip.effect( pe1.matchName )( pe1.props["FK"].index ).expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + footCtrl.name + "\")(2);";
        }

        // hide and lock
        toesNull.enabled = false;
        toesNull.shy = true;
        toesNull.locked = true;
        footNull.enabled = false;
        footNull.shy = true;
        footNull.locked = true;
    }
    else
    {
        if (foot)
        {
            if (femur && tibia) Duik.Constraint.twoLayerIK(femur,tibia,foot,ctrl, false);
            else if (femur) Duik.Constraint.oneLayerIK(femur,foot,ctrl, false);
            else if (tibia) Duik.Constraint.oneLayerIK(tibia,foot,ctrl, false);
            else if (toes) Duik.Constraint.oneLayerIK(foot,toes,ctrl, false);
            else if (tip) Duik.Constraint.oneLayerIK(foot,tip,ctrl, false);
        }
        else if (toes)
        {
            if (femur && tibia) Duik.Constraint.twoLayerIK(femur,tibia,letoes,ctrl, false);
            else if (femur) Duik.Constraint.oneLayerIK(femur,toes,ctrl, false);
            else if (tibia) Duik.Constraint.oneLayerIK(tibia,toes,ctrl, false);
            else if (tip) Duik.Constraint.oneLayerIK(toes,tip,ctrl, false);
        }
        else if (tip)
        {
            if (femur && tibia) Duik.Constraint.twoLayerIK(femur,tibia,tip,ctrl, false);
            else if (femur) Duik.Constraint.oneLayerIK(femur,tip,ctrl, false);
            else if (tibia) Duik.Constraint.oneLayerIK(tibia,tip,ctrl, false);
        }
        else if (heel)
        {
            if (femur && tibia) Duik.Constraint.twoLayerIK(femur,tibia,heel,ctrl, false);
            else if (femur) Duik.Constraint.oneLayerIK(femur,heel,ctrl, false);
            else if (tibia) Duik.Constraint.oneLayerIK(tibia,heel,ctrl, false);
        }
        else if (femur && tibia) Duik.Constraint.oneLayerIK(femur,tibia,ctrl, false);
    }
}

/**
 * Rigs a shoulder (an FK and an auto-position effect)
 * @param {Layer} shoulder The shoulder bone
 * @param {Layer} ctrl The controller
 */
Duik.Rig.shoulder = function( shoulder, ctrl )
{
    var rotVal = shoulder.transform.rotation.value;

    Duik.Constraint.oneLayerIK(shoulder, undefined, ctrl, false);
    // Rename effect
    var pe = Duik.PseudoEffect.ONE_LAYER_IK;
    var shoulderIK = DuAELayer.lastEffect( ctrl, pe.matchName );
    DuAEProperty.rename( shoulderIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.SHOULDER);
    // Adjust values
    shoulderIK( pe.props["Weight"].index ).setValue(20);
    shoulderIK( pe.props["Advanced"]["Parent rotation"].index ).setValue(1);
    shoulderIK( pe.props["FK"].index ).setValue( -shoulder.transform.rotation.value + rotVal*2);

    // Rig position
    var pe = Duik.PseudoEffect.SHOULDER;
    var shoulderCtrl = pe.apply(ctrl);
    // 10 % auto by default
    shoulderCtrl( pe.props["Auto"].index ).setValue(10);

    // Deactivate the arm parent rotation inheritance
    var pe2 = Duik.PseudoEffect.TWO_LAYER_IK;
    var ikEffect = DuAELayer.lastEffect( ctrl, pe2.matchName );
    if(ikEffect) ikEffect( pe2.props["FK"]["Parent rotation"].index).setValue(0);

    // Set position expression
    shoulder.transform.position.expression = DuAEExpression.Id.AUTORIG_SHOULDER + '\n' +
        'var c = thisComp.layer("' + ctrl.name + '");\n' +
        'var fx =  c.effect("' + shoulderCtrl.name + '");\n' +
        'var a = fx(14).value;\n' +
        'if (thisLayer.hasParent) a = thisLayer.parent.fromWorld(a) - thisLayer.parent.fromWorld([0,0]);\n' +
        'var result = value + a;\n' +
        'var cp = c.toWorld(c.anchorPoint);\n' +
        'if (thisLayer.hasParent) cp = thisLayer.parent.fromWorld(cp);\n' +
        'cp0 = c.toWorld(c.anchorPoint,0);\n' +
        'if (thisLayer.hasParent) cp0 = thisLayer.parent.fromWorld(cp0);\n' +
        'cp -= cp0;\n' +
        'result += cp*(fx(9).value/100);\n' +
        'result;';
}

/**
 * Returns the bone from the spine bones the closest to the location, where child bones at that location can be attached 
 * @param {float[]} location The location where to attach bones, in comp coordinates
 * @param {Layer[]} spineBones The bones of the spine, sorted from root (hips) to tip
 * @returns {Layer|null} The corresponding spine bone or null if the list of spine bones is empty
 */
Duik.Rig.getSpineAttach = function ( location, spineBones)
{
    spineAttach = null;

    if (spineBones.length == 0) return spineAttach;

    // The bone needs to be the one just before, no matter the orientation: check the distance between hips & shoulder
    // on the furthest axis
    var rootPos = DuAELayer.getWorldPos( spineBones[0] );
    var x = location[0] - rootPos[0];
    var y = location[1] - rootPos[1];
    var axis = 1;
    var sign = DuMath.sign( y );
    if ( Math.abs( x ) > Math.abs( y ) )
    {
        axis = 0;
        sign = DuMath.sign( x );
    }

    for (var i = 0, n = spineBones.length; i < n; i++)
    {
        var b = spineBones[i];
        var bPos = DuAELayer.getWorldPos( b );
        var l = location[axis] - bPos[axis];
        var s = DuMath.sign(l);
        // too far, we're ready
        if (s != sign ) return spineAttach;
        spineAttach = b;
    }

    return spineAttach;

}

/**
 * Rigs an arm/front leg.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @param {Object} [parentSpine] An object with two Arrays: bones and controllers.
 * @param {Layer[]|DuList.<Layer>} [customControllers] - Existing custom controllers to use
 * @returns {Layer[]} The controllers of the tail
 */
Duik.Rig.arm = function ( layers, parentSpine, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return [];

    if (typeof parentSpine === 'undefined')
    {
        parentSpine = {};
        parentSpine.bones = [];
        parentSpine.controllers = [];
    }

    DuScriptUI.progressBar.stg(DuScriptUI.String.ARM);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // expected
    var shoulder = null;
    var humerus = null;
    var radius = null;
    var hand = null;
    var claws = null;
    var tip = null;
    var palm = null;

    var side = DuOCO.Side.NONE;
    var type = DuOCO.LimbType.CUSTOM;

    // get'em all
    layers.do(function(layer) {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );

        if (bone == DuOCO.Bone.CLAVICLE) shoulder = layer;
        else if (bone == DuOCO.Bone.HUMERUS) humerus = layer;
        else if (bone == DuOCO.Bone.RADIUS) radius = layer;
        else if (bone == DuOCO.Bone.CARPUS) hand = layer;
        else if (bone == DuOCO.Bone.FINGER) claws = layer;
        else if (bone == DuOCO.Bone.TIP) tip = layer;
        else if (bone == DuOCO.Bone.HEEL) palm = layer;

        if ( side == DuOCO.Side.NONE ) side = Duik.Layer.side(layer);
        if ( type == DuOCO.LimbType.CUSTOM ) type = DuAETag.getValue( layer, DuAETag.Key.DUIK_LIMB_TYPE, DuAETag.Type.STRING, tag );
    });

    //unparent
    if (humerus && shoulder) humerus.parent = null;
    if (radius && (humerus || shoulder)) radius.parent = null;
    if (hand && (radius || humerus)) hand.parent = null;
    if (claws  && (hand || radius || humerus)) claws.parent = null;
    if (tip) tip.parent = null;
    if (palm) palm.parent = null;

    //reset transformations
    if (humerus) Duik.Bone.resetTransform(humerus);
    if (shoulder) Duik.Bone.resetTransform(shoulder);
    if (radius) Duik.Bone.resetTransform(radius);
    if (hand) Duik.Bone.resetTransform(hand);
    if (claws) Duik.Bone.resetTransform(claws);
    if (tip) Duik.Bone.resetTransform(tip);
    if (palm) Duik.Bone.resetTransform(palm);

    //adjust/fix what we got! We're very friendly...
    // No shoulder without both humerus and radius
    if ( shoulder && (!humerus || !radius) )
    {
        if (humerus)
        {
            radius = humerus;
            shoulder = humerus;
            shoulder = null;
        }
        else if (radius)
        {
            radius = humerus;
            humerus = shoulder;
            shoulder = null;
        }
        else
        {
            humerus = shoulder;
            humerus = null;
        }
    }
    // Ungulate adjustments
    if (type == DuOCO.LimbType.UNGULATE || type == DuOCO.LimbType.ARTHROPOD)
    {
        // We need claws (hoof)
        if (!claws)
        {
            if (tip)
            {
                claws = tip;
                tip = null;
            }
            else if (hand)
            {
                claws = hand;
                hand = null;
            }
            else if (radius)
            {
                claws = radius;
                radius = null;
            }
            else if (humerus)
            {
                claws = humerus;
                humerus = null;
            }
            else if (shoulder)
            {
                claws = shoulder;
                shoulder = null;
            }
        }
        // No hand without both humerus and radius
        if ( hand && (!humerus || !radius) )
        {
            if ( humerus )
            {
                radius = hand;
                hand = null;
            }
            else if ( radius )
            {
                humerus = radius;
                radius = hand;
                hand = null;
            }
            else
            {
                humerus = hand;
                hand = null;
            }
        }
        // No radius without humerus
        if ( radius && !humerus )
        {
            humerus = radius;
            radius = null;
        }
    }

    DuScriptUI.progressBar.msg('Creating controllers...');

    //add nulls and controllers for the footRoll
    var clawsNull, handNull;
    //the foot roll needs all parts
    if ( (claws || tip) && hand && ((radius && humerus) || (radius && shoulder) || (humerus && shoulder)) && type != DuOCO.LimbType.UNGULATE && type != DuOCO.LimbType.ARTHROPOD && type != DuOCO.LimbType.HOMINOID)
    {
        if (!claws)
        {
            claws = tip;
            tip = null;
        }
        //claws
        clawsNull = DuAEComp.addNull(comp, 20, claws);
        Duik.Layer.copyAttributes( clawsNull, claws, Duik.Layer.Type.IK );

        var handSize = claws.transform.position.value[0] - hand.transform.position.value[0];
        //tiptoe
        if (!tip)
        {
            tip = DuAEComp.addNull(comp, 20, claws);
            Duik.Layer.copyAttributes( tip, claws, Duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( Duik.Layer.limbName(claws) + '_Tip', tip );
            tip.transform.position.setValue([clawsNull.transform.position.value[0] + handSize/2,clawsNull.transform.position.value[1]]);
        }

        if (!palm && type == DuOCO.LimbType.PLANTIGRADE)
        {
            palm = DuAEComp.addNull(comp, 20, claws);
            Duik.Layer.copyAttributes( palm, hand, Duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( DuScriptUI.String.HEEL, palm );
            palm.transform.position.setValue([hand.transform.position.value[0],clawsNull.transform.position.value[1]]);
        }

        //hand
        handNull = DuAEComp.addNull(comp, 20, hand);
        Duik.Layer.copyAttributes( handNull, hand, Duik.Layer.Type.IK );
    }

    //Controller for the arm
    var ctrlType = Duik.Controller.Type.HAND;
    if (handNull && type == DuOCO.LimbType.PLANTIGRADE) ctrlType = Duik.Controller.Type.FOOT;
    else if (type == DuOCO.LimbType.DIGITIGRADE) ctrlType = Duik.Controller.Type.CLAWS;
    else if (type == DuOCO.LimbType.UNGULATE) ctrlType = Duik.Controller.Type.HOOF;
    else if (type == DuOCO.LimbType.ARTHROPOD) ctrlType = Duik.Controller.Type.PINCER;

    var ctrl = null;
    if (type == DuOCO.LimbType.UNGULATE || type == DuOCO.LimbType.ARTHROPOD) ctrl = Duik.Controller.getCreate(claws, ctrlType, customControllers);
    else 
    {
        if (hand && ((humerus || radius || shoulder) || (!claws && !tip))) {
            ctrl = Duik.Controller.getCreate(hand, ctrlType, customControllers);
        }
        else if (claws && ((humerus || radius || shoulder) || !tip)) {
            ctrl = Duik.Controller.getCreate(claws, ctrlType, customControllers);
        }
        else if (tip) {
            ctrl = Duik.Controller.getCreate(tip, ctrlType, customControllers);
        }
        else if (palm) {
            ctrl = Duik.Controller.getCreate(palm, ctrlType, customControllers);
        }
        else if (radius) {
            ctrl = Duik.Controller.getCreate(radius, ctrlType, customControllers);
        }
        else if (humerus) {
            ctrl = Duik.Controller.getCreate(humerus, ctrlType, customControllers);
        }
        else if (shoulder) {
            ctrl = Duik.Controller.getCreate(shoulder, ctrlType, customControllers);
        }
    }

    // Rename controller
    if(type == DuOCO.LimbType.HOMINOID) Duik.Layer.setLimbName( DuScriptUI.String.ARM, ctrl);
    else Duik.Layer.setLimbName( DuScriptUI.String.FRONT_LEG, ctrl);

    DuScriptUI.progressBar.msg('Parenting...');
    
    // Find the torso for parenting (the closest bone before the shoulder)
    var shoulderPos;
    if (shoulder) shoulderPos = DuAELayer.getWorldPos(shoulder);
    else if (humerus) shoulderPos = DuAELayer.getWorldPos(humerus);
    else if (radius) shoulderPos = DuAELayer.getWorldPos(radius);
    else if (hand) shoulderPos = DuAELayer.getWorldPos(hand);
    else if (claws) shoulderPos = DuAELayer.getWorldPos(claws);
    else if (tip) shoulderPos = DuAELayer.getWorldPos(tip);
    else if (palm) shoulderPos = DuAELayer.getWorldPos(palm);

    var spineTorso = Duik.Rig.getSpineAttach(shoulderPos, parentSpine.bones);

    //parenting
    if (claws)
    {
        if (hand) claws.parent = hand;
        else if (radius) claws.parent = radius;
        else if (humerus) claws.parent = humerus;
        else if (shoulder) claws.parent = shoulder;
        else if (tip || palm) claws.parent = spineTorso;
        else
        {
            claws.parent = ctrl;
            ctrl.parent = spineTorso;
        }
    }
    if (hand)
    {
        if (radius) hand.parent = radius;
        else if (humerus) hand.parent = humerus;
        else if (shoulder) hand.parent = shoulder;
        else if (claws || tip || palm) hand.parent = spineTorso;
        else
        {
            hand.parent = ctrl;
            ctrl.parent = spineTorso;
        }
    }
    if (radius)
    {
        if (humerus) radius.parent = humerus;
        else if (shoulder) radius.parent = shoulder;
        else if (hand || claws || tip || palm) radius.parent = spineTorso;
        else
        {
            radius.parent = ctrl;
            ctrl.parent = spineTorso;
        }
    }
    if (humerus)
    {
        if (shoulder) humerus.parent = shoulder;
        else if (radius || hand || claws || palm || tip) humerus.parent = spineTorso;
        else
        {
            humerus.parent = ctrl;
            if (spineTorso) ctrl.parent = spineTorso;
        }
    }
    if (shoulder)
    {
        if (humerus || radius || hand || claws || palm  || tip) shoulder.parent = spineTorso;
        else
        {
            shoulder.parent = ctrl;
            if (spineTorso) ctrl.parent = spineTorso;
        }
    }
    if (tip)
    {
        if (palm) tip.parent = palm;
        else if (claws) tip.parent = claws;
        else if (hand) tip.parent = hand;
        else if (radius) tip.parent = radius;
        else if (humerus) tip.parent = humerus;
        else if (shoulder) tip.parent = shoulder;
    }
    if (handNull)
    {
        handNull.parent = clawsNull;
        clawsNull.parent = tip;
        if (type == DuOCO.LimbType.PLANTIGRADE) palm.parent = ctrl;
        else if(type == DuOCO.LimbType.DIGITIGRADE) tip.parent = ctrl;
    }

    // Rig!
    DuScriptUI.progressBar.msg('Rigging...');

    if (type == DuOCO.LimbType.UNGULATE || type == DuOCO.LimbType.ARTHROPOD)
    {
        if (humerus && radius && hand)
        {
            Duik.Constraint.twoOneLayerIK(humerus, radius, hand, claws, ctrl, false);
            // Rename effects
            var footIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.ONE_LAYER_IK.matchName );
            DuAEProperty.rename( footIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.FOOT);
            var legIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.TWO_LAYER_IK.matchName );
            DuAEProperty.rename( legIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.LEG);
            var hoofAngle = DuAELayer.lastEffect( ctrl, 'ADBE Angle Control' );
            DuAEProperty.rename( hoofAngle, DuScriptUI.String.HOOF);
        }
        else if (femur && tibia)
        {
            Duik.Constraint.twoLayerIK(femur, tibia, toes, ctrl, false);
            // Rename effects
            var legIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.TWO_LAYER_IK.matchName );
            DuAEProperty.rename( legIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.LEG);
        }
        else if (femur)
        {
            Duik.Constraint.oneLayerIK(femur, toes, ctrl, false);
            // Rename effects
            var legIK = DuAELayer.lastEffect( ctrl, Duik.PseudoEffect.ONE_LAYER_IK.matchName );
            DuAEProperty.rename( legIK, DuScriptUI.String.IK + ' | ' + DuScriptUI.String.LEG);
        }
    }
    else if (handNull)
    {
        //claws
        Duik.Constraint.oneLayerIK( claws, undefined, tip, false);
        //arm
        if (humerus && radius) Duik.Constraint.twoLayerIK(humerus,radius,hand,handNull, false);
        //hand
        Duik.Constraint.oneLayerIK(hand, undefined, clawsNull, false);

        var pe2 = Duik.PseudoEffect.TWO_LAYER_IK;
        var pe1 = Duik.PseudoEffect.ONE_LAYER_IK;

        //add an IK effect on the controller
        var ikCtrl = pe2.apply(ctrl);

        //the effect on the null of the hand
        var ikEffect = handNull.effect( pe2.matchName);
        var ikHand = clawsNull.effect(pe1.matchName);
        var ikToes = tip.effect(pe1.matchName);
        ikCtrl.name = ikEffect.name;

        //link the properties
        ikCtrl( pe2.props["Side"].index ).setValue( ikEffect( pe2.props["Side"].index ).value );
        var ikEffectProp = new DuAEProperty( ikEffect );
        ikEffectProp.linkProperties(ikCtrl);

        //the IK/FK Switches
        var ikHandProp = new DuAEProperty( ikHand(pe1.props["IK"].index ) );
        var ikGoalProp = new DuAEProperty( ikCtrl(pe2.props["FK"]["End"].index ) );
        var ikToesProp = new DuAEProperty( ikToes(pe1.props["IK"].index) );
        ikHandProp.linkProperties( ikCtrl(pe2.props["IK / FK"].index),true);
        var fkExp = 'if (effect("' + ikHand.name + '")(' + pe1.props["IK"].index + ').value) value;\n';
        fkExp += 'else ';
        fkExp += ikGoalProp.expressionLink(true);
        fkExp += ';';
        ikHand( pe1.props["FK"].index ).expression = fkExp;
        ikToesProp.linkProperties( ikCtrl(pe2.props["IK / FK"].index), true );
        //and re-setup the layers & needed data
        ikCtrl( pe2.props["Data"]["Layers"]["Upper"].index ).setValue( ikEffect( pe2.props["Data"]["Layers"]["Upper"].index ).value );
        ikCtrl( pe2.props["Data"]["Layers"]["Lower"].index ).setValue(ikEffect( pe2.props["Data"]["Layers"]["Lower"].index ).value);
        ikCtrl( pe2.props["Data"]["Layers"]["Goal"].index ).setValue(ikEffect( pe2.props["Data"]["Layers"]["Goal"].index ).value);
        var goalPosProp = new DuAEProperty( ikCtrl( pe2.props["Data"]["Stretch data"]["Goal position"].index  ) );
        var goalWPosProp = new DuAEProperty( ikCtrl( pe2.props["Data"]["Stretch data"]["Goal world position"].index  ) );  
        goalPosProp.pickWhip(ikEffect(pe2.props["Data"]["Stretch data"]["Goal position"].index));
        goalWPosProp.pickWhip(ikEffect(pe2.props["Data"]["Stretch data"]["Goal world position"].index));

        //tiptoe, heel and footroll
        if (type == DuOCO.LimbType.PLANTIGRADE)
        {
            //detect right or left, depending on the toes position
            var right = false;
            if (claws && hand)
            {
                var clawsPos = DuAELayer.getWorldPos(claws);
                var handPos = DuAELayer.getWorldPos(hand);
                right = (clawsPos[0] - handPos[0]) > 0;
            }
            
            var peFR = Duik.PseudoEffect.FOOT_ROLL;
            var handCtrl = peFR.apply(ctrl);
            tip.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(" + peFR.props["Tiptoe"].index + ");";
            var op  = right ? "<" : ">";
            palm.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(" + peFR.props["Heel"].index + ");\n" +
                "var roll = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(" + peFR.props["Foot roll"].index + ");\n" +
                "roll " + op + " 0 ? roll+ctrl : ctrl;";
            op = right ? ">" : "<";
            clawsNull.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(" + peFR.props["Foot roll"].index + ");\n" +
                "ctrl " + op + " 0 ? ctrl : 0;";
            var ikToesEffect = tip.effect(pe1.matchName);
            ikToesEffect( pe1.props["FK"].index ).expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(" + peFR.props["Toes"].index + ");";
        }
        else if (type == DuOCO.LimbType.DIGITIGRADE)
        {
            var pe = Duik.PseudoEffect.DIGI_FOOT_ROLL;
            var handCtrl = pe.apply(ctrl);
            tip.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(1);";
            clawsNull.transform.rotation.expression = DuAEExpression.Id.FOOT_ROLL + "\n" +
                "var ctrl = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(3);\n" +
                "var tiptoe = thisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(1);\n" +
                "ctrl-tiptoe;";
            tip.effect(pe1.matchName)( pe1.props["FK"].index ).expression = DuAEExpression.Id.FOOT_ROLL + "\nthisComp.layer(\"" + ctrl.name + "\").effect(\"" + handCtrl.name + "\")(2);";
        }

        //hide and lock
        clawsNull.enabled = false;
        clawsNull.shy = true;
        clawsNull.locked = true;
        handNull.enabled = false;
        handNull.shy = true;
        handNull.locked = true;
    }
    else
    {
        if (hand)
        {
            if (humerus && radius) Duik.Constraint.twoLayerIK(humerus,radius,hand,ctrl, false);
            else if (humerus) Duik.Constraint.oneLayerIK(humerus,hand,ctrl, false);
            else if (radius) Duik.Constraint.oneLayerIK(radius,hand,ctrl, false);
            else if (claws) Duik.Constraint.oneLayerIK(hand,claws,ctrl, false);
            else if (tip) Duik.Constraint.oneLayerIK(hand,tip,ctrl, false);
        }
        else if (claws)
        {
            if (humerus && radius) Duik.Constraint.twoLayerIK(humerus,radius,claws,ctrl, false);
            else if (humerus) Duik.Constraint.oneLayerIK(humerus,claws,ctrl, false);
            else if (radius) Duik.Constraint.oneLayerIK(radius,claws,ctrl, false);
            else if (tip) Duik.Constraint.oneLayerIK(claws,tip,ctrl, false);
        }
        else if (tip)
        {
            if (humerus && radius) Duik.Constraint.twoLayerIK(humerus,radius,tip,ctrl, false);
            else if (humerus) Duik.Constraint.oneLayerIK(humerus,tip,ctrl, false);
            else if (radius) Duik.Constraint.oneLayerIK(radius,tip,ctrl, false);
        }
        else if (palm)
        {
            if (humerus && radius) Duik.Constraint.twoLayerIK(humerus,radius,palm,ctrl, false);
            else if (humerus) Duik.Constraint.oneLayerIK(humerus,palm,ctrl, false);
            else if (radius) Duik.Constraint.oneLayerIK(radius,palm,ctrl, false);
        }
        else if (humerus && radius) Duik.Constraint.oneLayerIK(humerus,radius,ctrl, false);
    }

    // Rig shoulder
    if (shoulder)
    {
        Duik.Rig.shoulder(shoulder, ctrl);
        // If hominoid, no auto-position
        if (type == DuOCO.LimbType.HOMINOID)
        {
            var pe = Duik.PseudoEffect.SHOULDER;
            var shoulderCtrl = DuAELayer.lastEffect( ctrl, pe.matchName );
            shoulderCtrl( pe.props["Auto"].index ).setValue(0);
        }
    }
}

/**
 * Rigs a fin.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 * @param {Object} [parentSpine] An object with two Arrays: bones and controllers.
 * @param {Layer[]|DuList.<Layer>} [customControllers] - Existing custom controllers to use
 * @returns {Layer[]} The controllers of the tail
 */
Duik.Rig.fin = function( layers, parentSpine, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return [];

    if (typeof parentSpine === 'undefined')
    {
        parentSpine = {};
        parentSpine.bones = [];
        parentSpine.controllers = [];
    }

    DuScriptUI.progressBar.stg(DuScriptUI.String.FIN);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // expected
    var arm = null;
    var fins = [];

    var side = DuOCO.Side.NONE;
    var type = DuOCO.LimbType.CUSTOM;

    // get'em all
    layers.do(function(layer) {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );

        if (bone == DuOCO.Bone.FIN) arm = layer;
        else if (bone == DuOCO.Bone.FIN_FISHBONE) fins.push( layer );

        if ( side == DuOCO.Side.NONE ) side = Duik.Layer.side(layer);
        if ( type == DuOCO.LimbType.CUSTOM ) type = DuAETag.getValue( layer, DuAETag.Key.DUIK_LIMB_TYPE, DuAETag.Type.STRING, tag );
    });

    var nfins = fins.length;

    // unparent & reset transform
    if (arm)
    {
        arm.parent = null;
        Duik.Bone.resetTransform(arm);
    }
    for (var i = 0; i < nfins; i++)
    {
        var f = fins[i];
        f.parent = null;
        Duik.Bone.resetTransform(f);
    }

    // adjust/fix what we got! We're very friendly...
    // we need an arm
    if (!arm)
    {
        if (fins.length == 1) arm = fins.pop();
        else if (fins.length > 0)
        {
            // Create a null at the average position
            var pos = [0,0];
            for(var i = 0; i<nfins; i++)
            {
                // they've been unparented, just take the position
                pos += fins[i].transform.position;
            }
            pos /= nfins;
            arm = DuAEComp.addNull(comp, 20);
            arm.transform.position.setValue( pos );
            Duik.Layer.copyAttributes( arm, fins[0], Duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( DuScriptUI.String.FIN, arm );
        }
    }

    DuScriptUI.progressBar.msg('Creating controllers...');

    var fkNull = DuAEComp.addNull(comp, 20, arm);
    Duik.Layer.copyAttributes( fkNull, arm, Duik.Layer.Type.NULL );
    var ctrl = Duik.Controller.getCreate(arm, Duik.Controller.Type.FIN, customControllers);

    DuScriptUI.progressBar.msg('Parenting...');

    // We also need to get the max distance between a fin and the arm
    var maxFinDistance = 0;
    for(var i = 0; i<nfins; i++)
    {
        var f = fins[i];
        f.parent = arm;
        var d = DuMath.length( [0,0], f.transform.position.value );
        if (d > maxFinDistance) maxFinDistance = d;
    }

    // arm's been unparented, just use the position
    var spineAttach = Duik.Rig.getSpineAttach( arm.transform.position.value, parentSpine.bones);
    arm.parent = spineAttach;
    ctrl.parent = spineAttach;
    fkNull.parent = spineAttach;

    // Rig!
    DuScriptUI.progressBar.msg('Rigging...');

    // Add control
    var pe = Duik.PseudoEffect.FIN;
    var ctrlEffect = pe.apply( ctrl );
    var ctrlInfo = new DuAEProperty( ctrlEffect );
    ctrlEffect.name = DuScriptUI.String.FIN;

    // FK Control for each fin
    var peFK = Duik.PseudoEffect.FK;

    for(var i = 0; i<nfins; i++)
    {
        var f = fins[i];
        Duik.Constraint.fk( [arm, f], fkNull );

        // Remove arm ctrl duplicate
        if (i != 0)
        {
            var armEffect = DuAELayer.lastEffect( fkNull, 'ADBE Angle Control', 1);
            if (armEffect) armEffect.remove();
        }

        // Copy fishbone control
        var boneEffect = DuAELayer.lastEffect( fkNull, 'ADBE Angle Control');
        if (boneEffect)
        {
            var boneCtrl = ctrl('ADBE Effect Parade').addProperty('ADBE Angle Control');
            boneCtrl.name = boneEffect.name;
            // link
            boneEffect(1).expression = [ DuAEExpression.Id.AUTORIG_FIN,
                'thisComp.layer("' + ctrl.name + '").effect("' + boneCtrl.name + '")(1).value;'
            ].join('\n');

            // fix invalid object (another AE workaround)
            ctrlEffect = ctrlInfo.getProperty();
        }

        // Link Resistance
        var fkEffect = DuAELayer.lastEffect( fkNull, peFK.matchName );
        fkEffect( peFK.props["Resistance"].index ).expression = [ DuAEExpression.Id.AUTORIG_FIN,
            'var fx = thisComp.layer("' + ctrl.name + '").effect("' + ctrlEffect.name + '");',
            'var result = fx(' + pe.props["Overlap"]["Resistance"].index + ').value;',
            'var rdm = fx(' + pe.props["Overlap"]["Randomness"].index + ').value;',
            'seedRandom(0, true);',
            DuAEExpression.Library.get(['addNoise']),
            'result = addNoise( result, rdm );',
            'result;'
        ].join('\n');

        // need the layer position for the ratio
        var lpos = f.transform.position.value;

        // Link Curve
        fkEffect( peFK.props["Curve"].index ).expression = [ DuAEExpression.Id.AUTORIG_FIN,
            'var fx = thisComp.layer("' + ctrl.name + '").effect("' + ctrlEffect.name + '");',
            'var curve = fx(' + pe.props["Curve"].index + ').value;',
            'var maxDistance = ' + maxFinDistance + ';',
            'var layerPos = ' + lpos.toSource() + ';',
            'var d = length( [0,0], layerPos);',
            'linear(d, 0, maxDistance, curve*.2, curve);'
        ].join('\n');

        // Link Flexibility
        fkEffect( peFK.props["Flexibility"].index ).expression = [ DuAEExpression.Id.AUTORIG_FIN,
            'var fx = thisComp.layer("' + ctrl.name + '").effect("' + ctrlEffect.name + '");',
            'var flexMax = fx(' + pe.props["Overlap"]["Max. flexibility"].index + ').value;',
            'var flexMin = fx(' + pe.props["Overlap"]["Min. flexibility"].index + ').value;',
            'var rdm = fx(' + pe.props["Overlap"]["Randomness"].index + ').value;',
            'var maxDistance = ' + maxFinDistance + ';',
            'var layerPos = ' + lpos.toSource() + ';',
            'var d = length( [0,0], layerPos);',
            'seedRandom(0, true);',
            DuAEExpression.Library.get(['addNoise']),
            'var result = linear(d, 0, maxDistance, flexMin, flexMax);',
            'result = addNoise( result, rdm );',
            'result;'
        ].join('\n');
    }

    // Link rotation
    var fkRot = new DuAEProperty( fkNull.transform.rotation );
    fkRot.pickWhip( ctrl.transform.rotation );
}

Duik.Rig.fishSpines = function( layers, fishIK, customControllers )
{
    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return [];
    fishIK = def(fishIK, false);

    var fs = {};
    fs.bones = [];
    fs.controllers = [];

    DuScriptUI.progressBar.stg(DuScriptUI.String.FISH_SPINE);
    DuScriptUI.progressBar.hit(1, 'Sorting bones...');

    customControllers = new DuList(customControllers);

    var comp = layers.first().containingComp;

    // expected
    var head = null;
    var spine = [];
    var tip = null;
    var headTip = null;

    // get'em all
    layers.do(function(layer) {
        var tag = DuAETag.get( layer );
        var bone = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_TYPE, DuAETag.Type.STRING, tag );
        var boneIndex = DuAETag.getValue( layer, DuAETag.Key.DUIK_BONE_INDEX, DuAETag.Type.INT, tag );

        if (bone == DuOCO.Bone.SKULL) head = layer;
        else if (bone == DuOCO.Bone.SKULL_TIP) headTip = layer;
        else if (bone == DuOCO.Bone.TIP) tip = layer;
        else
        {
            var b = layer;
            b.i = boneIndex;
            spine.push(b);
        }
    });

    // Sort
    // a sorter for spine and neck
	function sortBones(a,b)
	{
		return a.i - b.i;
	}

    spine.sort(sortBones);

    DuScriptUI.progressBar.msg('Creating controllers...');

    //unparent & reset transform
    for (var i=0, num = spine.length ; i < num ; i++ )
    {
        var s = spine[i];
        s.parent = null;
        Duik.Bone.resetTransform(s);
    }
    if (head)
    {
        head.parent = null;
        Duik.Bone.resetTransform(head);
    }
    if (tip)
    {
        tip.parent = null;
        Duik.Bone.resetTransform(tip);
    }
    if (headTip)
    {
        headTip.parent = null;
        Duik.Bone.resetTransform(headTip);
    }

    // adjust/fix what we got! We're very friendly...
    // we need a head
    if(!head)
    {
        if (spine.length > 0)
        {
            head = DuAEComp.addNull( comp, 20, spine[0] );
            Duik.Layer.copyAttributes( head, spine[0], duik.Layer.Type.NULL );
            Duik.Layer.setLimbName( DuScriptUI.String.HEAD, head );
        }
        else return fs;
    }
    // spine
    if(spine.length == 0 && tip)
    {
        spine = [tip];
        tip = null;
    }
     
    DuScriptUI.progressBar.msg('Creating controllers...');

    if (spine.length == 0)
    {
        var ctrl = Duik.Controller.getCreate(head, Duik.Controller.Type.HEAD, customControllers );
        head.parent = ctrl;
        if(headTip) headTip.parent = head;
        return fs;
    }

    var bodyCtrl = Duik.Controller.getCreate(spine[0], Duik.Controller.Type.HIPS, customControllers );
    var headCtrl = Duik.Controller.getCreate(head, Duik.Controller.Type.HEAD, customControllers );

    DuScriptUI.progressBar.msg('Parenting...');

    headCtrl.parent = bodyCtrl;

    head.parent = spine[0];
    if (headTip) headTip.parent = head;

    spine[0].parent = bodyCtrl;
    for (var i = 1, n = spine.length; i < n; i++)
    {
        spine[i].parent = spine[i-1];
    }
    if( tip ) tip.parent = spine[spine.length-1];

    DuScriptUI.progressBar.msg('Rigging...');

    // Head FK
    Duik.Constraint.simpleFK( head, headCtrl );

    // Single layer tail
    if (spine.length == 1)
    {
        spine[0].parent = bodyCtrl;
        fs.bones = spine;
        fs.controllers = bodyCtrl;
        return fs;
    }

    // Tail IK
    if (fishIK)
    {
        // we need a tip
        if (!tip) tip = spine.pop();

        var tailCtrl = Duik.Controller.getCreate( tip, Duik.Controller.Type.TAIL, customControllers);

        if (spine.length > 1)
        {
            var ctrls = Duik.Constraint.bezierIK( spine, tip, tailCtrl, false);
            //parent
            ctrls[0].parent = bodyCtrl;
            ctrls[1].parent = bodyCtrl;
            spine[0].parent = bodyCtrl;
            fs.controllers = ctrls;
        }
        else
        {
            Duik.Constraint.oneLayerIK( spine[0], tip, tailCtrl, false);
            //parent
            tailCtrl.parent = bodyCtrl;
            spine[0].parent = bodyCtrl;
        }
        fs.bones = spine;
        fs.controllers.push(tailCtrl);
        return fs;
    }

    // Tail FK
    spine.push(tip);

    var reversedSpine = [];
    for (var i = spine.length -1; i >= 0; i--) reversedSpine.push(spine[i] );

    Duik.Constraint.fk( reversedSpine, bodyCtrl );
    //parent
    spine[0].parent = bodyCtrl;
    // disable parent rotation inheritance
    var pe = Duik.PseudoEffect.FK;
    bodyCtrl.effect( pe.matchName )( pe.props["Parent rotation"].index).setValue(0);

    fs.bones = spine;
    fs.controllers.push(bodyCtrl);
    return fs;
}