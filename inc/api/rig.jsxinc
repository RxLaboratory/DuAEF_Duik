/**
 * (Auto)Rigging tools.
 * @namespace
 */
Duik.Rig = {};

/**
 * The list of (auto)rigging functions
 */
Duik.CmdLib['Auto-rig'] = [];


Duik.CmdLib['Auto-rig']['Rig'] = 'Duik.Rig.auto()';
/**
 * The auto-rig for everything
 * @param {Boolean} [bakeBones=true] Wether to bake the appearance of rigged bones to improve performance or not.
 * @param {Boolean} [tailIK=false] Set to true if you prefer using BÃ©zier IK than FK with overlap for tails and other chains consisting of more than 3 layers.
 * @param {Duik.Constraint.IKType} [longChainMode=Duik.Constraint.IKType.ONE_TWO] The type of IK to use with custom 3-layer chains.
 * @param {Layer[]|DuList.<Layer>} [layers] - The layers to rig
 */
Duik.Rig.auto = function ( bakeBones, tailIK, longChainMode, layers )
{
    bakeBones = def( bakeBones, true );

    layers = def(layers, DuAEComp.unselectLayers() );
    layers = new DuList(layers);
    if( layers.isEmpty() ) return;

    //check if there are 3D Layers
    for (var i = 0, n = layers.length; i < n; i++)
    {
        if (layers[i].threeDLayer)
        {
            alert( DuScriptUI.String.NO_3D + '\n' + DuScriptUI.String.CANNOT_RIG);
            return;
        }
    }

    DuAE.beginUndoGroup( DuScriptUI.String.AUTORIG, false );
    DuAEProject.setProgressMode( true );

    if (bakeBones) Duik.Bone.bake(layers);

    DuAEProject.setProgressMode( false );
    DuAE.endUndoGroup( DuScriptUI.String.AUTORIG );
}