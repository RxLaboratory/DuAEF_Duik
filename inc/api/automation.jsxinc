/**
 * The lazy animator's toolkit.
 * @namespace
 */
Duik.Automation = {};

/**
 * The list of automation functions
 */
Duik.CmdLib['Automation'] = [];

Duik.CmdLib['Automation']["NLA"] = "Duik.Automation.setupNLA()";
/**
 * Sets up a non-linear animation comp.
 * @param {CompItem} [comp] The composition to set up. The active composition if omitted.
 * @param {Boolean} [selectedProps=true] Use only currently selected properties if true, all properties (according to the other options) if false.
 * @param {Boolean} [transformProps=true] If true, filters only properties in the transform group of the layers. Ignored if selectedProps is true.
 * @param {Boolean} [effectProps=false] If true, filters only properties in effects. Ignored if selectedProps is true.
 * @param {Boolean} [layerTypes=[Duik.Layer.Type.BONE, Duik.Layer.Type.CONTROLLER]] The types of layer to setup; if empty, will setup all layers.
 * @param {PropertyBase[]|DuList.<PropertyBase>} [props] A list of properties to set up. In case this parameter is provided, all other parameters are ignored.
 */
Duik.Automation.setupNLA = function ( comp, selectedProps, transformProps, effectProps, layerTypes, props )
{
    comp = def( comp, DuAEProject.getActiveComp() );

    if (typeof props === 'undefined')
    {
        selectedProps = def( selectedProps, true );
        transformProps = def( transformProps, true );
        effectProps = def( effectProps, false );
        layerTypes = def( layerTypes, [Duik.Layer.Type.BONE, Duik.Layer.Type.CONTROLLER] );

        // List properties according to the filters

        if (selectedProps)
        {
            props = DuAEComp.getSelectedProps();
            if (props.length == 0) selectedProps = false;
        }

        if (!selectedProps)
        {
            // Get the layers
            var layers = [];
            props = [];
            if (layerTypes.length > 0)
            {
                for (var i = 1, n = comp.numLayers; i <= n; i++)
                {
                    var l = comp.layer(i);
                    for (var j = 0, nt = layerTypes.length; j < nt; j++)
                    {
                        if (Duik.Layer.isType(l, layerTypes[j]))
                        {
                            layers.push(l);
                            break;
                        }
                    }
                }
            }
            else layers = comp.layers;
            layers = new DuList(layers);
            layers.do( function(layer)
            {
                if ( transformProps ) props.push( new DuAEProperty( layer.transform ) );
                if ( effectProps ) props.push( new DuAEProperty( layer.property('ADBE Effects Parade') ) );
            });
        }
    }

    props = new DuList(props);
    if (props.length() == 0) return;

    DuAE.beginUndoGroup(DuScriptUI.String.NLA, false);

    var compName = comp.name;

    // Create folderitem NLA::compName
    var parentFolder = comp.parentFolder;
    var nlaFolder = app.project.items.addFolder( DuScriptUI.String.NLA_SHORT + '::' + compName );
    nlaFolder.parentFolder = parentFolder;
    comp.parentFolder = nlaFolder;

    // Duplicate comp twice
    // One will be NLA.Render::compName
    oComp = comp.duplicate();
    oComp.name = DuScriptUI.String.NLA_SHORT + '.' + DuScriptUI.String.ORIGINAL + '::' + compName;
    // Other NLA.Clip::compName
    clipComp = comp.duplicate();
    clipComp.name = DuScriptUI.String.NLA_SHORT + '.' + DuScriptUI.String.CLIP + '::' + compName;
    // and keep NLA.Original::compName
    comp.name = DuScriptUI.String.NLA_SHORT + '.' + DuScriptUI.String.RENDER + '::' + compName;
    // Create NLA.Edit::compName
    editComp = nlaFolder.items.addComp(
        DuScriptUI.String.NLA_SHORT + '.' + DuScriptUI.String.EDIT + '::' + compName,
        comp.width, comp.height, comp.pixelAspect, comp.duration, comp.frameRate)

    // Add NLA.Clip + time remap + looper, and a keyframe on the opacity
    clipPrecomp = editComp.layers.add( clipComp );
    clipPrecomp.enabled = false;
    clipPrecomp.guideLayer = false;

    // Add NLA.Render
    editComp.layers.add( comp );

    // Setup properties in NLA.Render

    var exp = [ DuAEExpression.Id.NLA,
        'var editComp = comp("' + editComp.name + '");',
        '',
        'var result = value;',
        'var weights = 0;',
        '',
        DuAEExpression.Library.get(['getSameProp','isZero']),
        '',
        'for (var i = 1, n = editComp.numLayers; i <= n; i++)',
        '{',
        '	var l = editComp.layer(i);',
        '	if (l.name == thisComp.name) continue;',
        '   if (l.name.indexOf(\'NLA.Clip::\') != 0) continue;',
        '	if (time >= l.inPoint && time < l.outPoint)',
        '	{',
        '	    var precomp = l.source;',
        '	    try { var c = precomp.layer(thisLayer.name); }',
        '        catch(e) { continue; }',
        '        var weight = l.opacity.value/100;',
        '        var t = time;',
        '        try { t = l.timeRemap.value; }',
        '        catch(e) { t = time - l.startTime; }',
        '        var dif = getSameProp(c).valueAtTime(t) - value;',
        '        if (isZero(dif)) continue;',
        '        weights += weight;',
        '        result += dif * weight;',
        '	}',
        '}',
        'result;'
	].join('\n');

    props.do( function(prop)
    {
        prop.setExpression(exp);
    });

    // Open edit comp
    editComp.openInViewer();

    DuAE.endUndoGroup(DuScriptUI.String.NLA);

}

Duik.CmdLib['Automation']["NLA Clip"] = "Duik.Automation.addNLAClip()";
/**
 * Creates a clip and adds it to the NLA
 * @param {CompItem} [nlaComp] A comp belonging to an NLA, the active comp if omitted.
 * @returns {int} Success code: 1 if the clip could be created, 0 if the original comp is not found, -1 if the NLA is invalid/not found
 */
Duik.Automation.addNLAClip = function ( nlaComp )
{
    nlaComp = def( nlaComp, DuAEProject.getActiveComp() );
    if (!nlaComp) return -1;

    var nlaFolder = nlaComp.parentFolder;
    if (nlaFolder.name.indexOf('NLA::') != 0) return -1;
    
    var nlaName = nlaFolder.name.replace('NLA::', '');

    // Get the original comp
    var originalComp = null;
    var editComp = null;
    for (var i = 1, n = nlaFolder.numItems; i <= n; i++)
    {
        var c = nlaFolder.item(i);
        if (c.name.indexOf('NLA.Original::') == 0)
        {
            originalComp = c;
        }
        if (c.name.indexOf('NLA.Edit::') == 0)
        {
            editComp = c;
        }
    }

    if (!originalComp) return 0;

    // Duplicate
    var newClip = originalComp.duplicate();

    // Rename
    newClip.name = originalComp.name.replace('NLA.Original', 'NLA.Clip') + '-newClip';

    // Add to edit
    if (editComp)
    {
        var clipLayer = editComp.layers.add( newClip );
        clipLayer.enabled = false;
        if (editComp.numLayers >= 2) clipLayer.moveAfter( editComp.layer(2) );
    }

    // Open clip
    newClip.openInViewer();

    return 1;
}

/**
 * Adds a loop expression and pseudo effect with more options than the loopOut and loopIn expressions.
 * @param {PropertyBase[]|DuList.<PropertyBase>|PropertyBase} [props] The properties to loop. The selected properties in the active comp if omitted.
 * @param {PropertyGroup} [effect] The pseudo effect to use if it already exists.
 * @returns {PropertyGroup} The pseudo-effect
 */
Duik.Automation.looper = function ( props, effect )
{
    effect = Duik.Animation.interpolator( props, effect );

    var i = Duik.PseudoEffect.INTERPOLATOR.props;

    // Set interpolation to none
    effect( i['Type'].index ).setValue(1);
    // Set cycles
    effect( i['Extrapolation and loop']['In']['Type'].index ).setValue( 4 );
    effect( i['Extrapolation and loop']['Out']['Type'].index ).setValue( 4 );

    return effect;
}