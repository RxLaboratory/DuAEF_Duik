

/**
 * Bone related tools.
 * @namespace
 */
Duik.Bone = {};

Duik.Bone.functions = [];

Duik.Bone.functions.push( { name:"Custom Bones", fn:"Duik.Bone.custom()" } );
/**
 * Creates a custom limb.
 * @param {int} [num=2] - The number of bones in case nothing is selected in the comp. Otherwize, a bone is created for each selected path vertex/puppet pin/layer.
 * @param {string} [name='Limb'] - The name of the limb
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new armature
 * @param {boolean} [randomColor=false] - Wether pick a random color for the new armature
 */
Duik.Bone.customLimb = function ( num, name, characterName, forceLink )
{
    // get current comp
    var comp = DuAEProject.getActiveComp();
    if (!comp) return;

    num = def( num, 2);
    forceLink = def( forceLink, false);
    name = def( name, 'Limb');
    characterName = def( characterName, '');

    DuAE.beginUndoGroup("Create custom armature");
    DuAEProject.setProgressMode(true);

    var layers = DuAEComp.getSelectedLayers();

    // If there's no selected layer, just create
    if( layers.length == 0 )
    {
        var doc = DuOCODoc.fromComp( characterName, comp );
        var limb = doc.newLimb();
        limb.newArmature( num, name );
        doc.toComp( comp );
        DuAEProject.setProgressMode(false);
        DuAE.endUndoGroup();
        return;
    }
/*
    // if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    
    var layerToRemove = null;
    var linkPath = def(DuESF.scriptSettings.data.armatureLinkPaths, false);
    if (forceLink) linkPath = !linkPath;
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEShapeLayer.isSingleShape(l)) layerToRemove = l;
    }


    // For each selected layer
    var it = new DuList( layers );
    it.do( function( layer )
    {
        //get paths
        var props = DuAELayer.getSelectedProps( layer, DuAEProperty.isPathProperty );

        if ( props.length > 0 )
        {
            // Create a limb for each path
            for (var i = 0, n = props.length; i < n; i++)
            {
                var path = props[i];
                // create the OCODoc
                var doc = DuOCODoc.fromComp( characterName, comp );
                var limb = doc.limbFromPath( name, path );
            }
            
            
            
            propsByLayer.push( props );
            ok = true;
            return;
        }

        //puppet pins
        props = DuAELayer.getSelectedProps( layer, "ADBE FreePin3 PosPin Atom" );
        if ( props.length > 0 )
        {
            propsByLayer.push( props );
            return;
        }

        //puppet effect
        props = DuAELayer.getSelectedProps( layer, "ADBE FreePin3" );
        if ( props.length > 0 )
        {
            propsByLayer.push( props );
            return;
        }
    }


*/

}