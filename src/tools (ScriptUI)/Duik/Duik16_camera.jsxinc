function setCurrentCameraPanel(panel)
{
	if (panel == undefined) panel = 0;

	ui_cameraMainGroup.visible = panel == 0;
	ui_tvpCameraOptionsGroup.visible = panel == 1;
}

function initCameraUI()
{
	setCurrentCameraPanel(0);
}

//=========== EVENTS =============

function ui_2dCameraButton_clicked()
{

	app.beginUndoGroup('Duik | ' + "2D Camera");

	DuAEF.Duik.Camera.create2DCam();

	app.endUndoGroup();

}

function ui_cameraRigButton_clicked()
{
	var layers = DuAEF.DuAE.Comp.unselectLayers();
	var numLayers = layers.length;
	if (numLayers == 0) return;

	app.beginUndoGroup('Duik | ' + "Camera rig");

	var it = new Iterator(layers);
	it.do(function (layer)
	{
		if (layer instanceof CameraLayer)
		{
			DuAEF.Duik.Camera.rigCamera(layer);
		}
	});

	app.endUndoGroup();
}

function ui_zLinkButton_clicked()
{
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if(!comp) return;
	var layers = comp.selectedLayers;
	if (layers.length  == 0) return;

	app.beginUndoGroup('Duik | ' + "Toggle Scale Z-Link");

	DuAEF.Duik.Camera.toggleScaleZLink(layers);

	app.endUndoGroup();
}

function ui_tvpCameraValidButton_clicked()
{
	var camFile = File.openDialog("Choose the camera file you want to import",'TVP cam:*.cpt,All files:*.*',false);
	if (!camFile) return;

	app.beginUndoGroup('Duik - ' + "Import TVPaint Camera");

	DuAEF.Duik.Camera.importTVPaintCamera(camFile,undefined,ui_tvpCameraLayerSelector.index,ui_tvpCameraParentButton.checked,ui_tvpCameraMethodSelector.index);

	app.endUndoGroup();
	setCurrentCameraPanel(0);
}

function ui_frameButton_clicked()
{
	app.beginUndoGroup('Duik | ' + "Framing Guides");
	DuAEF.Duik.Camera.addFrame();
	app.endUndoGroup();
}

//============ UI ===============

var ui_cameraGroup = DuAEF.DuScriptUI.addGroup(ui_mainGroup,'stack');

var ui_cameraMainGroup = DuAEF.DuScriptUI.addGroup(ui_cameraGroup,'column');
if (settings.data.uiMode != 2) DuAEF.DuScriptUI.addSeparator(ui_cameraMainGroup,"Camera");

var ui_cameraRigButton = DuAEF.DuScriptUI.addImageButton(ui_cameraMainGroup,"Camera rig",DuAEF.DuBinary.toFile(w32_camerarig_l),"Create animation controllers for a camera.",DuAEF.DuBinary.toFile(w32_camerarig_r));
var ui_zLinkButton = DuAEF.DuScriptUI.addImageButton(ui_cameraMainGroup,"Scale Z-link",DuAEF.DuBinary.toFile(w32_zlink_l),"Links the distance of the layer from the camera to its scale, so its apparent size won't change.",DuAEF.DuBinary.toFile(w32_zlink_r));
var ui_2dCameraButton = DuAEF.DuScriptUI.addImageButton(ui_cameraMainGroup,"2D camera",DuAEF.DuBinary.toFile(w32_2dcamera_l),"Creates multiplane controllers to use as a 2D camera.",DuAEF.DuBinary.toFile(w32_2dcamera_r));
var ui_frameButton = DuAEF.DuScriptUI.addImageButton(ui_cameraMainGroup,"Framing guides",DuAEF.DuBinary.toFile(w32_frame_l),"Adds handy grid and guides to help your framing and image composition.",DuAEF.DuBinary.toFile(w32_frame_r));
ui_frameButton.setHelp("Framing Guides",framingguidesHelp,'https://github.com/Rainbox-dev/DuAEF_Duik/wiki/Duframe');
var ui_tvpCameraGroup = DuAEF.DuScriptUI.addGroup(ui_cameraMainGroup,'row');
var ui_tvpCameraButton = DuAEF.DuScriptUI.addImageButton(ui_tvpCameraGroup,"Import TVPaint cam...",DuAEF.DuBinary.toFile(w32_tvpcam_l),"Imports a camera from TVPaint.",DuAEF.DuBinary.toFile(w32_tvpcam_r));
var ui_tvpCameraOptionsButton = DuAEF.DuScriptUI.addImageButton(ui_tvpCameraGroup,'',DuAEF.DuBinary.toFile(w14_plus_m),"TVPaint Camera options",DuAEF.DuBinary.toFile(w14_plus_r));
ui_tvpCameraOptionsButton.alignment = ['right','center'];

//TVPaint
var ui_tvpCameraOptionsGroup = DuAEF.DuScriptUI.addGroup(ui_cameraGroup,'column');
if (settings.data.uiMode != 2) DuAEF.DuScriptUI.addSeparator(ui_tvpCameraOptionsGroup,"TVPaint Camera");
var ui_tvpCameraLayerSelector = DuAEF.DuScriptUI.addSelector(ui_tvpCameraOptionsGroup);
ui_tvpCameraLayerSelector.addButton("Create a controller",DuAEF.DuBinary.toFile(w32_createcam_l),"Creates a controller for the camera",DuAEF.DuBinary.toFile(w32_createcam_r));
ui_tvpCameraLayerSelector.addButton("Precompose layers",DuAEF.DuBinary.toFile(w32_precompose_l),"Precomposes the layers and animates the precomposition",DuAEF.DuBinary.toFile(w32_precompose_r));
ui_tvpCameraLayerSelector.addButton("Use selected layer",DuAEF.DuBinary.toFile(w32_selectcam_l),"Animates the selected layer",DuAEF.DuBinary.toFile(w32_selectcam_r));
ui_tvpCameraLayerSelector.setCurrentIndex(0);
var ui_tvpCameraMethodSelector = DuAEF.DuScriptUI.addSelector(ui_tvpCameraOptionsGroup);
ui_tvpCameraMethodSelector.addButton("Animate position",DuAEF.DuBinary.toFile(w32_pos_l),"Animates the position of the layer",DuAEF.DuBinary.toFile(w32_pos_r));
ui_tvpCameraMethodSelector.addButton("Animate anchor point",DuAEF.DuBinary.toFile(w32_moveanchor_l),"Animates the anchor point of the layer (mimics TVPaint Camera)",DuAEF.DuBinary.toFile(w32_moveanchor_r));
ui_tvpCameraMethodSelector.setCurrentIndex(0);
var ui_tvpCameraParentButton = DuAEF.DuScriptUI.addImageCheckBox(ui_tvpCameraOptionsGroup,"Auto-parent layers",DuAEF.DuBinary.toFile(w25_parenttocam_l),"Automatically parents the layers to the camera",DuAEF.DuBinary.toFile(w25_parenttocam_r));
ui_tvpCameraParentButton.setChecked(true);
var ui_tvpCameraValidGroup = DuAEF.DuScriptUI.addGroup(ui_tvpCameraOptionsGroup);
ui_tvpCameraValidGroup.alignment = ['fill','top'];
var ui_tvpCameraCancelButton = DuAEF.DuScriptUI.addImageButton(ui_tvpCameraValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
var ui_tvpCameraValidButton = DuAEF.DuScriptUI.addImageButton(ui_tvpCameraValidGroup,'Import...',DuAEF.DuBinary.toFile(w25_check_g),"Imports a TVPaint Camera",DuAEF.DuBinary.toFile(w25_check_r));


//=========== INIT =================

setCurrentCameraPanel(0);

//========== CONNECT EVENTS ========

ui_2dCameraButton.onClick = ui_2dCameraButton_clicked;
ui_cameraRigButton.onClick = ui_cameraRigButton_clicked;
ui_zLinkButton.onClick = ui_zLinkButton_clicked;
ui_frameButton.onClick = ui_frameButton_clicked;

ui_tvpCameraOptionsButton.onClick = function (){ setCurrentCameraPanel(1); };
ui_tvpCameraCancelButton.onClick = function (){ setCurrentCameraPanel(0); };
ui_tvpCameraButton.onClick = ui_tvpCameraValidButton.onClick = ui_tvpCameraValidButton_clicked;
