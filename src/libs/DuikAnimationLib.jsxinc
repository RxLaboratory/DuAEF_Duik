/**
	* Animation tools
	* @namespace
	* @memberof DuAEF.Duik
*/
DuAEF.Duik.Animation = {};

/**
	* Resets the position, rotation, and scale of the layer.\n
	* If the layer has a parent, the position will be set to [0,0,0],
	* Else it will be set to the composition center.
	* @param {Layer} layer - The layer
	* @return {AVLayer} The zero, a null
	*/
DuAEF.Duik.Animation.resetPRS = function (layer)
{
	var comp = layer.containingComp;
	//is it 3D?
	var threeD = layer.threeDLayer;
	//has parent ?
	var parent = layer.parent !== null;
	if (threeD)
	{
		var positionValue = parent ? [0,0,0] : [comp.width / 2, comp.height / 2, 0];
		if (layer.transform.position.dimensionsSeparated)
		{
			layer.transform.xPosition.setValue(positionValue[0]);
			layer.transform.yPosition.setValue(positionValue[1]);
			layer.transform.zPosition.setValue(positionValue[2]);
		}
		else 
		{
			layer.transform.position.setValue(positionValue);
		}
		layer.transform.scale.setValue([100,100,100]);
		layer.transform.zRotation.setValue(0);
		layer.transform.xRotation.setValue(0);
		layer.transform.yRotation.setValue(0);
		layer.transform.orientation.setValue([0,0,0]);
	}
	else
	{
		var positionValue = parent ? [0,0] : [comp.width / 2, comp.height / 2];
		if (layer.transform.position.dimensionsSeparated)
		{
			layer.transform.xPosition.setValue(positionValue[0]);
			layer.transform.yPosition.setValue(positionValue[1]);
		}
		else 
		{
			layer.transform.position.setValue(positionValue);
		}
		layer.transform.scale.setValue([100,100]);
		layer.transform.rotation.setValue(0);
	}
}

/**
	* Automatically adjust the best bezier interpolations on the keyframes
	* @param {Property|PropertyInfo} prop - The property containing the keyframes
	* @param {boolean} [easeStart=true] - true to ease the first keyframe, false to set it to linear
	* @param {boolean} [easeEnd=true] - true to ease the last keyframe, false to set it to linear
	* @todo ability to change ease influence (only when velocity is 0?)
	* @todo implement a better multidimensionnal algo
*/
DuAEF.Duik.Animation.smartInterpolation = function (prop,easeStart,easeEnd)
{
	if (prop instanceof PropertyInfo) prop = prop.getProperty();
	if (!prop.canVaryOverTime) return;

	//set all keys to linear
	for (var k=0;k<prop.selectedKeys.length;k++)
	{
		prop.setInterpolationTypeAtKey(prop.selectedKeys[k],KeyframeInterpolationType.LINEAR);
		if (prop.isSpatial) prop.setRovingAtKey(prop.selectedKeys[k],false);
	}

	//smooth!
	for (var k=0;k<prop.selectedKeys.length;k++)
	{
		var key = prop.selectedKeys[k];
		var easeIn = [];
		var easeOut = [];
		//Compute base velocity
		for (var l = 0;l<prop.keyInTemporalEase(key).length;l++)
		{
			var speedIn = prop.keyInTemporalEase(key)[l].speed;
			var speedOut = prop.keyOutTemporalEase(key)[l].speed;
			var speed = 0;

			if ( Math.abs(speedIn) <= Math.abs(speedOut) ) speed = speedIn;
			else speed = speedOut;
			if (( speedIn > 0 && speedOut < 0 ) || ( speedIn < 0 && speedOut > 0 )) speed = 0;
			if (key == prop.numKeys) speed = 0;
			if (key == 1) speed = 0;

			easeIn.push(new KeyframeEase(speed,33));
			easeOut.push(new KeyframeEase(speed, 33));
		}
		prop.setTemporalEaseAtKey(key,easeIn,easeOut);

		//depending on options, remove ease on first and last keyframes
		if (key == prop.numKeys && !easeEnd)
		{
			prop.setInterpolationTypeAtKey(prop.selectedKeys[k],KeyframeInterpolationType.LINEAR);
			if (prop.isSpatial) prop.setRovingAtKey(prop.selectedKeys[k],false);
		}
		if (key == 1 && !easeStart)
		{
			prop.setInterpolationTypeAtKey(prop.selectedKeys[k],KeyframeInterpolationType.LINEAR);
			if (prop.isSpatial) prop.setRovingAtKey(prop.selectedKeys[k],false);
		}
	}

	//Adjust velocities
	for (var k=prop.selectedKeys.length-1;k>=0;k--)
	{
		var key = prop.selectedKeys[k];
		var easeIn = [];
		var easeOut = [];
		if (key < prop.numKeys && key > 1)
		{
			for (var l = 0;l<prop.keyInTemporalEase(key).length;l++)
			{

				var nextSpeed = prop.keyInTemporalEase(key+1)[l].speed;
				var speed = prop.keyOutTemporalEase(key)[l].speed;
				var defaultSpeed = ( prop.valueAtTime(prop.keyTime(key+1),true)-prop.valueAtTime(prop.keyTime(key),true) ) / (prop.keyTime(key+1) - prop.keyTime(key));

				var nextAbsSpeed = Math.abs(nextSpeed);
				var absSpeed = Math.abs(speed);

				var nextDif = nextSpeed - defaultSpeed;
				var dif = speed - defaultSpeed;

				if (speed != 0)
				{
					if (nextAbsSpeed < absSpeed)
					{
						var fix = (1-nextAbsSpeed/absSpeed)*absSpeed;
					}
					else if (nextAbsSpeed != 0)
					{
						var fix = (1-absSpeed/nextAbsSpeed)*absSpeed;
					}

					if (-nextDif > dif) speed += fix;
					else speed -= fix;

				}
				easeIn.push(new KeyframeEase(speed,33));
				easeOut.push(new KeyframeEase(speed, 33));
			}
			prop.setTemporalEaseAtKey(key,easeIn,easeOut);
		}
	}
}

/**
	* Creates a motion trail for the layer
	* @param {CompItem} [comp] - The comp where to create the trails, can be omitted if you provide a layer
	* @param {Layer} [layer] - The layer source of the motion. If not provided, will just create an empty motion trail control
	* @param {ShapeLayer|null} [trailLayer] - An existing shape layer containing the trails
	* @param {float[]|null} [color] - A color for the motion trail. If not provided, random
	* @return {ShapeLayer} The layer containing the motion trail created
*/
DuAEF.Duik.Animation.motionTrail = function (comp,layer,trailLayer,color)
{
	if (comp == undefined && layer == undefined) return;
	if (comp == undefined) comp = layer.containingComp;
	if (color == undefined || color == null) color = DuAEF.DuJS.Color.random();

	//create layer
	if (trailLayer == undefined || trailLayer == null)
	{
		trailLayer = comp.layers.addShape();
		DuAEF.Duik.setDuikMarker(trailLayer,"Motion Trail",DuAEF.Duik.LayerTypes.MOTION_TRAIL);
		trailLayer.name = DuAEF.DuAE.Comp.newUniqueLayerName('Motion Trails',comp);
	}

	//Effect

	var newEffectName = DuAEF.DuAE.Layer.newUniqueEffectName('Motion trail 1',trailLayer);
	//trailLayer.applyPreset(DuAEF.Duik.PseudoEffects.MOTION_TRAIL);
	var effect = DuAEF.DuAE.Layer.addPseudoEffect(trailLayer,DuAEF.Duik.PseudoEffects.MOTION_TRAIL,DuAEF.Duik.PseudoEffectsMatchNames.MOTION_TRAIL);
	effect.name = newEffectName;

	//create shape
	var trailGroup = trailLayer("ADBE Root Vectors Group").addProperty("ADBE Vector Group");
	trailGroup.name = effect.name;
	var trailPath = trailGroup("ADBE Vectors Group").addProperty("ADBE Vector Shape - Group");
	trailPath = trailPath.property("ADBE Vector Shape");
	trailPath.expression = '//Duik.motionTrail\n' +
						'var fx = effect("' + effect.name + '");\n' +
						'var layer = null;\n' +
						'try {layer = fx(1);} catch(e){}\n' +
						'if (layer != null) {\n' +
						'var inFrame = fx(2).value;\n' +
						'var outFrame = fx(3).value;\n' +
						'var method = fx(5).value;\n' +
						'var samples = fx(10).value;\n' +
						'var points = [];\n' +
						'var currentFrame = timeToFrames(time);\n' +
						'if (inFrame > outFrame) inFrame = -inFrame;\n' +
						'else if (inFrame == outFrame) inFrame = -1;\n' +
						'var prevPos = null;\n' +
						'var autoSampleLimit = 1/(20*samples)*(thisComp.width+thisComp.height);\n' +
						'for (var i = currentFrame+outFrame ; i >= currentFrame+inFrame; i--)\n' +
						'{\n' +
						'var t = framesToTime(i);\n' +
						'var pos = layer.toWorld( layer.anchorPoint, t );\n' +
						'var subSamples = 0;\n' +
						'if (method == 2 && prevPos)\n' +
						'{\n' +
						'var step = length(pos,prevPos);\n' +
						'var stepRatio = step/autoSampleLimit;\n' +
						'if (stepRatio > 1) subSamples = Math.floor(stepRatio);\n' +
						'}\n' +
						'else if (method == 3) subSamples = samples;\n' +
						'if (method == 2 || method == 3)\n' +
						'{\n' +
						't = t+thisComp.frameDuration;\n' +
						'for (var j = 0;j < subSamples ; j++)\n' +
						'{\n' +
						't = t-thisComp.frameDuration/subSamples;\n' +
						'var subPos = layer.toWorld( layer.anchorPoint, t );\n' +
						'subPos = subPos - position;\n' +
						'points.push( subPos );\n' +
						'}\n' +
						'}\n' +
						'prevPos = pos;\n' +
						'pos = pos - position;\n' +
						'points.push( pos );\n' +
						'}\n' +
						'createPath(points,[],[], false);\n' +
						'} else value';

	var trailStroke = trailGroup("ADBE Vectors Group").addProperty("ADBE Vector Graphic - Stroke");

	trailStroke('ADBE Vector Stroke Color').expression = '//Duik.motionTrail\n' +
													'var fx = effect("' + effect.name + '");\n' +
													'fx(13);';

	trailStroke('ADBE Vector Stroke Opacity').expression = '//Duik.motionTrail\n' +
													'var fx = effect("' + effect.name + '");\n' +
													'fx(14);';

	trailStroke('ADBE Vector Stroke Width').expression = '//Duik.motionTrail\n' +
													'var fx = effect("' + effect.name + '");\n' +
													'fx(15);';

	//set layer
	if (layer != undefined) effect(1).setValue(layer.index);
	//set color
	effect(13).setValue(color);

	return trailLayer;
}

/**
	* Adds animation exposure controls
	* @param {CompItem} comp - The comp where to create the X-Sheet
	* @param {Property|PropertyInfo} [prop] - The property controlled. If not provided, will add an X-Sheet adjustment layer in the comp.
	* @param {PropertyGroup|null} [effect] - an X-Sheet effect already created to use as a control for the prop
	* @return {PropertyGroup} The effect used to control
*/
DuAEF.Duik.Animation.xSheet = function (comp,prop,effect)
{
	var createLayer = prop == undefined;
	if (effect == undefined) effect = null;
	if (!createLayer)
	{
		if (!(prop instanceof PropertyInfo)) prop = new PropertyInfo(prop);
		if (!prop.riggable) return effect;

		var layer = prop.layer;
		comp = layer.containingComp;

		//add effect
		if (effect == null) effect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.X_SHEET,DuAEF.Duik.PseudoEffectsMatchNames.X_SHEET,prop.getProperty().name + " X-Sheet");
		var effectLink = "var fx = " + DuAEF.DuAE.Property.getExpressionLink(effect,true);
		prop.getProperty().expression = '//Duik.XSheet\n' + effectLink + '\n' +
					'var mode = fx(7);\n' +
					'var frameDuration = fx(14).value;\n' +
					'var xSheet = fx(19);\n' +
					'var result = value;\n' +
					'function getValAtKey(prop)\n' +
					'{\n' +
					'if (prop.numKeys > 0)\n' +
					'{\n' +
					'var k = prop.nearestKey(time);\n' +
					'if (k.time > time && k.index > 1) k = prop.key(k.index-1);\n' +
					'return valueAtTime(k.time);\n' +
					'}\n' +
					'else return value;\n' +
					'}\n' +
					'if (mode == 1)\n' +
					'{\n' +
					'frameDuration = Math.round(frameDuration);\n' +
					'timef = timeToFrames(time);\n' +
					'result = valueAtTime(framesToTime( timef - timef%frameDuration ))\n' +
					'}\n' +
					'else if (mode == 2) result = getValAtKey(xSheet);\n' +
					'else if (mode == 3) result = getValAtKey(thisLayer.marker);\n' +
					'else result = getValAtKey(thisComp.marker);\n' +
					'result;';
	}
	else
	{
		if (comp == undefined) return effect;
		var newName = DuAEF.DuAE.Comp.newUniqueLayerName("X-Sheet",comp);
		var layer = DuAEF.DuAE.Comp.addAdjustmentLayer(comp);
		layer.name = newName;
		DuAEF.Duik.setDuikMarker(layer,"X-Sheet",DuAEF.Duik.LayerTypes.X_SHEET);

		//add Effects
		effect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.X_SHEET,DuAEF.Duik.PseudoEffectsMatchNames.X_SHEET,"X-Sheet");

		var timeWarp = layer('ADBE Effect Parade').addProperty('ADBE Timewarp');
		timeWarp(1).setValue(1);
		timeWarp(2).setValue(2);

		timeWarp(4).expression = '//Duik.XSheet\n' +
										'var fx = effect("X-Sheet")\n' +
										'var mode = fx(7);\n' +
										'var frameDuration = fx(14).value;\n' +
										'var xSheet = fx(19);\n' +
										'var result = timeToFrames(time);\n' +
										'function getValAtKey(prop)\n' +
										'{\n' +
										'if (prop.numKeys > 0)\n' +
										'{\n' +
										'var k = prop.nearestKey(time);\n' +
										'if (k.time > time && k.index > 1) k = prop.key(k.index-1);\n' +
										'return timeToFrames(k.time);\n' +
										'}\n' +
										'else return timeToFrames(time);\n' +
										'}\n' +
										'if (mode == 1)\n' +
										'{\n' +
										'frameDuration = Math.round(frameDuration);\n' +
										'timef = timeToFrames(time);\n' +
										'result = timef - timef%frameDuration;\n' +
										'}\n' +
										'else if (mode == 2) result = getValAtKey(xSheet);\n' +
										'else if (mode == 3) result = getValAtKey(thisLayer.marker);\n' +
										'else result = getValAtKey(thisComp.marker);\n' +
										'result;\n';
	}

	return effect;
}

/**
	* Activate the time remapping on the layers, adding some useful controls or expressions
	* @param {Layer[]|LayerCollection} layers - The layers
	* @param {DuAEF.DuAE.LoopTypes} [loopInType=DuAEF.DuAE.LoopTypes.HOLD] - The type of loopIn
	* @param {DuAEF.DuAE.LoopTypes} [loopOutType=DuAEF.DuAE.LoopTypes.HOLD] - The type of loopOut
*/
DuAEF.Duik.Animation.timeRemap = function (layers, loopInType, loopOutType)
{
	if (typeof layers === 'undefined') return;
	if (typeof loopInType === 'undefined') loopInType = DuAEF.DuAE.LoopTypes.HOLD;
	if (typeof loopInType === 'undefined') loopOutType = DuAEF.DuAE.LoopTypes.HOLD;

	if (layers.length == 0 ) return;
	var it = new Iterator(layers);
	while (!it.atEnd)
	{
		it.next();
		var layer = layers[it.current];
		if (!layer.canSetTimeRemapEnabled) continue;

		var comp = layer.containingComp;
		var lastValueTime = layer.outPoint - comp.frameDuration;

		if (!layer.timeRemapEnabled) layer.timeRemapEnabled = true;

		if (layer.inPoint < lastValueTime)
		{
			layer.timeRemap.setValueAtTime(lastValueTime,layer.timeRemap.valueAtTime(lastValueTime,true));
			layer.timeRemap.removeKey(3);
			layer.timeRemap.setValueAtTime(lastValueTime+comp.frameDuration,0);
		}
		else
		{
			layer.timeRemap.removeKey(2);
		}
		

		if (loopInType != DuAEF.DuAE.LoopTypes.NONE) layer.inPoint = 0;
		if (loopOutType != DuAEF.DuAE.LoopTypes.NONE) layer.outPoint = comp.duration;

		DuAEF.Duik.Automation.loop(layer.timeRemap, undefined, loopInType, loopOutType);
	}
}

/**
	* Snaps the IK position to the FK rotation values
	* @param {Controller|Layer} controller - The IK Controller
*/
DuAEF.Duik.Animation.ik2fk = function (controller)
{
	if (controller instanceof Controller) controller = controller.layer;
	var comp = controller.containingComp;

	var ikType = 2;
	var pseudoEffect = DuAEF.Duik.PseudoEffects.TWOLAYER_IK;
	var ikEffect = controller.property('ADBE Effect Parade').property(pseudoEffect.matchName);
	if (!ikEffect)
	{
		pseudoEffect = DuAEF.Duik.PseudoEffects.THREELAYER_IK;
		ikEffect = controller.property('ADBE Effect Parade').property(pseudoEffect.matchName);
		ikType = 3;
	}

	if (!ikEffect) return;

	//if controller is linked, get data in the parent
	var goalWorldPosition, goal;
	var params = DuAEF.Duik.getDuikMarkerParameters(controller);

	

	if (params[DuAEF.Duik.MarkerParameters.LINKEDTOCOMP])
	{
		var preComp = DuAEF.DuAE.Project.getItemById(params[DuAEF.Duik.MarkerParameters.LINKEDTOCOMP]);
		if (!preComp) return;
		if (!(preComp instanceof CompItem)) return;
		var preCtrl = preComp.layer(params[DuAEF.Duik.MarkerParameters.LINKEDTOLAYER]);
		var preIkEffect, preIKPseudo;
		if (ikType == 2)
		{
			preIKPseudo = DuAEF.Duik.PseudoEffects.TWOLAYER_IK;
			preIkEffect = preCtrl.effect(preIKPseudo.matchName);
		}
		else if (ikType == 3)
		{
			preIKPseudo = DuAEF.Duik.PseudoEffects.THREELAYER_IK;
			preIkEffect = preCtrl.effect(preIKPseudo.matchName);
		}
		if (!preIkEffect) return;

		goal = preIkEffect(preIKPseudo.goalLayer).value;
		if (goal > 0) goal = preComp.layer(goal);
		goalWorldPosition = preIkEffect(preIKPseudo.goalWorldPositionPoint);
	}
	else
	{
		goal = ikEffect(pseudoEffect.goalLayer).value;
		if (goal > 0) goal = comp.layer(goal);
		goalWorldPosition = ikEffect(pseudoEffect.goalWorldPositionPoint);
	}


	//deactivate IK
	var active = ikEffect(pseudoEffect.ikCheckbox).value;
	ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,0);

	var parent = controller.parent;
	controller.parent = null;
	//position
	controller.transform.position.setValueAtTime(comp.time,goalWorldPosition.value);
	controller.parent = parent;

	//look for a goal and adjust
	if (goal)
	{
		var prevRot = goal.transform.rotation.value;
		//Activate to adjust goal
		ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,1);

		controller.transform.rotation.setValueAtTime(comp.time,0);
		//get difference
		var newRot = prevRot - goal.transform.rotation.value;
		controller.transform.rotation.setValueAtTime(comp.time,newRot);
	}

	//check if there is a foot roll
	var footRollEffect = controller.property('ADBE Effect Parade').property(DuAEF.Duik.PseudoEffects.FOOT_ROLL.matchName);
	if (footRollEffect)
	{
		//set it to 0
		footRollEffect(DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle).setValueAtTime(comp.time, - footRollEffect(DuAEF.Duik.PseudoEffects.FOOT_ROLL.toesAngle).value);
	}

	//restore activation
	ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,active);
}

/**
	* Snaps the FK rotation values to the IK position
	* @param {Controller|Layer} controller - The IK Controller
*/
DuAEF.Duik.Animation.fk2ik = function (controller)
{
	if (controller instanceof Controller) controller = controller.layer;
	var comp = controller.containingComp;

	var ikType = 2;
	var pseudoEffect = DuAEF.Duik.PseudoEffects.TWOLAYER_IK;
	var ikEffect = controller.property('ADBE Effect Parade').property(pseudoEffect.matchName);
	if (!ikEffect)
	{
		pseudoEffect = DuAEF.Duik.PseudoEffects.THREELAYER_IK;
		ikEffect = controller.property('ADBE Effect Parade').property(pseudoEffect.matchName);
		ikType = 3;
	}

	if (!ikEffect) return;

	//activate IK
	var active = ikEffect(pseudoEffect.ikCheckbox).value;
	ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,1);

	//get layers if this is a linked controller
	var layer1, layer2, layer3, goal;
	var params = DuAEF.Duik.getDuikMarkerParameters(controller);
	if (params[DuAEF.Duik.MarkerParameters.LINKEDTOCOMP])
	{
		var preComp = DuAEF.DuAE.Project.getItemById(params[DuAEF.Duik.MarkerParameters.LINKEDTOCOMP]);
		if (!preComp) return;
		if (!(preComp instanceof CompItem)) return;
		var preCtrl = preComp.layer(params[DuAEF.Duik.MarkerParameters.LINKEDTOLAYER]);
		var preIkEffect, preIKPseudo;
		if (ikType == 2)
		{
			preIKPseudo = DuAEF.Duik.PseudoEffects.TWOLAYER_IK;
			preIkEffect = preCtrl.effect(preIKPseudo.matchName);
		}
		else if (ikType == 3)
		{
			preIKPseudo = DuAEF.Duik.PseudoEffects.THREELAYER_IK;
			preIkEffect = preCtrl.effect(preIKPseudo.matchName);
		}
		if (!preIkEffect) return;

		layer1 = preIkEffect(preIKPseudo.upperLayer).value;
		layer2 = preIkEffect(preIKPseudo.lowerLayer).value;
		goal = preIkEffect(preIKPseudo.goalLayer).value;
		layer1 = preComp.layer(layer1);
		layer2 = preComp.layer(layer2);
		if (goal > 0) goal = preComp.layer(goal);
		if (ikType == 3)
		{
			layer3 = preIkEffect(preIKPseudo.middleLayer).value;
			layer3 = preComp.layer(layer3);
		}
	}
	else
	{
		layer1 = ikEffect(pseudoEffect.upperLayer).value;
		layer2 = ikEffect(pseudoEffect.lowerLayer).value;
		goal = ikEffect(pseudoEffect.goalLayer).value;
		layer1 = comp.layer(layer1);
		layer2 = comp.layer(layer2);
		if (goal > 0) goal = comp.layer(goal);
		if (ikType == 3)
		{
			layer3 = ikEffect(pseudoEffect.middleLayer).value;
			layer3 = comp.layer(layer3);
		}
	}


	ikEffect(pseudoEffect.upperAngle).setValueAtTime(comp.time,layer1.transform.rotation.value);
	if (ikType == 3) ikEffect(pseudoEffect.middleAngle).setValueAtTime(comp.time,layer3.transform.rotation.value);
	ikEffect(pseudoEffect.lowerAngle).setValueAtTime(comp.time,layer2.transform.rotation.value);

	//look for a goal and adjust
	if (goal)
	{
		var prevRot = goal.transform.rotation.value;
		//Deactivate to adjust goal
		ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,0);

		ikEffect(pseudoEffect.goalAngle).setValueAtTime(comp.time,0);
		//get difference
		var newRot = prevRot - goal.transform.rotation.value;
		ikEffect(pseudoEffect.goalAngle).setValueAtTime(comp.time,newRot);
	}

	var footRollEffect = controller.property('ADBE Effect Parade').property(DuAEF.Duik.PseudoEffects.FOOT_ROLL.matchName);
	if (footRollEffect)
	{
		//adjust the toes
		footRollEffect(DuAEF.Duik.PseudoEffects.FOOT_ROLL.toesAngle).setValueAtTime(comp.time, - footRollEffect(DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle).value);
	}

	//restore activation
	ikEffect(pseudoEffect.ikCheckbox).setValueAtTime(comp.time,active);
}

/**
	* Automatically witches between IK and FK
	* @param {Controller|Layer} controller - The IK Controller
*/
DuAEF.Duik.Animation.switchIkFk = function (controller)
{
	if (controller instanceof Controller) controller = controller.layer;
	var comp = controller.containingComp;

	var ikIndex = 1;

	var ikEffect = controller.property('ADBE Effect Parade').property(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName);
	if (ikEffect)
	{
		ikIndex = DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox;
	}
	else
	{
		ikEffect = controller.property('ADBE Effect Parade').property(DuAEF.Duik.PseudoEffects.THREELAYER_IK.matchName);
		ikIndex = DuAEF.Duik.PseudoEffects.THREELAYER_IK.ikCheckbox;
	}

	if (!ikEffect) return;

	var ik = ikEffect(ikIndex).value;

	//snap and switch
	if (ik == 1)
	{
		DuAEF.Duik.Animation.fk2ik(controller);
		ikEffect(ikIndex).setValueAtTime(comp.time,0);
	}
	else
	{
		DuAEF.Duik.Animation.ik2fk(controller);
		ikEffect(ikIndex).setValueAtTime(comp.time,1);
	}
}

/**
	* Extracts the controllers from the precomposition,< br/>
	* and copies them to the composition, linking all precomposed controllers<br />
	* to the new ones.<br />
	* WARNING This method uses the native copy and paste commands of After Effects,<br />
	* DO NOT enclose it in an undoGroup.<br />
	* Undo groups will be handled by this method itself.
	* @param {AVLayer} preComposition - The precomposition layer
	* @param {boolean} [useMasterProperties=true] - Only in Ae v15.1 (CC2018) and up, true to use Master Properties<br />
	* instead of expressions to link the controllers. Ignored on previous versions of After Effects.
	* @return {int} Error code:<br >
	* -3: No controllers found in the precomp<br >
	* -2: The layer is not a precomposition<br >
	* -1: Some controllers can not be extracted<br >
	* 0: Unknown error<br >
	* 1: OK
*/
DuAEF.Duik.Animation.extractControllersFromComp = function(preComposition,useMasterProperties)
{
	if (DuAEF.DuAE.App.version < 15.1) useMasterProperties = false;
	if (typeof useMasterProperties === 'undefined') useMasterProperties = true;

	var comp = preComposition.containingComp;

	//get precomp.
	var preComp = preComposition.source;
	if (!preComp) return -2
	if (!(preComp instanceof CompItem)) return -2;

	//get all controllers from precomposition.
	var controllers = DuAEF.Duik.Controller.getControllers(preComp);
	if (controllers.length == 0) return -3;

	//check for parenting and list layers

	app.beginSuppressDialogs();

	DuAEF.DuAE.Comp.setUniqueCompName(comp);
	DuAEF.DuAE.Comp.setUniqueCompName(preComp);

	var itCtrls = new Iterator(controllers);
	var controller;
	var ctrlLayers = [];
	itCtrls.do(function(controller)
	{
		var layer = controller.layer;
		//check if the layer has a parent which is not a controller or nothing
		var ctrlParent = layer.parent;
		layer.reparent = true;
		if (!ctrlParent) layer.reparent = false;
		if (DuAEF.Duik.isLayerType(ctrlParent, DuAEF.Duik.LayerTypes.CONTROLLER)) layer.reparent = false;
		ctrlLayers.push(layer);
		controller.bakeAppearance();
	});

	//copy controllers
	var newCtrlLayers = DuAEF.DuAE.Layer.copyToComp(ctrlLayers, comp);

	//Add null at position precomp.width/2 precomp.height/2
	var nullLayer = comp.layers.addNull();
	nullLayer.transform.position.setValue([preComp.width/2,preComp.height/2]);

	//parent unparented controllers to the null
	DuAEF.DuAE.Layer.parent(newCtrlLayers, nullLayer);
	//parent the null to the precomp using parentWithJump
	nullLayer.setParentWithJump(preComposition);
	//remove the null
	nullLayer.remove();
	//create Master Props or Expressions
	//sort by index to be sure to link layers correctly
	ctrlLayers = DuAEF.DuAE.Layer.sortByIndex(ctrlLayers);
	newCtrlLayers = DuAEF.DuAE.Layer.sortByIndex(newCtrlLayers);

	//link transformations and effects (only)
	for (var i = 0, num = ctrlLayers.length; i < num; i++)
	{
		var ctrlLayer = ctrlLayers[i];
		var newCtrlLayer = newCtrlLayers[i];

		//use locators for all controllers parented to something else than a controller or nothing
		if (ctrlLayer.reparent) DuAEF.Duik.Rigging.parent(newCtrlLayer, ctrlLayer.parent);

		//remove expressions in the data of the child effect 
		DuAEF.DuAE.Property.removeDataExpressions(newCtrlLayer('ADBE Effect Parade'));

		if (useMasterProperties)
		{
			//transform
			var numProps = DuAEF.DuAE.Property.addToEGP(ctrlLayer.transform);
			//effects
			numProps += DuAEF.DuAE.Property.addToEGP(ctrlLayer('ADBE Effect Parade'));
			//links
			for (var p = 1; p <= numProps; p++)
			{
				var mp = preComposition('ADBE Layer Overrides')(p);
				//get prop name
				var nameArray = mp.name.split(' / ');
				var pLink = nameArray[1];
				var layerName = nameArray[0];
				var newProp = eval('newCtrlLayer' + pLink);
				//link
				DuAEF.DuAE.Property.pickWhip(mp,newProp,true);
			}

		}
		else
		{
			//transform
			DuAEF.DuAE.Property.linkProperties( ctrlLayer.transform, newCtrlLayer.transform, undefined, preComposition );
			//effects
			DuAEF.DuAE.Property.linkProperties( ctrlLayer('ADBE Effect Parade'), newCtrlLayer('ADBE Effect Parade'), undefined, preComposition );
		}
		//set params to keep the link
		DuAEF.Duik.setDuikMarkerParameter(newCtrlLayer, DuAEF.Duik.MarkerParameters.LINKEDTOCOMP, preComp.id);
		DuAEF.Duik.setDuikMarkerParameter(newCtrlLayer, DuAEF.Duik.MarkerParameters.LINKEDTOLAYER, ctrlLayer.name);
	}

	app.endSuppressDialogs(false);

	return 1;
}

/**
	* Adds a slider on a precomposition layer, and markers on the layer, with keyframes representing the animation exposure of the layers inside the precomposition
	* @memberof Duik
	* @param {LayerItem} precomp - The layer of the precomposition
*/
DuAEF.Duik.Animation.getPrecompExposure = function (precomp)
{
	//get source comp
	var comp = precomp.source;

	//if not a precomp, skip
	if (!(comp instanceof CompItem)) throw "The layer must be a precomposition.";

	//add slider
	var slider = precomp.Effects.addProperty("ADBE Slider Control");
	slider.name = "Detected Exposure";

	//detect exposure
	for (var i = 1 ; i <= comp.numLayers ; i++)
	{
		var layer = comp.layer(i);
		slider(1).setValueAtTime(precomp.startTime + layer.inPoint,layer.inPoint);
		slider(1).setInterpolationTypeAtKey(slider(1).numKeys,KeyframeInterpolationType.HOLD,KeyframeInterpolationType.HOLD);
		precomp.marker.setValueAtTime(precomp.startTime + layer.inPoint,new MarkerValue(''));
	}
}


/**
	* Animation Blender
	* @namespace
	* @memberof DuAEF.Duik
	*/
DuAEF.Duik.AnimationBlender = {};

/**
	* Creates a blender controller in the control composition, and sets all the properties of the setup comp up.
	* @param {CompItem} setupComp - The comp
	* @param {CompItem} controlComp - The comp where to create the blender controller
	* @param {boolean} [selectedProperties=false] - true to set only the selected properties up. When false, sets all animated (without expression) properties up.
	*/
DuAEF.Duik.AnimationBlender.setup = function(setupComp,controlComp,selectedProperties)
{
	if (typeof selectedProperties === 'undefined') selectedProperties = false;

	function getSelectedPropFilter(prop)
	{
		//check if there is an expression
		if (prop.propertyType != PropertyType.PROPERTY) return false;
		if (!prop.canSetExpression) return false;
		if (prop.expression != '') return false;

		if (selectedProperties) return prop.selected;
		return true;
	}

	var props = DuAEF.DuAE.Comp.getAnimatedProps(getSelectedPropFilter,undefined,undefined,undefined,setupComp);


	//create blender
	var blenderCtrl = DuAEF.Duik.Controller.create(controlComp,DuAEF.Duik.Controller.Types.BLENDER);
	blenderCtrl.layer.name = DuAEF.DuAE.Comp.newUniqueLayerName("C | Blender | " + setupComp.name, controlComp);

	//Store setupComp id into Duik marker of the controller
	DuAEF.Duik.setDuikMarkerParameter(blenderCtrl.layer,'animationBlenderComp',setupComp.id);
	//set the duikmarker at negative time to hide it
	var markerProp = blenderCtrl.layer.property('ADBE Marker');
	for (var i = 1, num = markerProp.numKeys; i <= num; i++)
	{
		var marker = markerProp.keyValue(i);
		var params = marker.getParameters();
		if (params.duik)
		{
			markerProp.removeKey(i);
			markerProp.setValueAtTime(-1,marker);
		}
	}

	var blenderFx = DuAEF.Duik.PseudoEffects.BLENDER.apply(blenderCtrl.layer);

	//default values
	blenderFx(DuAEF.Duik.PseudoEffects.BLENDER.loopCheckbox).setValue(0);
	blenderFx(DuAEF.Duik.PseudoEffects.BLENDER.durationSlider).setValue(0);

	var exp = '//Duik.blender\n' +
		'var ctrl = comp("' + controlComp.name + '").layer("' + blenderCtrl.layer.name + '");\n' +
		'var fx = ctrl.effect("' + blenderFx.name + '");\n' +
		'var loop = fx(' + DuAEF.Duik.PseudoEffects.BLENDER.loopCheckbox + ').value;\n' +
		'var blending = fx(' + DuAEF.Duik.PseudoEffects.BLENDER.blendingCheckbox + ').value;\n' +
		'var blendingDuration = fx(' + DuAEF.Duik.PseudoEffects.BLENDER.durationSlider + ').value;\n' +
		'var blendingEasing = fx(' + DuAEF.Duik.PseudoEffects.BLENDER.interpolationPopup + ').value;\n' +
		'if (!blending) blendingDuration = 0;\n' +
		'function getAnim(ind)\n' +
		'{\n' +
		'anim = 0;\n' +
		'var animStartTime = ctrl.marker.key(ind).time;\n' +
		'var animName = ctrl.marker.key(ind).comment;\n' +
		'var animMarker = null;\n';
		if (DuAEF.DuAE.App.version >= 14.0) exp += 'try { animMarker = thisComp.marker.key(animName); } catch(e) {}\n';
		else exp += 'try { animMarker = thisComp.layer("Duik | Animation blender").marker.key(animName); } catch(e) {}\n';
		exp += 'if (animMarker)\n' +
		'{\n' +
		'var start = animMarker.time;\n' +
		'var end = animMarker.time + animMarker.duration;\n' +
		'var dur = animMarker.duration;\n' +
		'anim = linear(time, animStartTime , animStartTime + dur, start, end);\n' +
		'if (loop)\n' +
		'{\n' +
		'var loopNumber = Math.ceil((time-animStartTime)/dur);\n' +
		'if (loopNumber > 1) anim =  linear(time,animStartTime+dur*(loopNumber-1), animStartTime+dur*loopNumber,start,end);\n' +
		'}\n' +
		'}\n' +
		'return valueAtTime(anim);\n' +
		'}\n' +
		'result = value;\n' +
		'if (ctrl.marker.numKeys > 1 && fx.enabled) {\n' +
		'var currentMarker = ctrl.marker.nearestKey(time).index;\n' +
		'if (ctrl.marker.key(currentMarker).time > time) currentMarker--;\n' +
		'if (currentMarker > 0)\n' +
		'{\n' +
		'var animA = getAnim(currentMarker);\n' +
		'result = animA;\n' +
		'if (blendingDuration != 0)\n' +
		'{\n' +
		'var prevMarker = currentMarker -1;\n' +
		'animB = value;\n' +
		'if (prevMarker > 0)\n' +
		'{\n' +
		'var markerTime = ctrl.marker.key(currentMarker).time;\n' +
		'if (!loop)\n' +
		'{\n' +
		'var prevMarkerTime = ctrl.marker.key(prevMarker).time;\n' +
		'var prevMarkerName = ctrl.marker.key(prevMarker).comment;\n' +
		'var animMarker = null;\n' +
		'try { animMarker = thisComp.marker.key(prevMarkerName); } catch(e) {}\n' +
		'if (animMarker)\n' +
		'{\n' +
		'var prevDuration = animMarker.duration;\n' +
		'var prevEndTime = animMarker.time + prevDuration;\n' +
		'var maxBlendingDuration = prevEndTime-markerTime;\n' +
		'if (maxBlendingDuration < 0) blendingDuration = 0;\n' +
		'else if (maxBlendingDuration < blendingDuration) blendingDuration = maxBlendingDuration;\n' +
		'}\n' +
		'}\n' +
		'\n' +
		'if (blendingDuration != 0)\n' +
		'{\n' +
		'animB = getAnim(prevMarker);\n' +
		'if (blendingEasing == 2) result = linear(time,markerTime , markerTime+blendingDuration, animB, animA);\n' +
		'else result = ease(time,markerTime , markerTime+blendingDuration, animB, animA);\n' +
		'}\n' +
		'}\n' +
		'}\n' +
		'\n' +
		'}\n' +
		'else\n' +
		'{\n' +
		'currentMarker++;\n' +
		'markerName = ctrl.marker.key(currentMarker).comment;\n' +
		'var animMarker = null;\n' +
		'try { animMarker = thisComp.marker.key(animName); } catch(e) {}\n' +
		'if (animMarker) result = valueAtTime(animMarker.time);\n' +
		'}\n' +
		'}\n' +
		'result;';

	//set expression
	new Iterator(props).do(function(prop)
	{
		prop = prop.getProperty();
		prop.expression = exp;
	});
}

/**
	* Gets the marker property used to define animations.<br />
	* This method will create a layer to receive markers on AE < 14.0 <br />
	* Because there were no scripting method to manage comp markers back then.
	* @param {CompItem} [comp] - The comp
	*/
DuAEF.Duik.AnimationBlender.getAnimMarkers = function (comp)
{
	if (typeof comp === 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;

	if (DuAEF.DuAE.App.version >= 14.0)
	{
		return comp.markerProperty;
	}

	var markerLayer = comp.layer("Duik | Animation blender");
	if (!markerLayer)
	{
		markerLayer = comp.layers.addNull();
		markerLayer.name = "Duik | Animation blender";
	}
	return markerLayer.property('ADBE Marker');
}

/**
	* An onion skin
	* @typedef {Object} OnionSkin
	* @property {boolean} activated - Is it activated
	* @property {int} duration - Duration in frames
	* @property {int} exposure - Animation exposure
	* @property {int} outOpacity - out opacity
	* @property {int} inOpacity - in opacity
	*/

/**
	* Cel animation tools
	* @namespace
	* @memberof DuAEF.Duik
	*/
DuAEF.Duik.CelAnimation = {};

/**
	* Creates a new animation cel on the layer
	* @param {CompItem} comp - The composition
	* @param {AVLayer|null} [layer] - The layer where to create the cel
	*/
DuAEF.Duik.CelAnimation.createCel = function (comp,layer)
{
	if (comp == undefined) return;

	if (layer == undefined || layer == null)
	{
		//create solid
		layer = comp.layers.addSolid([0,0,0], DuAEF.DuAE.Comp.newUniqueLayerName("Cel",comp) , comp.width, comp.height, comp.pixelAspect , comp.duration);
		DuAEF.Duik.setDuikMarker(layer,"Cel",DuAEF.Duik.LayerTypes.CEL);
	}

	var first = true;
	for (var i = 1 ; i <= layer('ADBE Effect Parade').numProperties ; i++)
	{
		if (layer.effect(i).matchName == 'ADBE Paint')
		{
			first = false;
			break;
		}
	}

	var newName = DuAEF.DuAE.Layer.newUniqueEffectName('Celluloid',layer);
	var paint = layer('ADBE Effect Parade').addProperty('ADBE Paint');
	paint.name = newName;

	if (first) paint.property('ADBE Paint On Transparent').setValue(true);

}

/**
	* Activates or deactivates the onion skin on a cel
	* @param {AVLayer} layer - The layer with the cel
	* @param {OnionSkin} onionSkin - Onion skin parameters
	*/
DuAEF.Duik.CelAnimation.onionSkin = function (layer,onionSkin)
{
	if (layer == undefined) return;
	if (onionSkin == undefined)
	{
		onionSkin = new OnionSkin();
		onionSkin.activated = true;
	}
	activate = onionSkin.activated;
	onionDuration = onionSkin.duration;
	exposure = onionSkin.exposure;
	inOpacity = onionSkin.inOpacity;
	outOpacity = onionSkin.outOpacity;

	var comp = layer.containingComp;
	for (var i = 1 ; i <= layer.Effects.numProperties ; i++)
	{
		var paint = layer.effect(i);
		if (!paint) continue;
		if (paint.matchName != "ADBE Paint") continue;
		if (paint.name.indexOf('Celluloid') < 0) continue;
		for (var j = 1 ; j <= paint.property("ADBE Paint Group").numProperties ; j++)
		{
			var stroke = paint.property("ADBE Paint Group")(j);
			if (stroke.matchName != "ADBE Paint Atom") continue;

			var inPoint = stroke.property("ADBE Paint Duration").value[0];
			var duration = stroke.property("ADBE Paint Duration").value[1];

			//adjust expo
			if (stroke.name.indexOf("#Duik") < 0)
			{
				duration = exposure*comp.frameDuration;
				stroke.property("ADBE Paint Duration").setValue([inPoint,duration]);
				stroke.name = stroke.name + " #Duik";
			}

			if (activate)
			{
				//stroke.property("ADBE Paint Transfer Mode") : blending mode
				var outPoint = duration + inPoint;
				var opacity = stroke.property("ADBE Paint Properties").property("ADBE Paint Opacity");
				//if keyframes (already activated)
				if (opacity.numKeys > 0)
				{
					if (stroke.name.indexOf("#Out") >= 0 && stroke.name.indexOf("#In") < 0)
					{
						outPoint = opacity.keyTime(2) - layer.startTime;
					}
					else if (stroke.name.indexOf("#Out") < 0 && stroke.name.indexOf("#In") >= 0)
					{
						inPoint = opacity.keyTime(3) - layer.startTime;
					}
					else if (stroke.name.indexOf("#Out") >= 0 && stroke.name.indexOf("#In") >= 0)
					{
						inPoint = opacity.keyTime(3) - layer.startTime;
						outPoint = opacity.keyTime(5) - layer.startTime;
					}

					//remove keys
					while (opacity.numKeys>0)
					{
						opacity.removeKey(1);
					}
					opacity.setValue(100);
					stroke.name = stroke.name.replace(/ #Out/g,"");
					stroke.name = stroke.name.replace(/ #In/g,"");
				}

				//set duration
				if (outOpacity > 0 && inOpacity <= 0)
				{
					duration = outPoint - inPoint + onionDuration*comp.frameDuration;
					stroke.property("ADBE Paint Duration").setValue([inPoint,duration]);
				}
				else if (outOpacity <= 0 && inOpacity > 0)
				{
					duration = outPoint - inPoint + onionDuration*comp.frameDuration;
					stroke.property("ADBE Paint Duration").setValue([inPoint-onionDuration*comp.frameDuration,duration]);
				}
				else
				{
					duration = outPoint - inPoint + 2*onionDuration*comp.frameDuration;
					stroke.property("ADBE Paint Duration").setValue([inPoint-onionDuration*comp.frameDuration,duration]);
				}


				//add keyframes
				if (outOpacity > 0)
				{
				opacity.setValueAtTime(outPoint-comp.frameDuration+layer.startTime,100);
				opacity.setValueAtTime(outPoint+layer.startTime,outOpacity);
				opacity.setValueAtTime(outPoint + onionDuration*comp.frameDuration+layer.startTime,0);
				stroke.name = stroke.name + " #Out";
				}
				if (inOpacity > 0)
				{
				opacity.setValueAtTime(inPoint+layer.startTime,100);
				opacity.setValueAtTime(inPoint-onionDuration*comp.frameDuration+layer.startTime,0);
				opacity.setValueAtTime(inPoint-comp.frameDuration+layer.startTime,inOpacity);
				stroke.name = stroke.name + " #In";
				}

			}
			else
			{
				var opacity = stroke.property("ADBE Paint Properties").property("ADBE Paint Opacity");
				if (opacity.numKeys > 0)
				{
				inPoint = 0;
				outPoint = 1;
				if (stroke.name.indexOf("#Out") >= 0 && stroke.name.indexOf("#In") < 0)
				{
				inPoint = stroke.property("ADBE Paint Duration").value[0];
				outPoint = opacity.keyTime(2);
				}
				else if (stroke.name.indexOf("#Out") < 0 && stroke.name.indexOf("#In") >= 0)
				{
				outPoint = stroke.property("ADBE Paint Duration").value[0] + stroke.property("ADBE Paint Duration").value[1];
				inPoint = opacity.keyTime(3);
				}
				else if (stroke.name.indexOf("#Out") >= 0 && stroke.name.indexOf("#In") >= 0)
				{
				inPoint = opacity.keyTime(3);
				outPoint = opacity.keyTime(5);
				}


				while (opacity.numKeys>0)
				{
				opacity.removeKey(1);
				}
				opacity.setValue(100);
				//set duration
				var o = outPoint-inPoint;
				var i = inPoint;
				if (stroke.name.indexOf("#Out") >= 0 && stroke.name.indexOf("#In") < 0) o = o-layer.startTime;
				else if (stroke.name.indexOf("#Out") < 0) o = o + layer.startTime;
				if (stroke.name.indexOf("#In") >= 0) i = i-layer.startTime;

				stroke.property("ADBE Paint Duration").setValue([i,o]);

				stroke.name = stroke.name.replace(/ #In/g,"");
				stroke.name = stroke.name.replace(/ #Out/g,"");
				}
			}
		}
	}
	//deselect
	while(layer.selectedProperties.length > 0)
	{
		layer.selectedProperties[0].selected = false;
	}
}
