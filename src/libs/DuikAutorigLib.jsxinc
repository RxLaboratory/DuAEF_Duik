/**
* Autorig
* @namespace
* @memberof DuAEF.Duik
*/
DuAEF.Duik.Autorig = {}

/**
 * The types of animals which can be rigged
 * @enum {int}
 * @readonly
 */
DuAEF.Duik.Autorig.AnimalTypes =
{
	PLANTIGRADE: 1,
	DIGITIGRADE: 2,
	UNGULATE: 3
}

/**
 * The elements handled by the Autorig
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.Autorig.Elements =
{
	SHOULDER: 'shoulder',
	SHOULDER_BLADE: 'shoulder',
	CLAVICLE: 'shoulder',
	HUMERUS: 'humerus',
	ARM: 'humerus',
	FOREARM: 'radius',
	RADIUS: 'radius',
	ULNA: 'radius',
	HAND: 'hand',
	FINGERS: 'fingers',
	FRONT_CLAWS: 'fingers',
	FRONT_HEEL: 'palm',
	PALM: 'palm',
	ARM_TIP: 'armTip',
	FEMUR: 'femur',
	THIGH: 'femur',
	TIBIA: 'tibia',
	CALF: 'tibia',
	FOOT: 'foot',
	REAR_CLAWS: 'toes',
	TOES: 'toes',
	CLAWS: 'toes',
	HEEL: 'heel',
	LEG_TIP: 'legTip',
	TIPTOE: 'legTip',
	HIPS: 'hips',
	SPINE: 'spine',
	NECK: 'neck',
	HEAD: 'head',
	SPINE_TIP: "spineTip",
	TAIL: "tail",
	TAIL_TIP: "tailTip"
}

/**
 * The limbs handled by the Autorig
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.Autorig.Limbs =
{
	ARM: 'arm',
	FRONT_LEG: 'arm',
	LEG: 'leg',
	BACK_LEG: 'leg',
	REAR_LEG: 'leg',
	SPINE: 'spine',
	TAIL: 'tail'
}

/**
 * Checks if all the layers have autorig tags and are ready to be rigged
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} layers - The layers to check
 * @return {Layer[]} The layers not tagged
 */
DuAEF.Duik.Autorig.checkLayerTags = function (layers)
{
	if (layers.length == 0) return [];
	var untagged = [];
	var it = new Iterator(layers);
	it.do(function(layer){
		var param = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!param)
		{
			untagged.push(layer);
			return;
		}
		if (!param[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB])
		{
			untagged.push(layer);
			return;
		}
	});

	return untagged;
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [shoulder] - the layer for the shoulder
 * @param {Layer} [humerus] - the layer for the humerus
 * @param {Layer} [radius] - the layer for the radius
 * @param {Layer} [hand] - the layer for the hand
 * @param {Layer} [claws] - the layer for the claws/fingers
 * @param {Layer} [palm] - the layer for the palm/heel
 * @param {Layer} [tip] - the layer for the tip
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 */
DuAEF.Duik.Autorig.tagArm = function (shoulder,humerus,radius,hand,claws,palm,tip,type)
{
	if (type == undefined) type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;

	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.ARM;

	if (shoulder)
	{
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SHOULDER);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (humerus)
	{
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HUMERUS);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (radius)
	{
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.RADIUS);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (hand)
	{
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HAND);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (claws)
	{
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FRONT_CLAWS);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (palm)
	{
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.PALM);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.ARM_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}

}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [femur] - the layer for the femur
 * @param {Layer} [tibia] - the layer for the tibia
 * @param {Layer} [foot] - the layer for the foot
 * @param {Layer} [toes] - the layer for the toes
 * @param {Layer} [heel] - the layer for the heel
 * @param {Layer} [tip] - the layer for the tipl
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 */
DuAEF.Duik.Autorig.tagLeg = function (femur,tibia,foot,toes,heel,tip,type)
{
	if (type == undefined) type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;

	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.LEG;

	if (femur)
	{
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FEMUR);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (tibia)
	{
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TIBIA);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (foot)
	{
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FOOT);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (toes)
	{
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TOES);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (heel)
	{
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HEEL);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.LEG_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [hips] - the layer for the hips
 * @param {Layer[]} [spine] - the layers for the spine
 * @param {Layer[]} [neck] - the layers for the neck
 * @param {Layer} [head] - the layer for the head
 * @param {Layer} [tip] - the layer for the tip
 */
DuAEF.Duik.Autorig.tagSpine = function (hips,spine,neck,head,tip)
{
	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.SPINE;

	if (hips)
	{
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HIPS);
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (spine) if (spine.length > 0)
	{
		for (var i = 0 ; i < spine.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SPINE);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (neck) if (neck.length > 0)
	{
		for (var i = 0 ; i < neck.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.NECK);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (head)
	{
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HEAD);
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SPINE_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} [tail] - the layers for the neck
 * @param {Layer} [tip] - the layer for the tip
 */
DuAEF.Duik.Autorig.tagTail = function (tail,tip)
{
	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.TAIL;

	if (tail) if (tail.length > 0)
	{
		for (var i = 0 ; i < tail.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TAIL);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TAIL_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
}

/**
 * Rigs the layers according to the tags found
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} layers - The layers to rig
 * @return {boolean} false if the layers can not be rigged
 */
DuAEF.Duik.Autorig.rig = function (layers)
{
	if (layers.length == 0) return false;

	//what we expect
	var arms = [];
	var legs = [];
	var spine = {};
	spine.spine = [];
	spine.neck = [];
	var tails = [];

	//a sorter for spine, neck and tail layer
	function sortElements(a,b)
	{
		return a.i - b.i;
	}

	// ================== INIT ===================

	var comp = layers[0].containingComp;

	//check if layers are tagged, if not return false
	var wrongLayers = DuAEF.Duik.Autorig.checkLayerTags(layers);
	if (wrongLayers.length > 0) return false;

	app.beginSuppressDialogs();

	//Sort layers, load data
	//TODO: do not check all layers, but get by autorig_id in the comp
	//this way, one has only one layer for each limb to select and can forget some.
	var it = new Iterator(layers);
	it.do(function (layer){
		var params = DuAEF.Duik.getDuikMarkerParameters(layer);

		if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.SPINE)
		{
			if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HIPS)
			{
				spine.hips = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SPINE)
			{
				var sp = {};
				sp = layer;
				sp.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
				spine.spine.push(sp);
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.NECK)
			{
				var ne = {};
				ne = layer;
				ne.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
				spine.neck.push(ne);
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HEAD)
			{
				spine.head = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SPINE_TIP)
			{
				spine.tip = layer;
				return;
			}
		}
		else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.TAIL)
		{
			//get id
			var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

			//look for existing tail if any
			var tail;
			for (var i = 0 ; i < tails.length ; i++)
			{
				if (tails[i].id == id)
				{
					tail = tails[i];
					break;
				}
			}
			if (!tail)
			{
				tail = {};
				tail.tail = [];
				tail.id = id;
				tails.push(tail);
			}

			if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TAIL)
			{
				var ta = {};
				ta = layer;
				ta.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
				tail.tail.push(ta);
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TAIL_TIP)
			{
				tail.tip = layer;
				return;
			}
		}
		else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.ARM)
		{
			//get id
			var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

			//look for existing arm if any
			var arm;
			for (var i = 0 ; i < arms.length ; i++)
			{
				if (arms[i].id == id)
				{
					arm = arms[i];
					break;
				}
			}
			if (!arm)
			{
				arm = {};
				arm.id = id;
				arm.type = DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE;
				arms.push(arm);
			}

			if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SHOULDER)
			{
				arm.shoulder = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HUMERUS)
			{
				arm.humerus = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.RADIUS)
			{
				arm.radius = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HAND)
			{
				arm.hand = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FRONT_CLAWS)
			{
				arm.claws = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.PALM)
			{
				arm.palm = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.ARM_TIP)
			{
				arm.tip = layer;
				return;
			}
		}
		else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.LEG)
		{
			//get id
			var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

			//look for existing arm if any
			var leg;
			for (var i = 0 ; i < legs.length ; i++)
			{
				if (legs[i].id == id)
				{
					leg = legs[i];
					break;
				}
			}
			if (!leg)
			{
				leg = {};
				leg.id = id;
				leg.type = DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE;
				legs.push(leg);
			}

			leg.type = params[DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE];

			if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FEMUR)
			{
				leg.femur = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TIBIA)
			{
				leg.tibia = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FOOT)
			{
				leg.foot = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TOES)
			{
				leg.toes = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HEEL)
			{
				leg.heel = layer;
				return;
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.LEG_TIP)
			{
				leg.tip = layer;
				return;
			}

		}
	});

	// ================ SPINE =======================

	//sort the spine and the neck
	spine.spine.sort(sortElements);
	spine.neck.sort(sortElements);

	//find the root
	var spineRoot = null;
	if (spine.hips) spineRoot = spine.hips;
	else if (spine.spine.length > 0) spineRoot = spine.spine[0];
	else if (spine.neck.length > 0) spineRoot = spine.neck[0];
	else if (spine.head) spineRoot = spine.head;
	else if (spine.tip) spineRoot = spine.tip;

	//find the torso
	var spineTorso = null;
	if (spine.spine.length > 0) spineTorso = spine.spine[spine.spine.length-1];
	else if (spine.hips) spineTorso = spine.hips;
	else if (spine.neck.length) spineTorso = spine.neck[0];
	else if (spine.head) spineTorso = spine.head;
	else if (spine.tip) spineTorso = spine.tip;

	//let's do this!
	if (spineRoot)
	{
		//unparent everything, just to be sure
		var spineRootParent = spineRoot.parent;
		spineRoot.parent = null;

		if (spine.spine.length > 0) for (var i=0;i<spine.spine.length;i++ ) spine.spine[i].parent = null;
		if (spine.neck.length > 0) for (var i=0;i<spine.neck.length;i++ ) spine.neck[i].parent = null;
		if (spine.head) spine.head.parent = null;
		if (spine.tip) spine.tip.parent = null;

		//controllers
		var hipsCtrl = null;
		var bigHipsCtrl = null;
		var shoulderCtrl = null;
		var headCtrl = null;

		//hips controller
		if (spine.hips)
		{
			bigHipsCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.BODY,spine.hips);
			hipsCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HIPS,spine.hips);
		}
		else if (spine.spine.length > 0)
		{
			bigHipsCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.BODY,spine.spine[0]);
			hipsCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HIPS,spine.spine[0]);
		}

		//shoulders controller
		if (spine.neck.length > 0)
		{
			shoulderCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.SHOULDERS,spine.neck[0]);
		}

		//head controller
		if (spine.head)
		{
			headCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HEAD,spine.head);
		}

		//parenting structures
		if (spine.hips)
		{
			spine.hips.parent = hipsCtrl.layer;
		}
		if (spine.spine.length > 0)
		{
			if (!spine.hips)
			{
				spine.spine[0].parent = hipsCtrl.layer;
				//if structure, disable display link (bug AE)
				if (DuAEF.Duik.isLayerType(spine.spine[0],DuAEF.Duik.LayerTypes.STRUCTURE))
				{
					spine.spine[0].effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE_ELEMENT)(3).setValue(0);
				}
			}
			else spine.spine[0].parent = spine.hips;
		}
		if (spine.neck.length > 0)
		{
			if (spine.spine.length > 0) spine.neck[0].parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.neck[0].parent = spine.hips;
			else spine.neck[0].parent = shoulderCtrl.layer;
			for (var i = 1;i<spine.neck.length;i++)
			{
				spine.neck[i].parent = spine.neck[i-1];
			}
		}
		if (spine.head)
		{
			if (spine.neck.length > 0) spine.head.parent = spine.neck[spine.neck.length-1];
			else if (spine.spine.length > 0) spine.head.parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.head.parent = spine.hips;
			else spine.head.parent = headCtrl.layer;
		}
		if (spine.tip)
		{
			if (spine.head) spine.tip.parent = spine.head;
			else if (spine.neck.length > 0) spine.tip.parent = spine.neck[spine.neck.length-1];
			else if (spine.spine.length > 0) spine.tip.parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.tip.parent = spine.hips;
			else
			{
				hipsCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HIPS,spine.tip);
				spine.tip.parent = hipsCtrl.layer;
			}
		}

		//parenting controllers
		if (bigHipsCtrl)
		{
			bigHipsCtrl.layer.parent = spineRootParent;
			hipsCtrl.layer.parent = bigHipsCtrl.layer;
		}

		if (shoulderCtrl)
		{
			if (bigHipsCtrl) shoulderCtrl.layer.parent = bigHipsCtrl.layer;
		}

		if (headCtrl)
		{
			if (shoulderCtrl) headCtrl.layer.parent = shoulderCtrl.layer;
			else if (bigHipsCtrl) headCtrl.layer.parent = bigHipsCtrl.layer;
		}

		//spine IK
		var goal;
		if (spine.neck.length > 0) goal = spine.neck[0];
		else if (spine.head) goal = spine.head;
		else if (spine.tip) goal = spine.tip;
		var ctrl;
		if (shoulderCtrl) ctrl = shoulderCtrl;
		else if (headCtrl) ctrl = headCtrl;

		if (ctrl || goal)
		{
			if (spine.hips && spine.spine.length == 0)
			{
				var backCtrl = DuAEF.Duik.Rigging.oneLayerIK(spine.hips,goal,ctrl);
				if (!ctrl) backCtrl.layer.parent = bigHipsCtrl.layer;
			}
			else if (spine.spine.length == 1)
			{
				var backCtrl = DuAEF.Duik.Rigging.oneLayerIK(spine.spine[0],goal,ctrl);
				if (!ctrl) backCtrl.layer.parent = bigHipsCtrl.layer;
			}
			else if (spine.spine.length > 1)
			{
				var backCtrl = DuAEF.Duik.Rigging.bezierIK(spine.spine,goal,ctrl);
				goal.parent = spine.spine[spine.spine.length-1];

				backCtrl[0].layer.parent = bigHipsCtrl.layer;
				backCtrl[0].layer.moveAfter(bigHipsCtrl.layer);
				if (!ctrl) backCtrl[1].layer.parent = bigHipsCtrl.layer;
			}
		}

		//other controls
		//neck
		if (spine.neck.length > 0)
		{
			DuAEF.Duik.Rigging.goal(spine.neck,shoulderCtrl);
		}

		//head
		if (spine.head)
		{
			DuAEF.Duik.Rigging.goal(spine.head,headCtrl);
		}
	}

	// ==================== TAIL ======================

	var itTails = new Iterator(tails);
	itTails.do(function(tail){

		//sort the tail
		tail.tail.sort(sortElements);

		//unparent
		for (var i=0, num = tail.tail.length ; i < num ; i++ ) tail.tail[i].parent = null;

		if (!tail.tip && tail.tail.length > 1) tail.tip = tail.tail.pop();
		else if (tail.tail.length == 1)
		{
			var tailCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.TAIL,tail.tail[0]);
			tail.tail[0].parent = tailCtrl.layer;
			if (spineRoot) tailCtrl.layer.parent = bigHipsCtrl.layer;
			return;
		}

		//controllers
		var tailCtrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.TAIL,tail.tip);

		//ik
		if(tail.tail.length > 1)
		{
			var layers = tail.tail;
			var ctrls = DuAEF.Duik.Rigging.bezierIK(tail.tail,tail.tip,tailCtrl);

			//parent
			if (spineRoot)
			{
				ctrls[0].layer.parent = bigHipsCtrl.layer;
				ctrls[1].layer.parent = bigHipsCtrl.layer;
				tail.tail[0].parent = spineRoot;
			}
		}
		else
		{
			DuAEF.Duik.Rigging.oneLayerIK(tail.tail[0],tail.tip,tailCtrl);
			//parent
			if (spineRoot)
			{
				tailCtrl.layer.parent = bigHipsCtrl.layer;
				tail.tail[0].parent = spineRoot;
			}
		}

	});


	// ================ LEGS ==========================

	var itLegs = new Iterator(legs);
	itLegs.do(function(leg){

		//TODO DIGITIGRADE and ungulate

		//unparent
		if (leg.tibia && leg.femur) leg.tibia.parent = null;
		if (leg.foot && (leg.tibia || leg.femur)) leg.foot.parent = null;
		if (leg.toes  && (leg.foot || leg.tibia || leg.femur)) leg.toes.parent = null;
		if (leg.tip) leg.tip.parent = null;
		if (leg.heel) leg.heel.parent = null;

		//detect right or left, depending on the toes position
		var right = false;
		if (leg.toes && leg.foot)
		{
			var toesPos = DuAEF.DuAE.Layer.getWorldPos(leg.toes);
			var footPos = DuAEF.DuAE.Layer.getWorldPos(leg.foot);
			right = (toesPos[0] - footPos[0]) > 0;
		}

		//add nulls and controllers for the footRoll
		var toesNull, footNull;
		//the foot roll needs all parts
		if (leg.toes && leg.foot && leg.tibia && leg.femur)
		{
			//claws
			toesNull = DuAEF.DuAE.Layer.addNull(leg.toes);
			DuAEF.Duik.setDuikMarker(toesNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			toesNull.name = "FootRoll | " + leg.toes.name;

			var footSize = leg.toes.transform.position.value[0] - leg.foot.transform.position.value[0];
			//tiptoe
			if (!leg.tip)
			{
				leg.tip = DuAEF.DuAE.Layer.addNull(leg.toes);
				leg.tip.name = "FootRoll | Tiptoe";
				leg.tip.transform.position.setValue([toesNull.transform.position.value[0] + footSize/2,toesNull.transform.position.value[1]]);
			}

			if (!leg.heel && leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				leg.heel = DuAEF.DuAE.Layer.addNull(leg.toes);
				leg.heel.name = "FootRoll | Heel";
				leg.heel.transform.position.setValue([leg.foot.transform.position.value[0],toesNull.transform.position.value[1]]);
			}

			//foot
			footNull = DuAEF.DuAE.Layer.addNull(leg.foot);
			DuAEF.Duik.setDuikMarker(footNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			footNull.name = "FootRoll | " + leg.foot.name;
		}

		//Controller for the leg
		var ctrlType = DuAEF.Duik.Controller.Types.FOOT;
		if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) ctrlType = DuAEF.Duik.Controller.Types.CLAWS;
		if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) ctrlType = DuAEF.Duik.Controller.Types.HOOF;
		var ctrl = null;
		if (leg.foot && ((leg.femur || leg.tibia) || (!leg.toes && !leg.tip))) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.foot);
		else if (leg.toes && ((leg.femur || leg.tibia) || !leg.tip)) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.toes);
		else if (leg.tip) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.tip);
		else if (leg.heel) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.heel);
		else if (leg.tibia) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.tibia);
		else if (leg.femur) ctrl = DuAEF.Duik.Controller.create(comp,ctrlType,leg.femur);

		//parenting
		if (leg.toes)
		{
			if (leg.foot) leg.toes.parent = leg.foot;
			else if (leg.tibia) leg.toes.parent = leg.tibia;
			else if (leg.femur) leg.toes.parent = leg.femur;
			else if (leg.tip || leg.heel) leg.toes.parent = spineRoot;
			else
			{
				leg.toes.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.foot)
		{
			if (leg.tibia) leg.foot.parent = leg.tibia;
			else if (leg.femur) leg.foot.parent = leg.femur;
			else if (leg.toes || leg.tip || leg.heel) leg.foot.parent = spineRoot;
			else
			{
				leg.foot.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.tibia)
		{
			if (leg.femur) leg.tibia.parent = leg.femur;
			else if (leg.foot || leg.toes || leg.heel) leg.tibia.parent = spineRoot;
			else
			{
				leg.tibia.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.femur)
		{
			if (leg.tibia || leg.foot || leg.toes || leg.heel) leg.femur.parent = spineRoot;
			else
			{
				leg.femur.parent = ctrl.layer;
				if (spineRoot) ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.tip)
		{
			if (leg.heel) leg.tip.parent = leg.heel;
			else if (leg.foot) leg.tip.parent = leg.foot;
			else if (leg.tibia) leg.tip.parent = leg.tibia;
			else if (leg.femur) leg.tip.parent = leg.femur;
		}
		if (footNull)
		{
			footNull.parent = toesNull;
			toesNull.parent = leg.tip;
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) leg.heel.parent = ctrl.layer;
			else if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) leg.tip.parent = ctrl.layer;
		}

		//IKs
		if (footNull)
		{
			//claws
			DuAEF.Duik.Rigging.oneLayerIK(leg.toes,undefined,leg.tip);
			//leg
			DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.foot,footNull);
			//foot
			DuAEF.Duik.Rigging.oneLayerIK(leg.foot,undefined,toesNull);
		}
		else
		{
			if (leg.foot)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.foot,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.foot,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.foot,ctrl);
				else if (leg.toes) DuAEF.Duik.Rigging.oneLayerIK(leg.foot,leg.toes,ctrl);
				else if (leg.tip) DuAEF.Duik.Rigging.oneLayerIK(leg.foot,leg.tip,ctrl);
			}
			else if (leg.toes)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.toes,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.toes,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.toes,ctrl);
				else if (leg.tip) DuAEF.Duik.Rigging.oneLayerIK(leg.toes,leg.tip,ctrl);
			}
			else if (leg.tip)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.tip,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.tip,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.tip,ctrl);
			}
			else if (leg.heel)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.heel,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.heel,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.heel,ctrl);
			}
			else if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.tibia,ctrl);
		}

		//Controls
		if (footNull)
		{
			//add an IK effect on the controller
			var ikCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.TWOLAYER_IK,DuAEF.Duik.PseudoEffectsMatchNames.TWOLAYER_IK,"IK");
			//the effect on the null of the foot
			var ikEffect = footNull.effect(DuAEF.Duik.PseudoEffectsMatchNames.TWOLAYER_IK);
			ikCtrl.name = ikEffect.name;
			//link the properties
			DuAEF.DuAE.Property.linkProperties(ikEffect,ikCtrl);

			//tiptoe, heel and footroll
			var footCtrl;
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) footCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.FOOT_ROLL,DuAEF.Duik.PseudoEffectsMatchNames.FOOT_ROLL,"Foot roll");
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) footCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.DIGI_FOOT_ROLL,DuAEF.Duik.PseudoEffectsMatchNames.DIGI_FOOT_ROLL,"Foot roll");
			leg.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(1);";
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				var op  = right ? "<" : ">";
				leg.heel.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(2);\n" +
				"var roll = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(3);\n" +
				"roll " + op + " 0 ? roll+ctrl : ctrl;";
				op = right ? ">" : "<";
				toesNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(3);\n" +
				"ctrl " + op + " 0 ? ctrl : 0;";
			}
			else if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE)
			{
				toesNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(3);\n" +
				"var tiptoe = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(1);\n" +
				"ctrl-tiptoe;";
				leg.tip.effect(DuAEF.Duik.PseudoEffectsMatchNames.ONELAYER_IK)(3).expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(2);";
			}
		}

		//hide and lock
		if (footNull){
			toesNull.enabled = false;
			toesNull.shy = true;
			toesNull.locked = true;
			footNull.enabled = false;
			footNull.shy = true;
			footNull.locked = true;
		}

		//select controller
		DuAEF.DuAE.Comp.unselectLayers();
		ctrl.layer.selected = true;
	});

	// =============== ARMS ================================

	var itArms = new Iterator(arms);
	itArms.do(function(arm){

		//TODO DIGITIGRADE and ungulate

		//unparent
		if (arm.humerus && arm.shoulder) arm.humerus.parent = null;
		if (arm.radius && (arm.humerus ||  arm.shoulder)) arm.radius.parent = null;
		if (arm.hand && (arm.radius || arm.humerus)) arm.hand.parent = null;
		if (arm.claws  && (arm.hand || arm.radius || arm.humerus)) arm.claws.parent = null;
		if (arm.tip) arm.tip.parent = null;
		if (arm.palm) arm.palm.parent = null;

		//detect right or left, depending on the toes position
		var right = false;
		if (arm.claws && arm.hand)
		{
			var clawsPos = DuAEF.DuAE.Layer.getWorldPos(arm.claws);
			var handPos = DuAEF.DuAE.Layer.getWorldPos(arm.hand);
			right = (clawsPos[0] - handPos[0]) > 0;
		}

		//add nulls and controllers for the footRoll
		var clawsNull, handNull;
		//the foot roll needs all parts
		if ( arm.claws && arm.hand && ((arm.radius && arm.humerus) || (arm.radius && arm.shoulder) || (arm.humerus && arm.shoulder)) )
		{
			//claws
			clawsNull = DuAEF.DuAE.Layer.addNull(arm.claws);
			DuAEF.Duik.setDuikMarker(clawsNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			clawsNull.name = "FootRoll | " + arm.claws.name;

			var handSize = arm.claws.transform.position.value[0] - arm.hand.transform.position.value[0];
			//tiptoe
			if (!arm.tip)
			{
				arm.tip = DuAEF.DuAE.Layer.addNull(arm.claws);
				arm.tip.name = "FootRoll | Tiptoe";
				arm.tip.transform.position.setValue([clawsNull.transform.position.value[0] + handSize/2,clawsNull.transform.position.value[1]]);
			}

			if (!arm.palm)
			{
				arm.palm = DuAEF.DuAE.Layer.addNull(arm.claws);
				arm.palm.name = "FootRoll | Heel";
				arm.palm.transform.position.setValue([arm.hand.transform.position.value[0],clawsNull.transform.position.value[1]]);
			}

			//hand
			handNull = DuAEF.DuAE.Layer.addNull(arm.hand);
			DuAEF.Duik.setDuikMarker(handNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			handNull.name = "FootRoll | " + arm.hand.name;
		}

		//Controller for the arm
		var ctrl = null;
		if (arm.hand && ((arm.humerus || arm.radius || arm.shoulder) || (!arm.claws && !arm.tip))) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.hand);
		else if (arm.claws && ((arm.humerus || arm.radius || arm.shoulder) || !arm.tip)) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.claws);
		else if (arm.tip) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.tip);
		else if (arm.palm) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.palm);
		else if (arm.radius) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.radius);
		else if (arm.humerus) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.humerus);
		else if (arm.shoulder) ctrl = DuAEF.Duik.Controller.create(comp,DuAEF.Duik.Controller.Types.HAND,arm.shoulder);

		//parenting
		if (arm.claws)
		{
			if (arm.hand) arm.claws.parent = arm.hand;
			else if (arm.radius) arm.claws.parent = arm.radius;
			else if (arm.humerus) arm.claws.parent = arm.humerus;
			else if (arm.shoulder) arm.claws.parent = arm.shoulder;
			else if (arm.tip || arm.palm) arm.claws.parent = spineTorso;
			else
			{
				arm.claws.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.hand)
		{
			if (arm.radius) arm.hand.parent = arm.radius;
			else if (arm.humerus) arm.hand.parent = arm.humerus;
			else if (arm.shoulder) arm.hand.parent = arm.shoulder;
			else if (arm.claws || arm.tip || arm.palm) arm.hand.parent = spineTorso;
			else
			{
				arm.hand.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.radius)
		{
			if (arm.humerus) arm.radius.parent = arm.humerus;
			else if (arm.shoulder) arm.radius.parent = arm.shoulder;
			else if (arm.hand || arm.claws || arm.tip || arm.palm) arm.radius.parent = spineTorso;
			else
			{
				arm.radius.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.humerus)
		{
			if (arm.shoulder) arm.humerus.parent = arm.shoulder;
			else if (arm.radius || arm.hand || arm.claws || arm.palm || arm.tip) arm.humerus.parent = spineTorso;
			else
			{
				arm.humerus.parent = ctrl.layer;
				if (spineTorso) ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.shoulder)
		{
			if (arm.humerus || arm.radius || arm.hand || arm.claws || arm.palm  || arm.tip) arm.shoulder.parent = spineTorso;
			else
			{
				arm.shoulder.parent = ctrl.layer;
				if (spineTorso) ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.tip)
		{
			if (arm.palm) arm.tip.parent = arm.palm;
			else if (arm.hand) arm.tip.parent = arm.hand;
			else if (arm.radius) arm.tip.parent = arm.radius;
			else if (arm.humerus) arm.tip.parent = arm.humerus;
			else if (arm.shoulder) arm.tip.parent = arm.shoulder;
		}
		if (handNull)
		{
			handNull.parent = clawsNull;
			clawsNull.parent = arm.tip;
			arm.palm.parent = ctrl.layer;
		}

		//IKs
		if (handNull)
		{
			//claws
			DuAEF.Duik.Rigging.oneLayerIK(arm.claws,undefined,arm.tip);
			//arm
			if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.hand,handNull);
			else if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.hand,handNull);
			else if (arm.radius && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.hand,handNull);
			//hand
			DuAEF.Duik.Rigging.oneLayerIK(arm.hand,undefined,clawsNull);
		}
		else
		{
			if (arm.hand)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.hand,ctrl);
				else if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.hand,ctrl);
				else if (arm.radius && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.hand,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.hand,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.hand,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.hand,ctrl);
				else if (arm.claws) DuAEF.Duik.Rigging.oneLayerIK(arm.hand,arm.claws,ctrl);
				else if (arm.tip) DuAEF.Duik.Rigging.oneLayerIK(arm.hand,arm.tip,ctrl);
			}
			else if (arm.claws)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.claws,ctrl);
				if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.claws,ctrl);
				if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.claws,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.claws,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.claws,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.claws,ctrl);
				else if (arm.tip) DuAEF.Duik.Rigging.oneLayerIK(arm.claws,arm.tip,ctrl);
			}
			else if (arm.tip)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.tip,ctrl);
				if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.tip,ctrl);
				if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.tip,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.tip,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.tip,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.tip,ctrl);
			}
			else if (arm.palm)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.palm,ctrl);
				if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.palm,ctrl);
				if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.palm,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.palm,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.palm,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.palm,ctrl);
			}
			else if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.radius,ctrl);
			else if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.humerus,ctrl);
			else if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.radius,ctrl);
		}
		if (arm.shoulder && arm.humerus && arm.radius)
		{
			DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,undefined,ctrl);
			var ikShoulderEffect = ctrl.layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.ONELAYER_IK);
			var oldName = ikShoulderEffect.name;
			ikShoulderEffect.name = arm.shoulder.name + " rotation";
			app.project.autoFixExpressions(oldName,arm.shoulder.name + " rotation");
			ikShoulderEffect(2).setValue(20);
			ikShoulderEffect(3).setValue(-arm.shoulder.transform.rotation.value);
			ikShoulderEffect(5).setValue(1);
		}

		//Controls
		if (handNull)
		{
			//add an IK effect on the controller
			var ikCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.TWOLAYER_IK,DuAEF.Duik.PseudoEffectsMatchNames.TWOLAYER_IK,"IK");
			//the effect on the null of the hand
			var ikEffect = handNull.effect(DuAEF.Duik.PseudoEffectsMatchNames.TWOLAYER_IK);
			ikCtrl.name = ikEffect.name;
			//link the properties
			DuAEF.DuAE.Property.linkProperties(ikEffect,ikCtrl);

			//tiptoe, heel and footroll
			var handCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.FOOT_ROLL,DuAEF.Duik.PseudoEffectsMatchNames.FOOT_ROLL,"Foot roll");
			arm.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(1);";
			var op  = right ? "<" : ">";
			arm.palm.transform.rotation.expression = "//Duik.footRoll\n" +
			"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(2);\n" +
			"var roll = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(3);\n" +
			"roll " + op + " 0 ? roll+ctrl : ctrl;";
			op = right ? ">" : "<";
			clawsNull.transform.rotation.expression = "//Duik.footRoll\n" +
			"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(3);\n" +
			"ctrl " + op + " 0 ? ctrl : 0;";
		}

		if (arm.shoulder)
		{
			var shoulderCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.SHOULDER,DuAEF.Duik.PseudoEffectsMatchNames.SHOULDER,arm.shoulder.name + " position");

			arm.shoulder.transform.position.expression = '//Duik.shoulder\n' +
				'var c = thisComp.layer("' + ctrl.layer.name + '");\n' +
				'var a = c.effect("' + shoulderCtrl.name + '")(14).value;\n' +
				'var result = value + a;\n' +
				'if (thisLayer.hasParent)\n' +
				'{\n' +
				'var w = c.effect("' + shoulderCtrl.name + '")(9).value / 100;\n' +
				'var p = thisLayer.parent;\n' +
				'var o = c.toWorld(c.anchorPoint,0) - p.toWorld(p.anchorPoint,0);\n' +
				'var t = c.toWorld(c.anchorPoint) - p.toWorld(p.anchorPoint);\n' +
				'result = result + (t-o)*w;\n' +
				'}\n' +
				'result;';
		}

		//hide and lock
		if (handNull){
			clawsNull.enabled = false;
			clawsNull.shy = true;
			clawsNull.locked = true;
			handNull.enabled = false;
			handNull.shy = true;
			handNull.locked = true;
		}

		//select controller
		DuAEF.DuAE.Comp.unselectLayers();
		ctrl.layer.selected = true;
	})

	app.endSuppressDialogs(false);

}
