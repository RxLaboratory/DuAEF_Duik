/**
* Constructs a Structure
* @class Structure
* @classdesc A Structure.
* @property {Layer[]} [elements] - The elements of the structure, sorted by their parenting, root at 0
*/
function Structure(elements)
{
	if (typeof elements === 'undefined') elements = [];
	this.elements = elements;
	this.editModeRegExp = / \|StructureElementChildren:([\d,]*)\|/;
}

/**
* Sets a new display size for the structure
* @memberof Structure
* @param {int} [size] - The element size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Structure.sizeHint
*/
Structure.prototype.setSize = function (size)
{
	if (this.elements.length == 0) return;
	var comp = this.elements[0].containingComp;
	if (size == undefined)
	{
		size = comp.width/2 + comp.height/2;
		if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.SMALL) size = Math.floor(size/14);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.MEDIUM) size = Math.floor(size/10);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.LARGE) size = Math.floor(size/6);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.CUSTOM) size = DuAEF.Duik.Structure.size;
	}
	for (var i = 0 ; i < this.elements.length ; i++)
	{
		var layer = this.elements[i];
		layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(2).setValue(size);
	}
}

/**
* Sets a new display color for the structure
* @memberof Structure
* @param {float[]} [color=DuAEF.Duik.Structure.color] - The color
*/
Structure.prototype.setColor = function (color)
{
	if (this.elements.length == 0) return;
	var comp = this.elements[0].containingComp;

	if (color == undefined) color = DuAEF.Duik.Structure.color;
	if (color == DuAEF.DuJS.Color.Colors.RANDOM) color = DuAEF.DuJS.Color.random();

	for (var i = 0 ; i < this.elements.length ; i++)
	{
		var layer = this.elements[i];
		layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(color);
	}
}

/**
* Toggles the edit mode
* @memberof Structure
*/
Structure.prototype.toggleEditMode = function (color)
{
	if (this.elements.length == 0) return;

	var setEditMode = !this.editModeRegExp.test(this.elements[0].comment);

	for (var i = 0 ; i < this.elements.length ; i++)
	{
		this.toggleElementEditMode(i,setEditMode)
	}
}

/**
* Toggles the edit mode of one element in the structure
* @memberof Structure
* @param {int} elementIndex - The index of the element to toggle in the Structure.elements Array
* @param {boolean} setEditMode - true to turn on edit mode, false to turn it off.
*/
Structure.prototype.toggleElementEditMode = function (elementIndex,setEditMode)
{
	var element = this.elements[elementIndex];
	var comp = element.containingComp;
	var already = this.editModeRegExp.test(element.comment);

	if (setEditMode && !already)
	{
		var children = DuAEF.DuAE.Layer.getChildren(element);
		element.comment = element.comment + ' |StructureElementChildren:';
		for (var j = 0 ; j < children.length ; j++)
		{
			var child = children[j];
			element.comment = element.comment + child.index;
			if (j < children.length -1) element.comment = element.comment + ',';
			child.parent = null;
		}
		element.comment = element.comment + "|";
		element.name = '=EDIT= ' + element.name;
	}
	else if (already)
	{
		var match = this.editModeRegExp.exec(element.comment);
		if (match.length == 2)
		{
			var indices = match[1].split(',');
			//reparent
			if (indices.length > 0)
			{
				for (var i = 0 ; i < indices.length ; i++)
				{
					var index = parseInt(indices[i]);
					if (isNaN(index)) continue;
					comp.layer(index).parent = element;
				}
			}
			//remove comment
			element.comment = element.comment.replace(match[0],'');
			element.name = element.name.replace('=EDIT= ','');
		}
	}
}

/**
* Toggles visibility of the structure
* @memberof Structure
*/
Structure.prototype.showHide = function ()
{
	if (this.elements.length == 0) return;
	var comp = this.elements[0].containingComp;
	var show = !this.elements[0].enabled;

	for (var i = 0,num = this.elements.length ; i < num ; i++)
	{
		this.elements[i].enabled = show;
	}
}

/**
* Gets the unique identifier of the structure
* @memberof Structure
* @return {int} the id
*/
Structure.prototype.getId = function ()
{
	if (this.elements.length == 0) return -1;
	var params = DuAEF.Duik.getDuikMarkerParameters(this.elements[0]);
	if (!params) return -1;
	if (params[DuAEF.Duik.MarkerParameters.STRUCTURE_ID]) return params[DuAEF.Duik.MarkerParameters.STRUCTURE_ID];
	return -1;
}

/**
 * "Bakes" the appearance of the Structure,<br />
 * in order to improve performance and simplify the use of the rig when animating.
 * @memberof Structure
 */
Structure.prototype.bakeAppearence = function()
{
	for (var i = 0,num = this.elements.length ; i < num ; i++)
	{
		DuAEF.Duik.Structure.bakeAppearence(this.elements[i]);
	}
}

/**
 * Duplicates a structure,<br />
 * @memberof Structure
 * @return {Structure} The new Structure
 */
Structure.prototype.duplicate = function()
{
	if (this.elements.length == 0) return;
	//unselect all layers in the comp
	var comp = this.elements[0].containingComp;
	DuAEF.DuAE.Comp.unselectLayers(comp);
	//select elements of the structure, then duplicate
	DuAEF.DuAE.Comp.selectLayers(this.elements);
	comp.openInViewer();
	DuAEF.DuAE.App.duplicate();
	//get topmost element
	var topIndex = comp.numLayers;
	var it = new Iterator(this.elements);
	while (element = it.next())
	{
		if (element.index < topIndex) topIndex = element.index;
		if (topIndex == 1) break;
	};

	oldLayers = DuAEF.DuAE.Layer.sortByIndex(this.elements).reverse();
	var newLayers = DuAEF.DuAE.Layer.sortByIndex(comp.selectedLayers).reverse();

	//adjustments
	function layerInArray(layer,index)
	{
		return layer.index == index;
	}

	var id = new Date().getTime();

	var autorigId = new Date().getTime() + 1;

	new Iterator(newLayers).do(function(layer)
	{
		layer.moveBefore(comp.layer(topIndex));
		//set display link
		var effect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE);
		$.writeln(oldLayers);
		$.writeln(effect(3).value);
		$.writeln(layerInArray);
		var oldLinkIndex = DuAEF.DuJS.Array.indexOf(oldLayers,effect(3).value,layerInArray);
		if (oldLinkIndex >= 0)
		{
			effect(3).setValue(newLayers[oldLinkIndex].index);
		}
		//set id
		DuAEF.Duik.setDuikMarkerParameter(layer,DuAEF.Duik.MarkerParameters.STRUCTURE_ID,id);
		var params = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ID]) DuAEF.Duik.setDuikMarkerParameter(layer,DuAEF.Duik.MarkerParameters.AUTORIG_ID,autorigId);
	});



	//return
	return new Structure(newLayers);
}

/**
* Structures
* @namespace
* @memberof DuAEF.Duik
*/
DuAEF.Duik.Structure = {};

/**
 * How to get structures depending on selection<br />
 * All structure, only children elements, or only selected element
 * @enum {int}
 * @readonly
 */
DuAEF.Duik.Structure.SelectionModes =
{
	STRUCTURE: 0,
	CHILDREN: 1,
	ELEMENT: 2,
	ALL: 3
}

/**
* Size hint of structure elements
* @type {int}
* @default DuAEF.Duik.Sizes.SMALL
*/
DuAEF.Duik.Structure.sizeHint = DuAEF.Duik.Sizes.SMALL;
/**
* The default size for new structures if structureSizeHint is DuAEF.Duik.Sizes.CUSTOM
* @type {int}
* @default 100
*/
DuAEF.Duik.Structure.size = 100;
/**
* The default color for new structures
* @type {float[]}
* @default DuAEF.DuJS.Color.Colors.RANDOM
*/
DuAEF.Duik.Structure.color = DuAEF.DuJS.Color.Colors.RANDOM

/**
 * Creates a structure in a composition
 * @memberof DuAEF.Duik.Structure
 * @param {int}		num	- The number of elements of the structure
 * @param {CompItem}	comp	- The composition where to create the Structure
 * @param {string}	[name="Name"]	- The name of the structure (used as layer names)
 * @param {int}	[id] - An identifier for this structure
 * @return {Structure|null}	The Structure or null if there is no active composition
 */
DuAEF.Duik.Structure.addStructure = function (num,comp,name,id)
{
	if (name === undefined) name = "Name";
	if (id === undefined) id = new Date().getTime();

	//end
	num++;

	//structure
	var structure = new Structure();

	//elements length
	var length = comp.width/2/(num+1);

	var prevElement = null;
	var color = DuAEF.Duik.Structure.color;
	if (color == DuAEF.DuJS.Color.Colors.RANDOM)
	{
		color = DuAEF.DuJS.Color.random();
	}

	for (var i = 0 ; i < num ; i++)
	{
		var end = i == num-1;
		var element = DuAEF.Duik.Structure.addStructureElement(comp,color,undefined,id);
		if (end)
		{
			element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S-End | " + name, comp);
			DuAEF.Duik.setDuikMarker(element,"Structure end",DuAEF.Duik.LayerTypes.STRUCTURE);
		}
		else
		{
			element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | " + name, comp);
		}

		if (prevElement)
		{
			element.parent = prevElement;
			element.transform.position.setValue([length,0]);
		}
		else
		{
			element.transform.position.setValue([length+comp.width/4,comp.height/2]);
		}
		prevElement = element;
		structure.elements.push(element);
	}

	//links and layer selection
	for (var i = 0;i < structure.elements.length ; i++)
	{
		if (i == structure.elements.length - 1)
		{
			structure.elements[i].effect("Structure")(3).setValue(structure.elements[i].index);
			structure.elements[i].selected = false;
		}
		else
		{
			structure.elements[i].effect("Structure")(3).setValue(structure.elements[i+1].index);
		}
	}
	structure.elements[0].selected = true;

	return structure;
}

/**
 * Creates an element for a structure in a composition
 * @memberof DuAEF.Duik.Structure
 * @param {CompItem}	comp	- The composition where to create the Structure
 * @param {float[]}	[color=[1,0.764,0.764,1]]		- The color of the element, [R,G,B,A] Array from 0.0 to 1.0
 * @param {float}	[size] 		- The element size, a percentage. By default, it will adjust automatically depending on comp size and DuikLib.structureSizeHint
 * @return {ShapeLayer}	The element
 */
DuAEF.Duik.Structure.addStructureElement = function (comp,color,size,id)
{
	if (size == undefined)
	{
		size = comp.width/2 + comp.height/2;
		if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.SMALL) size = Math.floor(size/14);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.MEDIUM) size = Math.floor(size/10);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.LARGE) size = Math.floor(size/6);
		else if (DuAEF.Duik.Structure.sizeHint == DuAEF.Duik.Sizes.CUSTOM) size = DuAEF.Duik.Structure.size;
	}

	if (!color)
	{
		color = DuAEF.Duik.Structure.color;
		if (color == DuAEF.DuJS.Color.Colors.RANDOM)
		{
			color = DuAEF.DuJS.Color.random();
		}
	}


	//======= CREATE ELEMENT USING SHAPE LAYER =======
	var element = comp.layers.addShape();
	DuAEF.Duik.setDuikMarker(element,"Structure",DuAEF.Duik.LayerTypes.STRUCTURE);
	DuAEF.Duik.setDuikMarkerParameter(element,DuAEF.Duik.MarkerParameters.STRUCTURE_ID,id);

	//add effect
	var elementEffect = DuAEF.DuAE.Layer.addPseudoEffect(element,DuAEF.Duik.PseudoEffects.STRUCTURE,DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE,"Structure");
	elementEffect(2).setValue(size);
	elementEffect(4).setValue(color);

	//content
	DuAEF.DuAE.Layer.applyPreset(element,DuAEF.Duik.Presets.STRUCTURE_ELEMENT);

	element.guideLayer = true;

	//group
	DuAEF.Dugr.addLayerToGroup(element,"Structures");

	element.quality = LayerQuality.DRAFT;

	return element;
}

/**
 * Gets structures in the comp. If some layers are selected, uses selectionMode, else returns all structure elements found.
 * @memberof DuAEF.Duik.Structure
 * @param {CompItem}	[comp=app.project.activeItem]	- The composition where to get the structures
 * @param {int} [structureSelectionMode=DuAEF.Duik.Structure.SelectionModes.STRUCTURE]	- The selection mode. One of {@link DuAEF.Duik.Structure.SelectionModes}
 * @return {Structure[]}	The structures. If selectionMode is DuAEF.Duik.Structure.SelectionModes.ELEMENT, will be one structure with all elements found
 */
DuAEF.Duik.Structure.getStructures = function (comp,selectionMode)
{
	if (typeof comp === 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return [];

	if (selectionMode == undefined) selectionMode = DuAEF.Duik.Structure.SelectionModes.STRUCTURE;
	var layers = comp.selectedLayers;

	if (selectionMode == DuAEF.Duik.Structure.SelectionModes.ALL)
	{
		layers = comp.layers;
		selectionMode = DuAEF.Duik.Structure.SelectionModes.STRUCTURE;
	}

	var structures = [];
	var indexed = [];

	if (layers.length == 0) return structures;

	var structure = new Structure();

	var it = new Iterator(layers);

	it.do(function(layer)
	{
		if (!DuAEF.Duik.isLayerType(layer,DuAEF.Duik.LayerTypes.STRUCTURE)) return;
		if (DuAEF.DuJS.Array.indexOf(indexed,layer.index) >= 0) return;

		indexed.push(layer.index);

		if (selectionMode == DuAEF.Duik.Structure.SelectionModes.ELEMENT)
		{
			structure.elements.push(layer);
			return;
		}

		structure = new Structure();
		structure.elements.push(layer);
		//get children
		if (selectionMode == DuAEF.Duik.Structure.SelectionModes.CHILDREN || selectionMode == DuAEF.Duik.Structure.SelectionModes.STRUCTURE)
		{
			//for all layers in the comp, get child
			var childLayer = layer;
			while (childLayer != null)
			{
				var structureEffect = childLayer.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE);
				var childIndex = -1;
				if (structureEffect) childIndex = structureEffect(3).value;
				if (childIndex == childLayer.index) break;
				var currentIndex = childLayer.index;
				childLayer = null;
				//get child
				if (childIndex > 0)
				{
					var child = comp.layer(childIndex);
					//check if it's a structure element
					if (DuAEF.Duik.isLayerType(child,DuAEF.Duik.LayerTypes.STRUCTURE))
					{
						structure.elements.push(child);
						childLayer = child;
						indexed.push(child.index);
						continue;
					}
				}
				//search child
				for (var j = 1 ; j <= comp.layers.length ; j++)
				{
					var child = comp.layer(j);
					if (child.parent == null) continue;
					if (DuAEF.Duik.isLayerType(child,DuAEF.Duik.LayerTypes.STRUCTURE) && child.parent.index == currentIndex)
					{
						structure.elements.push(child);
						childLayer = child;
						indexed.push(child.index);
						break;
					}
				}
			}
		}

		//get parents
		if (selectionMode == DuAEF.Duik.Structure.SelectionModes.STRUCTURE)
		{
			var parentLayer = layer;
			while (parentLayer != null)
			{
				var testParent = parentLayer.parent;
				var childIndex = parentLayer.index;

				if (testParent == null) break;
				else if (!DuAEF.Duik.isLayerType(testParent,DuAEF.Duik.LayerTypes.STRUCTURE)) break;

				var structureEffect = testParent.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE);
				var testIndex = -1;
				if (structureEffect) testIndex = structureEffect(3).value;

				parentLayer = null;

				if (testIndex == testParent.index) break;
				else if (testIndex == 0 || testIndex == childIndex)
				{
					structure.elements.unshift(testParent);
					parentLayer = testParent;
					indexed.push(testParent.index);
				}
			}
		}

		structures.push(structure);

	});

	if (selectionMode == DuAEF.Duik.Structure.SelectionModes.ELEMENT) structures.push(structure);

	return structures;
}

/**
 * Selects structures in the comp. If some layers are selected, uses selectionMode, else returns selects all structure elements found.
 * @memberof DuAEF.Duik.Structure
 * @param {CompItem}	[comp=app.project.activeItem]	- The composition where to select the structures
 * @param {int} [structureSelectionMode=DuAEF.Duik.Structure.SelectionModes.STRUCTURE]	- The selection mode. One of {@link DuAEF.Duik.Structure.SelectionModes}
 * @return {Structure[]}	The structures. If selectionMode is DuAEF.Duik.Structure.SelectionModes.ELEMENT, will be one structure with all elements found
 */
DuAEF.Duik.Structure.selectStructures = function (comp, selectionMode)
{
	if (typeof comp === 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;

	var structures = DuAEF.Duik.Structure.getStructures(comp, selectionMode);
	if (structures.length == 0) return;

	DuAEF.DuAE.Comp.unselectLayers(comp);

	var itStr = new Iterator(structures);
	itStr.do(function (structure)
	{
		var itElmts = new Iterator(structure.elements);
		itElmts.do(function (element)
		{
			element.selected = true;
		});
	});
}

/**
 * Creates a predefined structure for an arm.
 * @memberof DuAEF.Duik.Structure
 * @param {boolean} [shoulder=false] - true if the arm has a shoulder.
 * @param {boolean} [humerus=true] - true if the arm has a humerus.
 * @param {boolean} [radius=true] - true if the arm has a radius.
 * @param {boolean} [hand=true] - true if the arm has a hand.
 * @param {boolean} [claws=false] - true if the arm has claws.
 * @param {boolean} [left=false] - true if this is a Left arm, false for a Right arm
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 * @param {CompItem} [comp] - The composition where to create the structure. By default, will try with the active item, if any.
 * @param {Number[]} [originPosition] - The coordinates in the comp of the first element of the structure.
 * @param {boolean} [symetry=false] - changes the coordinates of the humerus, applying a symetry on the shoulder (if any).
 * @return {Structure|null} The structure.
 */
DuAEF.Duik.Structure.createArm = function(shoulder,humerus,radius,hand,claws,left,type,comp,originPosition,symetry)
{
	if (typeof comp == 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;
	if (typeof shoulder == 'undefined') shoulder = false;
	if (typeof humerus == 'undefined') humerus = true;
	if (typeof radius == 'undefined') radius = true;
	if (typeof hand == 'undefined') hand = true;
	if (typeof claws == 'undefined') claws = false;
	if (typeof left == 'undefined') left = false;
	if (typeof type == 'undefined') type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	if (typeof originPosition == 'undefined') originPosition = [comp.width/2,comp.height/4];
	if (typeof symetry == 'undefined') symetry = false;
	var plantigrade = type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	var digitigrade = type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE;
	var ungulate = type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE;

	//create structure
	var numElements = 0;
	if (shoulder) numElements++;
	if (humerus) numElements++;
	if (radius) numElements++;
	if (hand) numElements++;
	if (claws) numElements++;

	if (numElements == 0) return null;

	var structure = DuAEF.Duik.Structure.addStructure(numElements,comp);

	//name and move

	//element index we're working on
	var currentElement = 0;

	//size of the humerus
	var size = comp.height/7;
	if (digitigrade) size = comp.height/9;
	else if (ungulate) size = comp.height/11;

	//position of the next limb
	var nextPosition = originPosition;

	var shoulderLayer,humerusLayer,radiusLayer,handLayer,clawsLayer,palmLayer,tipLayer;

	if (shoulder)
	{
		//set limb position and name
		var element = structure.elements[currentElement];
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Shoulder",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.RAINBOX_RED);
		//position of the next limb
		element.transform.position.setValue(nextPosition);
		shoulderLayer = element;
		if (!symetry)
		{
			if (plantigrade) nextPosition = [-size/2,size/6];
			else if (digitigrade) nextPosition = [-size*3/4,size*3/4];
			else if (ungulate) nextPosition = [-size,size];
		}
		else
		{
			if (plantigrade) nextPosition = [size/2,size/6];
			else if (digitigrade) nextPosition = [size*3/4,size*3/4];
			else if (ungulate) nextPosition = [size,size];
		}


		//next
		currentElement++;
	}
	if (humerus)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Arm",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.ORANGE);
		humerusLayer = element;
		if (plantigrade) nextPosition = [size/6,size];
		else if (digitigrade) nextPosition = [size*3/4,size*3/4];
		else if (ungulate) nextPosition = [size*3/4,size*3/4];
		currentElement++;
	}
	if (radius)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Forearm",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.YELLOW);
		radiusLayer = element;
		if (plantigrade) nextPosition = [-size/6,size];
		else if (digitigrade) nextPosition = [-size/3,size*4/3];
		else if (ungulate) nextPosition = [-size/2,size*3/2];
		currentElement++;
	}
	if (hand)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Hand",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_BLUE);
		handLayer = element;
		if (plantigrade)
		{
			if (claws) nextPosition = [-size/3,size/8];
			else nextPosition = [size/3,size/3];
		}
		else if (digitigrade) nextPosition = [0,size*3/8];
		else if (ungulate) nextPosition = [size/5,size];
		currentElement++;
	}
	if (claws)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		if (ungulate) element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Hoof",comp);
		else element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Claws",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_PURPLE);
		clawsLayer = element;
		if (plantigrade) nextPosition = [-size/4,0];
		else if (digitigrade) nextPosition = [-size/4,0];
		else if (ungulate) nextPosition = [0,size/2];
		currentElement++;
	}
	var element = structure.elements[currentElement];
	element.transform.position.setValue(nextPosition);
	element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Arm Tip",comp);
	tipLayer = element;

	//heel
	if (plantigrade && claws)
	{
		var heelStructure = DuAEF.Duik.Structure.addStructure(0,comp);
		var element = heelStructure.elements[0];
		element.parent = structure.elements[structure.elements.length-1];
		element.transform.position.setValue([size/4+size/3,0]);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Heel",comp);
		element.selected = false;
		structure.elements[0].selected = true;
		structure.elements.push(element);
		palmLayer = element;
	}

	DuAEF.Duik.Autorig.tagArm(shoulderLayer,humerusLayer,radiusLayer,handLayer,clawsLayer,palmLayer,tipLayer,type)

	return structure;
}

/**
 * Creates a predefined structure for an leg.
 * @memberof DuAEF.Duik.Structure
 * @param {boolean} [femur=true] - true if the leg has a shoulder.
 * @param {boolean} [tibia=true] - true if the leg has a humerus.
 * @param {boolean} [foot=true] - true if the leg has a radius.
 * @param {boolean} [toes=true] - true if the leg has a hand.
 * @param {boolean} [left=false] - true if this is a Left leg, false for a Right leg
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 * @param {CompItem} [comp] - The composition where to create the structure. By default, will try with the active item, if any.
 * @param {Number[]} [originPosition] - The coordinates in the comp of the first element of the structure.
 * @return {Structure|null} The structure.
 */
DuAEF.Duik.Structure.createLeg = function(femur,tibia,foot,toes,left,type,comp,originPosition)
{
	if (typeof comp == 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;
	if (typeof femur == 'undefined') femur = true;
	if (typeof tibia == 'undefined') tibia = true;
	if (typeof foot == 'undefined') foot = true;
	if (typeof toes == 'undefined') toes = true;
	if (typeof left == 'undefined') left = false;
	if (typeof type == 'undefined') type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	if (typeof originPosition == 'undefined') originPosition = [comp.width/2,comp.height/2];
	var plantigrade = type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	var digitigrade = type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE;
	var ungulate = type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE;

	//create structure
	var numElements = 0;
	if (femur) numElements++;
	if (tibia) numElements++;
	if (foot) numElements++;
	if (toes) numElements++;

	if (numElements == 0) return null;

	var structure = DuAEF.Duik.Structure.addStructure(numElements,comp);

	//name and move

	//element index we're working on
	var currentElement = 0;

	//size of the femur
	var size = comp.height/6;
	if (digitigrade) size = comp.height/8;
	else if (ungulate) size = comp.height/9;

	//position of the next limb
	var nextPosition = originPosition;

	var femurLayer,tibiaLayer,footLayer,toesLayer,heelLayer,tipLayer,type;

	if (femur)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Thigh",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.ORANGE);
		femurLayer = element;
		if (plantigrade) nextPosition = [-size/6,size];
		else if (digitigrade) nextPosition = [-size*3/4,size*3/4];
		else if (ungulate) nextPosition = [-size/2,size*3/4];
		currentElement++;
	}
	if (tibia)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Calf",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.YELLOW);
		tibiaLayer = element;
		if (plantigrade) nextPosition = [size/6,size];
		else if (digitigrade) nextPosition = [size*3/4,size*3/4];
		else if (ungulate) nextPosition = [size*2/3,size*3/4];
		currentElement++;
	}
	if (foot)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Foot",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_BLUE);
		footLayer = element;
		if (plantigrade)nextPosition = [-size*3/8,size/6];
		else if (digitigrade) nextPosition = [0,size/2];
		else if (ungulate) nextPosition = [-size/4,size];
		currentElement++;
	}
	if (toes)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		if (plantigrade) element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Toes",comp);
		else if (digitigrade) element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Claws",comp);
		else element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Hoof",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_PURPLE);
		toesLayer = element;
		if (plantigrade) nextPosition = [-size/8,0];
		else if (digitigrade) nextPosition = [-size/4,0];
		else if (ungulate) nextPosition = [0,size/4];
		currentElement++;
	}
	var element = structure.elements[currentElement];
	element.transform.position.setValue(nextPosition);
	element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Tiptoe",comp);
	tipLayer = element;
	//heel
	if (plantigrade && toes)
	{
		var heelStructure = DuAEF.Duik.Structure.addStructure(0,comp);
		var element = heelStructure.elements[0];
		element.parent = structure.elements[structure.elements.length-1];
		element.transform.position.setValue([size/8+size*3/8,0]);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Heel",comp);
		element.selected = false;
		structure.elements[0].selected = true;
		heelLayer = element;
	}

	DuAEF.Duik.Autorig.tagLeg(femurLayer,tibiaLayer,footLayer,toesLayer,heelLayer,tipLayer,type)

	return structure;
}

/**
 * Creates a predefined structure for an spine / neck / head.
 * @memberof DuAEF.Duik.Structure
 * @param {boolean} [hips=true] - true if the spine has a hips.
 * @param {int} [spineCount=2] - the number of elements for the spine
 * @param {int} [neckCount=1] - the number of elements for the neck
 * @param {boolean} [head=true] - true if the spine has a hand.
 * @param {CompItem} [comp] - The composition where to create the structure. By default, will try with the active item, if any.
 * @param {Number[]} [originPosition] - The coordinates in the comp of the first element of the structure.
 * @return {Structure|null} The structure.
 */
DuAEF.Duik.Structure.createSpine = function(hips,spineCount,neckCount,head,comp,originPosition)
{
	if (typeof comp == 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;
	if (typeof hips == 'undefined') hips = true;
	if (typeof spineCount == 'undefined') spineCount = 2;
	if (typeof neckCount == 'undefined') neckCount = 1;
	if (typeof head == 'undefined') head = true;
	if (typeof originPosition == 'undefined') originPosition = [comp.width/2,comp.height*3/4];

	//create structure
	var numElements = 0;
	if (head) numElements++;
	numElements += neckCount;
	numElements += spineCount;
	if (hips) numElements++;

	if (numElements == 0) return null;

	var structure = DuAEF.Duik.Structure.addStructure(numElements,comp);

	//name and move

	//element index we're working on
	var currentElement = 0;

	//size of the spine
	var size = comp.height/4;

	//position of the next limb
	var nextPosition = originPosition;

	var hipsLayer,headLayer,tipLayer;
	var spineLayer = [];
	var neckLayer = [];

	if (hips)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Hips",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.RAINBOX_RED);
		hipsLayer = element;
		nextPosition = [0,-size/6];
		currentElement++;
	}
	for (var i = 0 ; i < spineCount ; i++)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Spine",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.ORANGE);
		spineLayer.push(element);
		nextPosition = [0,-size/spineCount];
		currentElement++;
	}
	for (var i = 0 ; i < neckCount ; i++)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Neck",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.YELLOW);
		neckLayer.push(element);
		nextPosition = [0,-size/6/neckCount];
		currentElement++;
	}
	if (head)
	{
		var element = structure.elements[currentElement];
		element.transform.position.setValue(nextPosition);
		element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Head",comp);
		element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_BLUE);
		headLayer = element;
		nextPosition = [0,-size/3];
		currentElement++;
	}
	var element = structure.elements[currentElement];
	element.transform.position.setValue(nextPosition);
	element.name = DuAEF.DuAE.Comp.newUniqueLayerName("S | Spine Tip",comp);
	tipLayer = element;

	DuAEF.Duik.Autorig.tagSpine(hipsLayer,spineLayer,neckLayer,headLayer,tipLayer)

	return structure;
}

/**
 * Creates a predefined structure for a tail.
 * @memberof DuAEF.Duik.Structure
 * @param {int} [elementCount=2] - the number of elements for the tail
 * @param {CompItem} [comp] - The composition where to create the structure. By default, will try with the active item, if any.
 * @return {Structure|null} The structure.
 */
DuAEF.Duik.Structure.createTail = function(elementCount,comp)
{
	if (comp == undefined) comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;

	//create structure
	if (elementCount === undefined) elementCount = 3;
	if (elementCount == 0) return;

	var structure = DuAEF.Duik.Structure.addStructure(elementCount,comp, "Tail");

	var tailLayer = [];
	var tipLayer;

	for (var i = 0 ; i < elementCount ; i++)
	{
		var element = structure.elements[i];
		if (i < elementCount/3) element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.ORANGE);
		else if (i < elementCount*2/3) element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.YELLOW);
		else element.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE)(4).setValue(DuAEF.DuJS.Color.Colors.LIGHT_BLUE);
		tailLayer.push(element);
	}

	tipLayer = structure.elements[elementCount];

	DuAEF.Duik.Autorig.tagTail(tailLayer,tipLayer);

	return structure;
}

/**
 * Resets the transformations (rotation and scale) of the element to 0 and 100%
 * @memberof DuAEF.Duik.Structure
 * @param {Layer} layer - the element
 */
DuAEF.Duik.Structure.resetTransform = function(layer)
{
	if (!DuAEF.Duik.isLayerType(layer,DuAEF.Duik.LayerTypes.STRUCTURE)) return;
	var children = DuAEF.DuAE.Layer.getChildren(layer);
	var it = new Iterator(children);
	it.do(function(child){child.parent = null;});
	layer.transform.rotation.setValue(0);
	layer.transform.scale.setValue([100,100,100]);
	it.do(function(child){child.parent = layer;});
}

/**
 * "Bakes" the appearance of the Structure,<br />
 * in order to improve performance and simplify the use of the rig when animating.
 * @memberof DuAEF.Duik.Structure
 * @param {Layer} layer - the element
 */
DuAEF.Duik.Structure.bakeAppearence = function(layer)
{
	if (!DuAEF.Duik.isLayerType(layer,DuAEF.Duik.LayerTypes.STRUCTURE)) return;

	var effect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.STRUCTURE);
	if (!effect) return;

	//bake all
	var elementGroup = layer.property('ADBE Root Vectors Group')("Structure Element");
	DuAEF.DuAE.Property.removeExpression( elementGroup.property('ADBE Vector Transform Group')('ADBE Vector Scale') );
	DuAEF.DuAE.Property.removeExpression( elementGroup.property("ADBE Vector Transform Group")("ADBE Vector Rotation") );

	var displayGroup = elementGroup.property('ADBE Vectors Group')("Display");
	var stretchBoneGroup = displayGroup.property('ADBE Vectors Group')("Link");
	var stretchBoneContent = stretchBoneGroup.property("ADBE Vectors Group");

	DuAEF.DuAE.Property.removeExpression( stretchBoneContent.property("ADBE Vector Shape - Star")("ADBE Vector Star Outer Roundess") );
	DuAEF.DuAE.Property.removeExpression( stretchBoneContent.property("ADBE Vector Graphic - Fill")("ADBE Vector Fill Color") );
	DuAEF.DuAE.Property.removeExpression( stretchBoneGroup.property("ADBE Vector Transform Group")("ADBE Vector Scale") );

	var editModeGroup = displayGroup.property('ADBE Vectors Group')("Edit Mode");
	var editModeContent = editModeGroup.property("ADBE Vectors Group");

	DuAEF.DuAE.Property.removeExpression( editModeContent.property("ADBE Vector Shape - Ellipse")("ADBE Vector Ellipse Size") );
	DuAEF.DuAE.Property.removeExpression( editModeContent.property("ADBE Vector Graphic - Fill")("ADBE Vector Fill Color") );

	//remove effect
	effect.remove();

}
