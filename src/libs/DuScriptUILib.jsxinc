/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

#include "icons/w14_menu_l.png.jsxinc"

#include "icons/w14_menu_m.png.jsxinc"

#include "icons/w14_layers_m.png.jsxinc"

#include "icons/w14_layers_l.png.jsxinc"

#include "icons/w14_update_l.png.jsxinc"

#include "icons/w14_update_m.png.jsxinc"

#include "icons/w14_checked_m.png.jsxinc"

#include "icons/w14_checked_l.png.jsxinc"

#include "icons/w14_unchecked_l.png.jsxinc"

#include "icons/w14_emptysquare_m.png.jsxinc"

#include "icons/w14_url_m.png.jsxinc"

#include "icons/w14_url_l.png.jsxinc"

#include "icons/w14_cancel_m.png.jsxinc"

#include "icons/w14_cancel_l.png.jsxinc"

#include "icons/w14_comp_l.png.jsxinc"

#include "icons/w14_comp_m.png.jsxinc"

#include "icons/w14_eyedropper_m.png.jsxinc"

#include "icons/w14_eyedropper_l.png.jsxinc"

#include "icons/w14_back_l.png.jsxinc"

#include "icons/w14_back_m.png.jsxinc"

#include "icons/w14_next_m.png.jsxinc"

#include "icons/w14_next_l.png.jsxinc"

#include "icons/w14_news_l.png.jsxinc"

#include "icons/w14_news_m.png.jsxinc"

#include "icons/w14_help_m.png.jsxinc"

#include "icons/w14_help_l.png.jsxinc"

#include 'icons/w25_back_r.jsxinc'

#include 'icons/w25_back_m.jsxinc'

#include 'icons/w25_check_r.jsxinc'

#include 'icons/w25_check_g.jsxinc'
#include 'icons/w18_discord_l.png.jsxinc'
#include 'icons/w18_discord_r.png.jsxinc'
#include 'icons/w18_forum_l.png.jsxinc'
#include 'icons/w18_forum_r.png.jsxinc'
#include 'icons/w18_bugreport_l.png.jsxinc'
#include 'icons/w18_bugreport_r.png.jsxinc'
#include 'icons/w18_featurerequest_r.png.jsxinc'
#include 'icons/w18_featurerequest_l.png.jsxinc'

/**
 * ScriptUI tools
 * @namespace
 * @memberof DuAEF
 */
DuAEF.DuScriptUI = {};

/**
 * The default alignment of children of containers with "column" orientation
 * @memberof DuAEF.DuScriptUI
 * @type {String[]}
 * @default ["fill","top"]
 */
DuAEF.DuScriptUI.defaultColumnAlignment = [ "fill", "top" ];

/**
 * The default alignment of children of containers with "row" orientation
 * @memberof DuAEF.DuScriptUI
 * @type {String[]}
 * @default ["left","center"]
 */
DuAEF.DuScriptUI.defaultRowAlignment = [ "left", "center" ];

/**
 * The default alignment of children of containers with "stack" orientation
 * @memberof DuAEF.DuScriptUI
 * @type {String[]}
 * @default ["fill","top"]
 */
DuAEF.DuScriptUI.defaultStackAlignment = [ "fill", "fill" ];

/**
 * The default spacing of containers
 * @memberof DuAEF.DuScriptUI
 * @type {int}
 * @default 2
 */
DuAEF.DuScriptUI.defaultSpacing = 2;

/**
 * The default margins of containers
 * @memberof DuAEF.DuScriptUI
 * @type {int}
 * @default 2
 */
DuAEF.DuScriptUI.defaultMargins = 2;

/**
 * Stores all strings used by the UI.<br />
 * This can be very useful to work with a translation framework.
 */
DuAEF.DuScriptUI.uiStrings = [];

//low-level undocumented list: keeps the currently highlighted controls
DuAEF.DuScriptUI.highlightedControls = [];

//low-level undocumented list: keeps all the tabs, used in the buildAllTabs method
DuAEF.DuScriptUI.allTabs = [];

//low-level undocumented flag: set to true when showUI has been called. Before this, there's no need to set layout for childre, this will improve performance greatly.
DuAEF.DuScriptUI.uiShown = false;

//low-level undocumented function: dims all currently highlighted controls
DuAEF.DuScriptUI.dimControls = function( e )
{
    if ( DuAEF.DuScriptUI.highlightedControls.length == 0 ) return;
    for ( var i = DuAEF.DuScriptUI.highlightedControls.length - 1; i >= 0; i-- )
    {
        try
        {
            DuAEF.DuScriptUI.highlightedControls[ i ].dim();
        }
        catch ( e )
        {};
        DuAEF.DuScriptUI.highlightedControls.pop();
    }
}

/**
 * Displays an invitation to enable file and network access.<br />
 * Use this method before loading any scripts which needs this authorization. 
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window} ui	- A container to display the UI.constructor
 * @param {function} callback - The function to execute when the user has granted access to file and network.<br />
 * This function should be the one which loads the script.
 * @param {string} [scriptName=DuAEF.scriptName] - The name of the script, used in the UI.
 * @param {boolean} [reInit=false] - Set to true to display to prompt to reinit/reinstall the script below the button to ask for file access.
 * @param {function} reInitMethod - A function to run to reinit/reinstall the script as soon as we get file access, before running the callback
 */
DuAEF.DuScriptUI.askFilesAndNetworkAccess = function( ui, callback, scriptName, reInit, reInitMethod )
{
    reInit = def( reInit, false, false);
	scriptName = def(scriptName, DuAEF.scriptName, false);

    if ( !DuAEF.DuAE.App.hasFilesAndNetworkAccess )
    {
        var ui_accessFileAndNetworkGroup = DuAEF.DuScriptUI.addGroup( ui.contents, 'column' );

        var accessExplanation = scriptName + " needs to be allowed to write files or access the network to continue.\n\n" +
            "Please, check the box called 'Allow Scripts to write files...' in the preferences of After Effects.";
        var reInitPrompt = "/!\\ ======\n/!\\ It seems something went wrong with " + scriptName + " the last time you used it.\n" +
            "/!\\ Check the box below to re-initialize " + scriptName + " and try to make it work again.\n/!\\ ======";

        var ui_reinitCheckbox;
        
        ui_accessFileAndNetworkGroup.add( 'statictext', undefined, accessExplanation,
        {
            multiline: true
        } );

        //if reinit add prompt
        if (reInit)
        {
            ui_accessFileAndNetworkGroup.add( 'statictext', undefined, reInitPrompt,
            {
                multiline: true
            } );
            ui_reinitCheckbox = ui_accessFileAndNetworkGroup.add( 'checkbox', undefined,"Re-initialize "+ scriptName + " before launch.");
        }

        var ui_fileAndNetworkPrefButton = ui_accessFileAndNetworkGroup.add( 'button', undefined, 'Open preferences' );

        ui_fileAndNetworkPrefButton.onClick = function()
        {
            var ok = DuAEF.DuAE.App.askFilesAndNetworkAccess( false );
            if ( ok )
            {
                ui_accessFileAndNetworkGroup.visible = false;
                //if reinit and box checked, reinitmethod before callback
                if (reInit)
                {
                    if (ui_reinitCheckbox.value) reInitMethod();
                }
                callback();
            }
        }

        DuAEF.DuScriptUI.showUI( ui, false );
        return;
    }

    callback( ui );
}

/**
 * Resets the layout of the whole ui containing a scriptUI item.
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI} item - The ScriptUI element which needs to be resized
 */
DuAEF.DuScriptUI.layout = function( item )
{
    item.layout.layout( true );
    item.layout.resize();
}

/**
 * Adjust the color according to the brightness setting of After Effects
 * @memberof DuAEF.DuScriptUI
 * @param {float[]} color - The color [R,V,B,A] Array
 * @return {float[]} - The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.adjustColor = function( color )
{
    if ( !DuAEF.DuJS.Color.validateColor(color) ) return color;
    //gets the main application color
    var q = app.themeColor( 78 )[ 0 ];
    //the darkest one is 0.15000000596046
    q = q - 0.15000000596046;
    var newColor = color + [ q, q, q, 0 ];
    newColor = DuAEF.DuJS.Math.clamp( newColor );
    return newColor;
}

/**
 * Changes the color of the text of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI}		text	- The ScriptUI Object
 * @param {float[]}				color	- The new color [R,V,B,A] Array
 * @param {bool}				[adjusted=true]	- lightens the color if the brightness setting of Ae is not set on the darkest one
 */
DuAEF.DuScriptUI.setTextColor = function( text, color, adjusted )
{
    if ( typeof adjusted === 'undefined' ) adjusted = true;
    if ( !text ) throw "You must provide a ScriptUI Control to change the color of the text";
    if ( color.length == 3 ) color.push( 1 );
    if ( adjusted ) color = DuAEF.DuScriptUI.adjustColor( color );
    color = DuAEF.DuJS.Math.clamp( color );
    var g = text.graphics;
    var textPen = g.newPen( g.PenType.SOLID_COLOR, color, 1 );
    g.foregroundColor = textPen;
}

/**
 * Changes the color of the background of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI} uiItem - The ScriptUI Object
 * @param {Array} color - The new color [R,V,B,A] Array
 * @param {bool} [adjusted=true] - lightens the color if the brightness setting of Ae is not set on the darkest one
 */
DuAEF.DuScriptUI.setBackgroundColor = function( uiItem, color, adjusted )
{
    adjusted = def( adjusted, true );
    if ( typeof uiItem === 'undefined' ) throw "You must provide a ScriptUI Control to change the color of the background";
    var c = color;
    if ( adjusted ) c = DuAEF.DuScriptUI.adjustColor( color );
    if ( !DuAEF.DuJS.Color.validateColor(c) ) return;
    var g = uiItem.graphics;
    var brush = g.newBrush( g.BrushType.SOLID_COLOR, c );
    g.backgroundColor = brush;
}
/**
 * @class
 * @name DuPanel
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Panel or Window.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createUI} to create a Panel.<br />
 * The DuPanel inherits the Panel or Window object from ScriptUI and has all of its properties and methods.
 * @property {Group} contents - The ScriptUI group where the new controls must be added. Do not add any control directly inside the DuPanel.
 * @property {DuPanel~refreshUI} refreshUI - A function to reload a script in this panel
 */

/**
 * A function to reload a script in this panel.
 * @callback DuPanel~refreshUI
 * @param {File} file - The script to reload. 
 * @return {boolean} true on success, false otherwise.
 * @memberof DuPanel
 */

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string}	scriptName	- A name for this UI
 * @param {string[]}	[contentAlignment=DuAEF.DuScriptUI.defaultColumnAlignment]	- The alignment of the contents in the panel
 * @return {DuPanel}	The panel created, either a ScriptUI Panel or a ScriptUI Window.
 * @example
 * var ui = DuAEF.DuScriptUI.createUI(this,"Test Script");
 * var refreshButton = ui.contents.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuAEF.DuScriptUI.showUI(ui);
 */
DuAEF.DuScriptUI.createUI = function( container, scriptName, contentAlignment )
{
    scriptName = def(scriptName, DuAEF.scriptName, false);
    contentAlignment = def(contentAlignment, DuAEF.DuScriptUI.defaultColumnAlignment, false);

    if ( scriptName != '' ) DuAEF.DuScriptUI.uiStrings.push( scriptName );
    scriptName = tr( scriptName );

    var myPal = null;
    container instanceof Panel ? myPal = container : myPal = new Window( 'palette', scriptName, undefined,
    {
        resizeable: true
    } );

    if ( myPal == null ) throw "Failed to create User Interface.";

    myPal.margins = 0;
    myPal.spacing = 0;

    //create margins to dim buttons
    var topMargin = myPal.add( 'button' );
    topMargin.onDraw = function() {};
    topMargin.minimumSize.height = DuAEF.DuScriptUI.defaultMargins;
    topMargin.alignment = [ 'fill', 'top' ];
    topMargin.maximumSize.height = topMargin.minimumSize.height = topMargin.preferredSize.height = DuAEF.DuScriptUI.defaultMargins;

    var mainRow = myPal.add( 'group' );
    mainRow.alignment = contentAlignment;
    mainRow.alignChildren = contentAlignment;
    mainRow.margins = 0;
    mainRow.spacing = 0;

    var leftMargin = mainRow.add( 'button' );
    leftMargin.onDraw = function() {};
    leftMargin.maximumSize.width = leftMargin.minimumSize.width = leftMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
    leftMargin.alignment = [ 'left', 'fill' ];

    myPal.contents = mainRow.add( 'group' );
    myPal.contents.margins = 0;
    myPal.contents.spacing = DuAEF.DuScriptUI.defaultSpacing;
    myPal.contents.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
    myPal.contents.orientation = "column";

    var rightMargin = mainRow.add( 'button' );
    rightMargin.onDraw = function() {};
    rightMargin.maximumSize.width = rightMargin.minimumSize.width = rightMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
    rightMargin.alignment = [ 'right', 'fill' ];

    var bottomMargin = myPal.add( 'button' );
    bottomMargin.onDraw = function() {};
    bottomMargin.maximumSize.height = bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = DuAEF.DuScriptUI.defaultMargins;
    bottomMargin.alignment = [ 'fill', 'bottom' ];

    myPal.refreshUI = function( scriptFile )
    {

        function refresh ()
        {
            var ok = false;
            DuAEF.DuScriptUI.dimControls();
            // Remove everything
            for ( var i = myPal.children.length - 1; i >= 0; i-- )
            {
                myPal.remove( this.children[ i ] );
            }

            // delete DuAEF
            delete DuAEF;
            delete tr;

            // Run the scriptFile
            try
            {
                ok = true;
                $.evalFile( scriptFile );
            }
            catch ( err )
            {
                ok = false;
                //add debug info
                if ( DuAEF.debug )
                {
                    myPal.add( 'statictext', undefined, err.fileName,
                    {
                        multiline: true
                    } );
                    myPal.add( 'statictext', undefined, err.message,
                    {
                        multiline: true
                    } );
                    myPal.add( 'statictext', undefined, "on line" + err.line );
                    //add a refresh button
                    var button = myPal.add( 'button', undefined, "Refresh UI" );
                    button.onClick = function()
                    {
                        myPal.refreshUI( scriptFile )
                    };
                }
            }

            // Recalculate UI
            myPal.layout.layout( true );
            myPal.layout.resize();

            return ok;
        }

        return refresh.call( myPal );
    }

    myPal.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    topMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    leftMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    rightMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    bottomMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    return myPal;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 * @param {boolean}		[enterRunTime=false]	- Set to true to automatically set DuAEF to runtime state<br />
 * Set this to false if the ui shown is not the actual main panel of the script and it is shown before the main panel has been loaded.
 */
DuAEF.DuScriptUI.showUI = function( ui, enterRunTime )
{
    enterRunTime = def( enterRunTime, true);

    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI" );

    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Defining layout" );
    ui.layout.layout( true );
    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Resizing" );
    ui.layout.resize();
    ui.onResizing = ui.onResize = function()
    {
        try
        {
            ui.layout.resize();
        }
        catch ( e )
        {}
    }
    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: UI Ready" );

    // If it's a Window, it needs to be shown
    if ( ui instanceof Window )
    {
        DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Showing window" );
        //ui.center();
        ui.show();
        DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Window visible." );
    }

    DuAEF.DuScriptUI.uiShown = true;

    if (enterRunTime) DuAEF.enterRunTime();
}

/**
 * Adds a group in a container, using  DuAEF.DuScriptUI default alignments, and DuAEF.DuScriptUI.defaultSpacing. Margins are set to 0.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the group
 * @param {string}					[orientation] - The orientation to use. One of "column", "row" or "stack". By default, "column" if added in a row, "row" if added in a column.
 * @return {Group}	The group created
 */
DuAEF.DuScriptUI.addGroup = function( container, orientation )
{
    var group = container.add( "group" );
    group.spacing = 2;
    group.margins = 0;
    if ( orientation !== undefined ) group.orientation = orientation;
    if ( group.orientation === "row" )
    {
        group.alignChildren = DuAEF.DuScriptUI.defaultRowAlignment;
    }
    else if ( group.orientation === "column" )
    {
        group.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
    }
    else
    {
        group.alignChildren = DuAEF.DuScriptUI.defaultStackAlignment;
    }

    group.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    return group;
}

/**
 * @class
 * @name Separator
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Separator.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSeparator} to create a Separator.<br />
 * The Separator inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {StaticText|CheckBox} label - the label
 * @property {boolean} checkable - Read-Only | true if a checkbox is displayed
 */

/**
 * Adds separator with an optionnal name in the group
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group} container - Where to create the separator
 * @param {string} [name] - The name displayed
 * @param {boolean} [checkable=false] - When true, adds a checkbox to the separator
 * @param {boolean} [drawLine=true] - Draws a line when there is no name. When false, the separator is an empty space
 * @return {Separator} The separator
 */
DuAEF.DuScriptUI.addSeparator = function( container, name, checkable, drawLine )
{
    if ( name == undefined ) name = '';
    if ( checkable == undefined ) checkable = false;
    if ( drawLine == undefined ) drawLine = true;

    if ( name != '' ) DuAEF.DuScriptUI.uiStrings.push( name );
    name = tr( name );

    var separator = DuAEF.DuScriptUI.addGroup( container, "row" );
    separator.margins = DuAEF.DuScriptUI.defaultMargins;
    separator.margins.bottom = DuAEF.DuScriptUI.defaultMargins * 2;
    separator.alignment = [ 'fill', 'top' ];
    separator.checkable = checkable;

    separator.label = null;
    if ( name != '' || checkable )
    {
        DuAEF.DuScriptUI.uiStrings.push( name );
        name = tr( name );
        if ( checkable ) separator.label = separator.add( 'checkbox', undefined, name );
        else separator.label = separator.add( 'statictext', undefined, name );
        separator.label.alignment = [ 'center', 'bottom' ];
        if ( drawLine ) DuAEF.DuScriptUI.setBackgroundColor( separator, DuAEF.DuJS.Color.Colors.DARK_GREY );
    }
    else if ( drawLine )
    {
        DuAEF.DuScriptUI.setBackgroundColor( separator, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
    }

    separator.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    return separator;
}

/**
 * @class
 * @name DuButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addButton} to create an Image Button.<br />
 * The Image Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {Image} image - The scriptui object representing the image
 * @property {StaticText} label - The label
 * @property {DuButton~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback DuButton~onClick
 * @memberof DuButton
 */

/**
 * Creates a button with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]		- The label of the button. Default: empty string
 * @param {string}					[image]		- The path to the icon. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {string}					[imageOver=image]	- The path to an icon displayed when the mouse is over the button.
 * @param {string}					[imageDisabled=image]	- The path to an icon displayed when the button is disabled.
 * @return {DuButton}			The image button created.
 */
DuAEF.DuScriptUI.addButton = function( container, text, image, helpTip, imageOver )
{
    if (DuAEF.DuJS.typeof(container) != 'Group' && DuAEF.DuJS.typeof(container) != 'Panel' && DuAEF.DuJS.typeof(container) != 'Window' )
    {
        throw 'DuScriptUI: DuAEF.DuScriptUI.addButton(container, text, image, helpTip, imageOver):\nTypeError.\n\ncontainer has to be a Group/Panel/Window.\n\ncontainer is ' + DuAEF.DuJS.typeof(container) + ' with value ' + container.toString();
    }

    if ( typeof text === 'undefined' ) text = '';
    if ( typeof image === 'undefined' ) image = '';
    if ( typeof helpTip === 'undefined' ) helpTip = '';
    if ( typeof imageOver === 'undefined' ) imageOver = '';
    if ( typeof imageDisabled === 'undefined' ) imageDisabled = '';
    if ( imageOver != '' && !DuAEF.DuJS.Fs.fileExists( imageOver ) ) imageOver = '';
    if ( image != '' && !DuAEF.DuJS.Fs.fileExists( image ) ) image = '';
    if ( imageDisabled != '' && !DuAEF.DuJS.Fs.fileExists( imageDisabled ) ) imageDisabled = '';

    if ( text != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( text );
        text = tr( text );
    }
    if ( helpTip != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( helpTip );
        helpTip = tr( helpTip );
    }

    if ( image == '' && text == '' ) text = 'o';

    var imageButton = container.add( 'group' );
    imageButton.orientation = 'row';
    imageButton.margins = 2;
    if ( image == '' ) imageButton.margins = 5;
    imageButton.alignment = [ 'fill', 'fill' ];
    imageButton.spacing = 0;
    imageButton.group = imageButton;

    imageButton.standardImage = image;
    imageButton.imageOver = imageOver;
    imageButton.onClick = function() {};
    imageButton.onAltClick = function() {};
    imageButton.onCtrlAltClick = function() {};
    imageButton.onCtrlClick = function() {};
    imageButton.image = null;
    imageButton.label = null;

    //Add fillers to be able to click anywhere on the button
    if ( text != '' )
    {
        imageButton.fillerL = imageButton.add( 'statictext', undefined, "" );
        imageButton.fillerL.alignment = [ 'fill', 'fill' ];
    }

    if ( image != '' )
    {
        var icon = imageButton.add( 'image', undefined, imageButton.standardImage );
        icon.alignment = [ 'center', 'center' ];
        icon.helpTip = helpTip;
        imageButton.image = icon;
        imageButton.icon = icon;
    }

    if ( text != '' )
    {
        var label = imageButton.add( 'statictext', undefined, text );
        label.helpTip = helpTip;
        if ( image == '' ) label.alignment = [ 'left', 'center' ];
        imageButton.label = label;
        DuAEF.DuScriptUI.setBackgroundColor( imageButton, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
        imageButton.alignment = [ 'fill', 'top' ];
    }

    //Add fillers to be able to click anywhere on the button
    if ( text != '' )
    {
        imageButton.fillerR = imageButton.add( 'statictext', undefined, "" );
        imageButton.fillerR.alignment = [ 'fill', 'fill' ];
    }

    //events
    imageButton.clicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onClick);
    }

    imageButton.shiftClicked = function()
    {
        DuAEF.DuScriptUI.updateHelpPopup( imageButton.help.title, imageButton.help.text, imageButton.help.link );

        if ( imageButton.help.text != '' )
        {
            DuAEF.DuScriptUI.showHelp();
        }
    }

    imageButton.altClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onAltClick);
    }

    imageButton.ctrlAltClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onCtrlAltClick);
    }

    imageButton.ctrlClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onCtrlClick);
    }

    imageButton.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( icon )
            if ( imageButton.imageOver != '' ) icon.image = imageButton.imageOver;
        if ( label )
        {
            DuAEF.DuScriptUI.setTextColor( imageButton.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
            DuAEF.DuScriptUI.setBackgroundColor( imageButton.group, DuAEF.DuJS.Color.Colors.DARK_GREY );
        }
        DuAEF.DuScriptUI.highlightedControls.push( imageButton );
    }

    imageButton.dim = function()
    {
        if ( icon )
            if ( imageButton.standardImage != '' ) icon.image = imageButton.standardImage;
        if ( label )
        {
            DuAEF.DuScriptUI.setTextColor( imageButton.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
            DuAEF.DuScriptUI.setBackgroundColor( imageButton.group, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
        }
    }

    //add events
    imageButton.addEventListener( 'click', function( e )
    {
        if ( e.shiftKey ) imageButton.shiftClicked();
        else if ( e.altKey && e.ctrlKey ) imageButton.ctrlAltClicked();
        else if ( e.altKey ) imageButton.altClicked();
        else if ( e.ctrlKey ) imageButton.ctrlClicked();
        else imageButton.clicked();
    }, true );

    if ( label )
    {
        imageButton.label.addEventListener( "mouseover", imageButton.highlight );
        imageButton.fillerL.addEventListener( "mouseover", imageButton.highlight );
        imageButton.fillerR.addEventListener( "mouseover", imageButton.highlight );
    }
    // Hack - CS6 Bug on mouseover with images
    if ( DuAEF.DuAE.App.version > 11 && icon )
    {
        imageButton.icon.addEventListener( "mouseover", imageButton.highlight );
    }

    imageButton.help = {};
    imageButton.help.title = '';
    imageButton.help.text = '';
    imageButton.help.link = '';

    //help popup
    imageButton.setHelp = function( title, text, link )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( title );
        title = tr( title );
        imageButton.help.title = title;
        imageButton.help.text = text;
        imageButton.help.link = link;
    }

    return imageButton;
}

/**
 * @class
 * @name DuSmallButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Small Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSmallButton} to create a Small Button.<br />
 * The Small Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {StaticText} label - The label
 * @property {any} value - A user value stored in the button, which is passed to the onClick method
 * @property {DuSmallButton~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.<br />
 * The implementation of this function can take one parameter which is the used defined value of the button.
 * @callback DuSmallButton~onClick
 * @memberof DuSmallButton
 * @param {any} value - The used defined value of the button
 */

/**
 * Creates a small button.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					text		- The label of the button. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {any}					[value]		- A user value stored in the button, which is passed to the onClick method
 * @return {DuButton}			The image button created.
 */
DuAEF.DuScriptUI.addSmallButton = function( container, text, helpTip, value )
{
    if ( typeof helpTip === 'undefined' ) helpTip = '';

    DuAEF.DuScriptUI.uiStrings.push( text );
    text = tr( text );
    if ( helpTip != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( helpTip );
        helpTip = tr( helpTip );
    }

    var smallButton = container.add( 'group' );
    smallButton.orientation = 'row';
    smallButton.margins = 0;
    smallButton.alignment = [ 'fill', 'top' ];
    smallButton.alignChildren = [ 'fill', 'fill' ];
    smallButton.spacing = 0;

    smallButton.onClick = function() {};
    smallButton.onAltClick = function() {};
    smallButton.onCtrlAltClick = function() {};
    smallButton.onCtrlClick = function() {};
    smallButton.label = smallButton.add( 'statictext', undefined, text );
    smallButton.label.helpTip = helpTip;
    smallButton.label.justify = 'center';
    DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );

    smallButton.value = value;

    //events
    smallButton.clicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onClick, smallButton.value);
    }

    smallButton.shiftClicked = function()
    {
        DuAEF.DuScriptUI.updateHelpPopup( smallButton.help.title, smallButton.help.text, smallButton.help.link );

        if ( smallButton.help.text != '' )
        {
            DuAEF.DuScriptUI.showHelp();
        }
    }

    smallButton.altClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onAltClick);
    }

    smallButton.ctrlAltClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onCtrlAltClick);
    }

    smallButton.ctrlClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onCtrlClick);
    }

    smallButton.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();

        DuAEF.DuScriptUI.setTextColor( smallButton.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.DARK_GREY );

        DuAEF.DuScriptUI.highlightedControls.push( smallButton );
    }

    smallButton.dim = function()
    {
        DuAEF.DuScriptUI.setTextColor( smallButton.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
    }

    //add events
    smallButton.addEventListener( 'click', function( e )
    {
        if ( e.shiftKey ) smallButton.shiftClicked();
        else if ( e.altKey && e.ctrlKey ) smallButton.ctrlAltClicked();
        else if ( e.altKey ) smallButton.altClicked();
        else if ( e.ctrlKey ) smallButton.ctrlClicked();
        else smallButton.clicked();
    }, true );


    smallButton.addEventListener( "mouseover", smallButton.highlight );


    smallButton.help = {};
    smallButton.help.title = '';
    smallButton.help.text = '';
    smallButton.help.link = '';

    //help popup
    smallButton.setHelp = function( title, text, link )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( title );
        title = tr( title );
        smallButton.help.title = title;
        smallButton.help.text = text;
        smallButton.help.link = link;
    }

    return smallButton;
}

/**
 * @class
 * @name DuCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addCheckBox} to create an Image Checkbox.<br />
 * The Image Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {Group} group - The scriptUI Group containing the label and the image.
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {string} imageChecked - The path to the image (or a PNG as a string representation) to display when the button is checked
 * @property {Image}	image	- The scriptui object representing the image, if any
 * @property {StaticText}	label	- The label, if any
 * @property {string} text - The current text
 * @property {string} textChecked - The text to display when the checkbox is checked
 * @property {string} defaultText - The text to display when the checkbox is unchecked
 * @property {boolean}	checked 	- The checked state of the button
 * @property {DuCheckBox~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback DuCheckBox~onClick
 * @memberof DuCheckBox
 */

/**
 * Sets the checked state of the button
 * @method
 * @memberof DuCheckBox
 * @name setChecked
 * @param {boolean} [checked=true] - The state
 */

/**
 * Sets the help information for this button
 * @method
 * @memberof DuCheckBox
 * @name setHelp
 * @param {string} title - The title
 * @param {string} text - The content
 * @param {string} link - A URL to an online help
 */

/**
 * Creates a checkbox with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					text			- The label of the button. Default: empty string
 * @param {string}					image			- The path to the icon. Default: empty string
 * @param {string}					helpTip			- The helptip. Default: empty string
 * @param {string}					imageChecked	- The path to an icon displayed when the button is checked. Default: empty string
 * @param {string}					imageOver		- The path to an icon displayed when the mouse is over the button. Default: same as imageChecked
 * @param {string}					[textChecked]			- The label of the button displayed when it is checked.
 * @return {DuCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addCheckBox = function( container, text, image, helpTip, imageChecked, imageOver, textChecked, isTab )
{
    //isTab is an undocumented low-level param used to create buttons for tabs in tabpanel
    isTab = def(isTab, false);
    if ( !container ) return null;
    text = def(text, '');
    image = def(image, '');
    helpTip = def(helpTip, '');
    imageChecked = def(imageChecked, '');
    imageOver = def(imageOver, imageChecked);
    textChecked = def(textChecked, '');

    //check if images exist
    if ( imageOver != '' && !DuAEF.DuJS.Fs.fileExists( imageOver ) ) imageOver = '';
    if ( image != '' && !DuAEF.DuJS.Fs.fileExists( image ) ) image = '';
    if ( imageChecked != '' && !DuAEF.DuJS.Fs.fileExists( imageChecked ) ) imageChecked = '';

    //if no image and no text, a placeholder character
    if ( image == '' && text == '' ) text = '#';

    //translate text and helptip
    if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
    if ( helpTip != '' ) DuAEF.DuScriptUI.uiStrings.push( helpTip );
    text = tr( text );
    helpTip = tr( helpTip );

    //create ui
    var duCheckBox = container.add( 'group' );
    duCheckBox.orientation = 'column';
    duCheckBox.margins = 2;
    if ( isTab ) duCheckBox.spacing = 3;
    else duCheckBox.spacing = 0;

    duCheckBox.group = duCheckBox.add( 'group' );
    duCheckBox.group.orientation = 'row';
    duCheckBox.group.margins = 0;
    duCheckBox.group.spacing = 0;

    var outLine;
    if ( isTab && text != '' )
    {
        outLine = duCheckBox.add( 'group' );
        outLine.margins = 0;
        outLine.minimumSize.height = 2;
        outLine.alignment = [ 'fill', 'top' ];
    }

    duCheckBox.standardImage = image;
    duCheckBox.imageOver = imageOver;
    duCheckBox.imageChecked = imageChecked;
    duCheckBox.onClick = function() {};
    duCheckBox.onAltClick = function() {};
    duCheckBox.checked = duCheckBox.value = false;
    duCheckBox.textChecked = textChecked;
    duCheckBox.defaultText = text;
    duCheckBox.text = text;

    iconChecked = DuAEF.DuBinary.toFile( w14_checked_m );
    iconCheckedOver = DuAEF.DuBinary.toFile( w14_checked_l );
    iconUnchecked = DuAEF.DuBinary.toFile( w14_emptysquare_m );
    iconUncheckedOver = DuAEF.DuBinary.toFile( w14_unchecked_l );
    var checkbox; //the icon checkbox

    //adjust appearance if there's some text
    if ( text != '')
    {
        //checkbox icon
        if ( !isTab && DuAEF.DuAE.App.hasFilesAndNetworkAccess )
        {
            checkbox = duCheckBox.group.add( 'image', undefined, iconUnchecked );
            checkbox.alignment = [ 'left', 'center' ];
            checkbox.helpTip = helpTip;
        }
        //general appearance
        DuAEF.DuScriptUI.setBackgroundColor( duCheckBox, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
        duCheckBox.alignment = [ 'fill', 'top' ];
        duCheckBox.alignChildren = [ 'fill', 'center' ];
    }

    //adjust appearance if there's an image
    if ( image != '' && DuAEF.DuAE.App.hasFilesAndNetworkAccess )
    {
        duCheckBox.image = duCheckBox.group.add( 'image', undefined, image );
        if ( isTab ) duCheckBox.image.alignment = [ 'center', 'center' ];
        else duCheckBox.image.alignment = [ 'left', 'center' ];
        duCheckBox.image.helpTip = helpTip;
    }

    //add the label 
    //label
    if ( text != '')
    {
        duCheckBox.label = duCheckBox.group.add( 'statictext', undefined, text );
        duCheckBox.label.helpTip = helpTip;
        if ( isTab ) duCheckBox.label.alignment = [ 'center', 'center' ];
        else duCheckBox.label.alignment = [ 'left', 'center' ];
        //label size
        if ( text.length < textChecked.length ) duCheckBox.label.characters = textChecked.length;
        else duCheckBox.label.characters = text.length;
    }

    /**
     * Checks or unchecks the button
     * @memberof DuCheckBox
     * @param {boolean} c - The checked state
     */
    duCheckBox.setChecked = function( c )
    {
        c = def(c, true);
        duCheckBox.checked = duCheckBox.value = c;

        if ( c )
        {
            //label
            if ( duCheckBox.label && duCheckBox.textChecked != '' )
            {
                duCheckBox.label.text = duCheckBox.textChecked;
                duCheckBox.text = duCheckBox.textChecked;
            }
            //checkbox
            if ( checkbox ) checkbox.image = iconChecked;
            //image 
            if ( duCheckBox.image && duCheckBox.imageChecked != '' ) duCheckBox.image.image = duCheckBox.imageChecked;
            //outline
            if (outLine) DuAEF.DuScriptUI.setBackgroundColor( outLine, DuAEF.DuJS.Color.Colors.RAINBOX_RED, true );
        }
        else 
        {
            //label
            if ( duCheckBox.label)
            {
                duCheckBox.label.text = duCheckBox.defaultText;
                duCheckBox.text = duCheckBox.defaultText;
            }
            //checkbox
            if ( checkbox ) checkbox.image = iconUnchecked;
            //image 
            if ( duCheckBox.image && duCheckBox.standardImage != '' ) duCheckBox.image.image = duCheckBox.standardImage;
            //outline 
            if (outLine) DuAEF.DuScriptUI.setBackgroundColor( outLine, DuAEF.DuJS.Color.Colors.DARK_GREY, true );
        }
    }

    duCheckBox.clicked = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.updateHelpPopup( duCheckBox.help.title, duCheckBox.help.text, duCheckBox.help.link );
        if ( e.shiftKey )
        {
            if ( duCheckBox.help.text != '' )
            {
                DuAEF.DuScriptUI.showHelp();
            }
            return;
        }

        duCheckBox.setChecked( !duCheckBox.checked );
        DuAEF.Debug.safeRun(duCheckBox.onClick);
    }

    duCheckBox.altClicked = function()
    {
        DuAEF.Debug.safeRun(duCheckBox.onAltClick);
    }

    duCheckBox.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        //image
        if ( duCheckBox.image && duCheckBox.imageOver != '' ) duCheckBox.image.image = duCheckBox.imageOver;
        //label
        if ( duCheckBox.label ) DuAEF.DuScriptUI.setBackgroundColor( duCheckBox, DuAEF.DuJS.Color.Colors.DARK_GREY );
        //checkbox 
        if ( checkbox && duCheckBox.checked ) checkbox.image = iconCheckedOver;
        else if ( checkbox ) checkbox.image = iconUncheckedOver;
        //outline
        if ( outLine ) DuAEF.DuScriptUI.setBackgroundColor( outLine, DuAEF.DuJS.Color.Colors.LIGHT_GREY, true );

        DuAEF.DuScriptUI.highlightedControls.push( duCheckBox );
    }

    duCheckBox.dim = function( e )
    {
        //image
        if ( duCheckBox.image && duCheckBox.imageChecked != '' && duCheckBox.checked ) duCheckBox.image.image = duCheckBox.imageChecked;
        else if ( duCheckBox.image && duCheckBox.imageChecked != '' ) duCheckBox.image.image = duCheckBox.standardImage;
        //label
        if ( duCheckBox.label ) DuAEF.DuScriptUI.setBackgroundColor( duCheckBox, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
        //checkbox 
        if ( checkbox && duCheckBox.checked ) checkbox.image = iconChecked;
        else if ( checkbox ) checkbox.image = iconUnchecked;
        //outline
        if ( outLine && duCheckBox.checked ) DuAEF.DuScriptUI.setBackgroundColor( outLine, DuAEF.DuJS.Color.Colors.RAINBOX_RED, true );
        else if ( outLine ) DuAEF.DuScriptUI.setBackgroundColor( outLine, DuAEF.DuJS.Color.Colors.DARK_GREY, true );
    }

    duCheckBox.group.addEventListener( "mousedown", function(e)
    {
        if ( e.altKey ) duCheckBox.altClicked();
        else duCheckBox.clicked(e);
    }, true );
    // Hack - CS6 Bug on mouseover with images
    if ( DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12 )
    {
        if ( duCheckBox.label ) duCheckBox.label.addEventListener( "mouseover", duCheckBox.highlight );
    }
    else
    {
        duCheckBox.addEventListener( "mouseover", duCheckBox.highlight );
    }

    duCheckBox.help = {};
    duCheckBox.help.title = '';
    duCheckBox.help.text = '';
    duCheckBox.help.link = '';

    //help popup
    duCheckBox.setHelp = function( title, text, link )
    {
        duCheckBox.help.title = title;
        duCheckBox.help.text = text;
        duCheckBox.help.link = link;
    }

    return duCheckBox;
}

/**
 * @class
 * @name SimpleCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Nice Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSimpleCheckBox} to create an Nice Checkbox.<br />
 * The Nice Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {StaticText} label - The statictext used as a label
 * @property {CheckBox} checkbox - The box
 * @property {float[]} color - The color [R,G,B,A]
 * @property {NiceCheckbox~onClick} onClick - Function to execute when clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback NiceCheckbox~onClick
 * @memberof NiceCheckbox
 */

/**
 * Creates a checkbox which can be colored, and changes color on hover
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]			- The label of the button.
 * @param {string}					[helpTip]			- The helptip.
 * @param {color}					[color=DuAEF.DuJS.Color.Colors.LIGHT_GREY]			- The color of the text
 * @return {SimpleCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addSimpleCheckBox = function( container, text, helpTip, color )
{
    if ( color == undefined ) color = DuAEF.DuJS.Color.Colors.LIGHT_GREY;
    if ( helpTip == undefined ) helpTip = '';
    if ( text == undefined ) text = '';

    if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
    if ( helpTip != '' ) DuAEF.DuScriptUI.uiStrings.push( helpTip );
    text = tr( text );
    helpTip = tr( helpTip );

    var niceCheckBox = container.add( 'group' );
    niceCheckBox.orientation = 'row';
    niceCheckBox.alignChildren = [ 'left', 'center' ];
    niceCheckBox.spacing = DuAEF.DuScriptUI.defaultSpacing;
    niceCheckBox.margins = 0;
    niceCheckBox.checkBox = niceCheckBox.add( 'checkbox', undefined, '' );
    niceCheckBox.label = niceCheckBox.add( 'statictext', undefined, text );
    niceCheckBox.onClick = function() {};
    niceCheckBox.checked = niceCheckBox.value = false;
    niceCheckBox.color = color;

    niceCheckBox.checkBox.helpTip = helpTip;
    niceCheckBox.label.helpTip = helpTip;

    DuAEF.DuScriptUI.setTextColor( niceCheckBox.label, niceCheckBox.color );

    /**
     * Checks or unchecks the button
     * @memberof SimpleCheckBox
     * @param {boolean} c	- The checked state
     */
    niceCheckBox.setChecked = function( c )
    {
        niceCheckBox.checked = niceCheckBox.value = c;
        niceCheckBox.checkBox.value = c;
    }

    niceCheckBox.labelClicked = function( e )
    {
        niceCheckBox.setChecked( !niceCheckBox.checked );
        DuAEF.Debug.safeRun(niceCheckBox.onClick);
    }

    niceCheckBox.checkBoxClicked = function( e )
    {
        niceCheckBox.checked = niceCheckBox.value = niceCheckBox.checkBox.value;
        DuAEF.Debug.safeRun(niceCheckBox.onClick);
    }

    niceCheckBox.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        DuAEF.DuScriptUI.setTextColor( niceCheckBox.label, DuAEF.DuJS.Color.Colors.RAINBOX_RED );
        DuAEF.DuScriptUI.highlightedControls.push( niceCheckBox );
    }

    niceCheckBox.dim = function( e )
    {
        DuAEF.DuScriptUI.setTextColor( niceCheckBox.label, niceCheckBox.color );
    }

    niceCheckBox.label.addEventListener( "mousedown", niceCheckBox.labelClicked, false );
    niceCheckBox.checkBox.onClick = niceCheckBox.checkBoxClicked;
    niceCheckBox.addEventListener( "mouseover", niceCheckBox.highlight );

    return niceCheckBox;
}

/**
 * @class
 * @name Form
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Form.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addForm} to create a Form.<br />
 * The Form inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {Group} labels - The left vertical group
 * @property {Group} buttons - The right vertical group
 */

/**
 * Adds a field to the form
 * example: form.addField('Composition:','dropdownlist',['Composition1','Composition2'],'Select a composition')
 * @method
 * @memberof Form
 * @name addField
 * @param {string}			label		- The label text.
 * @param {string}			type		- The type of ScriptUI object to add (like 'button','edittext', etc.).
 * @param {object}			[value]		- The default value or content of the field added, depends on the type.
 * @param {string}			[helpTip]		- The helpTip of the form control.
 * @return {ScriptUI[]}		An array with at 0 the StaticText label, and at 1 the ScriptUI object of the type type, added to the form
 */

/**
 * Creates a layout to add forms to a UI, using ScriptUI groups.<br />
 * You can easily add controls/fields to this form using DuAEF.DuScriptUI.addField
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the form.
 * @return {Form}		The custom Group containing the form.
 */
DuAEF.DuScriptUI.addForm = function( container )
{
    var mainGroup = container.add( 'group' );
    mainGroup.orientation = 'row';
    mainGroup.margins = 0;
    mainGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

    var labelsGroup = mainGroup.add( 'group' );
    labelsGroup.alignment = [ 'left', 'top' ];
    labelsGroup.orientation = 'column';
    labelsGroup.alignChildren = [ 'left', 'bottom' ];
    labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

    var buttonsGroup = mainGroup.add( 'group' );
    buttonsGroup.alignment = [ 'fill', 'top' ];
    buttonsGroup.orientation = 'column';
    buttonsGroup.alignChildren = [ 'fill', 'fill' ];
    buttonsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

    mainGroup.labels = labelsGroup;
    mainGroup.buttons = buttonsGroup;

    mainGroup.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    mainGroup.addField = function( label, type, value, helpTip )
    {
        if ( helpTip == undefined ) helpTip = '';

        if ( label != '' ) DuAEF.DuScriptUI.uiStrings.push( label );
        if ( helpTip != '' ) DuAEF.DuScriptUI.uiStrings.push( helpTip );
        label = tr( label );
        helpTip = tr( helpTip );

        var control = null;
        var height = 20;
        if ( type == "DuButton" )
        {
            control = DuAEF.DuScriptUI.addButton( mainGroup.buttons, '', value[ 0 ], helpTip, value[ 1 ] );
            height = control.image.preferredSize[ 1 ];
        }
        else
        {
            control = mainGroup.buttons.add( type, undefined, value );
            control.helpTip = helpTip;
            height = control.preferredSize[ 1 ];
        }

        var l = mainGroup.labels.add( 'statictext', undefined, label );
        l.helpTip = helpTip;

        l.minimumSize.height = l.maximumSize.height = height;
        return [ l, control ];
    }

    return mainGroup;
}

/**
 * @class
 * @name DuEditText
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Nice EditText.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addEditText} to create a Nice EditText.<br />
 * The Nice EditText inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} text - Read-Only | The text displayed
 * @property {DuEditText~onActivate} onActivate - Function to execute when activated
 * @property {DuEditText~onDeactivate} onDeactivate - Function to execute when deactivated
 * @property {DuEditText~onChange} onChange - Function to execute when text changed
 */

/**
 * The function to execute when the text is changed.
 * @callback DuEditText~onChange
 * @memberof DuEditText
 */

/**
 * The function to execute when the box is activated.
 * @callback DuEditText~onActivate
 * @memberof DuEditText
 */

/**
 * The function to execute when the box is deactivated.
 * @callback DuEditText~onDeactivate
 * @memberof DuEditText
 */

/**
 * Changes the text
 * @method
 * @memberof DuEditText
 * @name setText
 * @param {string} text - The new text
 */

 /**
 * Changes the prefix
 * @method
 * @memberof DuEditText
 * @name setPrefix
 * @param {string} prefix - The new prefix
 */

 /**
 * Changes the suffix
 * @method
 * @memberof DuEditText
 * @name setSuffix
 * @param {string} suffix - The new suffix
 */

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {string} text - The initial text in the edit.
 * @param {string} [prefix=""] - A text prefix to display.
 * @param {string} [suffix=""] - A text suffix to display.
 * @param {string} [placeHolder=""] - A place holder default text.
 * @param {string} [helpTip=""] The helpTip of this control
 * @param {bool} [translatable=true] Wether to translate the texts of this control
 * @return {DuEditText}	The custom Group containing the edit text.
 */
DuAEF.DuScriptUI.addEditText = function( container, text, prefix, suffix, placeHolder, helpTip, translatable )
{
    if ( prefix == undefined ) prefix = '';
    if ( suffix == undefined ) suffix = '';
    if ( placeHolder == undefined ) placeHolder = '';
    if ( helpTip == undefined ) helpTip = '';

    if ( typeof translatable === 'undefined' ) translatable = true;
    if ( translatable )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
        if ( prefix != '' ) DuAEF.DuScriptUI.uiStrings.push( prefix );
        if ( suffix != '' ) DuAEF.DuScriptUI.uiStrings.push( suffix );
        if ( placeHolder != '' ) DuAEF.DuScriptUI.uiStrings.push( placeHolder );
        text = tr( text );
        prefix = tr( prefix );
        suffix = tr( suffix );
        placeHolder = tr( placeHolder );
    }

    var niceEditText = container.add( 'group' );
    niceEditText.orientation = 'stack';
    niceEditText.margins = 0;
    niceEditText.alignChildren = [ 'fill', 'fill' ];
    niceEditText.placeHolder = placeHolder;
    var staticText = text;
    if ( text == "" && placeHolder != "" ) staticText = placeHolder;
    niceEditText.static = niceEditText.add( 'statictext', undefined, prefix + staticText + suffix );
    niceEditText.static.alignment = [ 'fill', 'center' ];
    if ( text == "" && placeHolder != "" ) DuAEF.DuScriptUI.setTextColor( niceEditText.static, DuAEF.DuJS.Color.Colors.LIGHT_PURPLE );
    else DuAEF.DuScriptUI.setTextColor( niceEditText.static, DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE );
    niceEditText.edit = niceEditText.add( 'edittext', undefined, text );
    niceEditText.edit.visible = false;
    niceEditText.prefix = prefix;
    niceEditText.suffix = suffix;

    niceEditText.text = text;
    niceEditText.editing = false;

    niceEditText.onActivate = function() {};
    niceEditText.onDeactivate = function() {};
    niceEditText.onChange = function() {};
    niceEditText.onChanging = function() {};

    niceEditText.clicked = function()
    {
        if ( niceEditText.editing ) return;
        else
        {
            niceEditText.static.visible = false;
            niceEditText.edit.visible = true;
            niceEditText.editing = true;
            niceEditText.edit.active = true;
        }
    }

    niceEditText.changed = function()
    {
        niceEditText.editing = false;
        var staticText = '';
        if ( niceEditText.edit.text == '' && niceEditText.placeHolder != '' )
        {
            DuAEF.DuScriptUI.setTextColor( niceEditText.static, DuAEF.DuJS.Color.Colors.LIGHT_PURPLE );
            staticText = niceEditText.placeHolder;
        }
        else
        {
            if ( niceEditText.placeHolder != '' ) DuAEF.DuScriptUI.setTextColor( niceEditText.static, DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE );
            staticText = niceEditText.edit.text;
        }
        niceEditText.static.text = niceEditText.prefix + staticText + niceEditText.suffix;
        niceEditText.text = niceEditText.edit.text;
        niceEditText.edit.visible = false;
        niceEditText.static.visible = true;
        niceEditText.edit.active = false;
        niceEditText.onChange();
    }
    niceEditText.changing = function()
    {
        niceEditText.text = niceEditText.edit.text;
        niceEditText.onChanging();
    }

    niceEditText.setText = function( text )
    {
        niceEditText.edit.text = niceEditText.text = text;
        niceEditText.static.text = niceEditText.prefix + text + niceEditText.suffix;
    }

    niceEditText.setPrefix = function( prefix )
    {
        niceEditText.prefix = prefix;
        niceEditText.setText(niceEditText.text);
    }

    niceEditText.setSuffix = function( suffix )
    {
        niceEditText.suffix = suffix;
        niceEditText.setText(niceEditText.text);
    }

    niceEditText.edit.onActivate = function()
    {
        niceEditText.onActivate();
    }
    niceEditText.edit.onDeactivate = function()
    {
        niceEditText.changed();
        niceEditText.onDeactivate();
    }
    niceEditText.edit.onChange = niceEditText.changed;
    niceEditText.edit.onChanging = niceEditText.changing;
    niceEditText.addEventListener( "mousedown", niceEditText.clicked, true );

    niceEditText.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    niceEditText.helpTip = helpTip;

    return niceEditText;
}

/**
 * @class
 * @name DuSlider
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Nice Slider.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSlider} to create a Nice Slider.<br />
 * The Nice Slider inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} value - Read-Only | The current value
 * @property {DuSlider~onChanging} onChanging - Function to execute when changing
 * @property {DuSlider~onChange} onChange - Function to execute when changed
 */

/**
 * Function to execute when changing
 * @callback DuSlider~onChanging
 * @memberof DuSlider
 */

/**
 * Function to execute when changed
 * @callback DuSlider~onChange
 * @memberof DuSlider
 */

/**
 * Changes the value
 * @method
 * @memberof DuSlider
 * @name setValue
 * @param {int} value - The new value
 */

/**
 * Creates a statictext (with an optionnal color).
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the nice edit text.
 * @param {string} text - The initial text in the edit.
 * @param {int[]} [color] - The color of the text.
 * @param {bool} [translatable=true] - Set this to false to never translate this text.
 * @param {bool} [multiline] - Set this to true to add a multiline text.
 * @return {StaticText} The ScriptUI StaticText created.
 */
DuAEF.DuScriptUI.addStaticText = function( container, text, color, helpTip, translatable, multiline )
{
    if ( typeof helpTip === 'undefined' ) helpTip = '';
    if ( typeof multiline === 'undefined' )
    {
        if ( text.indexOf( "\n" ) >= 0 ) multiline = true;
        else multiline = false;
    }

    if ( typeof translatable === 'undefined' ) translatable = true;
    if ( translatable )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
        text = tr( text );
    }

    var t = container.add( 'statictext', undefined, text,
    {
        multiline: multiline
    } );

    if ( typeof color !== 'undefined' ) DuAEF.DuScriptUI.setTextColor( t, color );

    t.helpTip = helpTip;

    return t;
}

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {int}	[defaultValue=0]		- The initial value.
 * @param {int}	[min=0]		- The minimal value.
 * @param {int}	[max=100]		- The maximal value.
 * @param {string}	[orientation='column']		- Either 'row' or 'column'
 * @param {boolean}	[invertedAppearance]		- Revert the slider with max value on the left
 * @param {string}	[prefix]		- A text prefix to display.
 * @param {string}	[suffix]		- A text suffix to display.
 * @param {string}	[textAlignment='center'] - The alignment of the text.<br />
 * One of 'left', 'center', 'right' for column orientation,<br />
 * And 'top', 'center', 'bottom' for row orientation.
 * @param {int[]}	[valueButtons=[]] - A list of predefined values to add as buttons.
 * @return {DuSlider}	The custom Group containing the slider.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addSlider = function( container, defaultValue, min, max, orientation, invertedAppearance, prefix, suffix, textAlignment, valueButtons )
{
    if ( typeof prefix === 'undefined' ) prefix = '';
    if ( typeof suffix === 'undefined' ) suffix = '';
    if ( typeof min === 'undefined' ) min = 0;
    if ( typeof max === 'undefined' ) max = 100;
    if ( typeof defaultValue === 'undefined' ) defaultValue = 0;
    if ( typeof textAlignment === 'undefined' ) textAlignment = 'center';
    if ( typeof valueButtons === 'undefined' ) valueButtons = [];
    if ( orientation != 'row' ) orientation = 'column';

    if ( valueButtons.length > 0 && textAlignment == 'center' )
    {
        if ( orientation == 'column' ) textAlignment = 'right';
        else textAlignment = 'bottom';
    }

    if ( prefix != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( prefix );
        prefix = tr( prefix );
    }
    if ( suffix != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( suffix );
        suffix = tr( suffix );
    }

    var niceSlider = container.add( 'group' );
    niceSlider.orientation = orientation;
    niceSlider.spacing = DuAEF.DuScriptUI.defaultSpacing;
    niceSlider.alignment = [ 'fill', 'top' ];
    niceSlider.alignChildren = [ 'fill', 'fill' ];

    niceSlider.value = defaultValue;
    niceSlider.invertedAppearance = invertedAppearance;

    var sliderValue = defaultValue;
    if ( niceSlider.invertedAppearance ) sliderValue = max - defaultValue + min;

    niceSlider.slider = niceSlider.add( 'slider', undefined, sliderValue, min, max );

    niceSlider.editGroup = DuAEF.DuScriptUI.addGroup( niceSlider );
    niceSlider.editGroup.spacing = 0;

    //a function to add buttons before or after the edittext, depending on the textAlignment
    niceSlider.buttons = [];

    function addButtons ()
    {
        //add
        for ( var i = 0, num = valueButtons.length; i < num; i++ )
        {
            niceSlider.buttons[i] = DuAEF.DuScriptUI.addSmallButton(
                niceSlider.editGroup,
                valueButtons[ i ].toString(),
                "",
                valueButtons[ i ]
                );
            niceSlider.buttons[i].alignment = [ 'fill', 'fill' ];
            niceSlider.buttons[i].onClick = function(val)
            {
                niceSlider.setValue( val );
                niceSlider.onChange();
            }
        }
    }

    if ( textAlignment == 'right' || textAlignment == 'bottom' ) addButtons();

    niceSlider.edit = DuAEF.DuScriptUI.addEditText( niceSlider.editGroup, defaultValue.toString(), prefix, suffix );
    var numChars = max.toString().length;
    if ( min.toString().length > max.toString().length ) numChars = min.toString().length;
    niceSlider.edit.edit.characters = numChars + prefix.length + suffix.length - 1;
    if ( orientation == 'row' )
    {
        niceSlider.edit.alignment = [ 'center', textAlignment ];
        niceSlider.edit.static.justify = 'center';
    }
    else
    {
        niceSlider.edit.alignment = [ textAlignment, 'center' ];
        niceSlider.edit.static.justify = textAlignment;
    }

    if ( textAlignment == 'left' || textAlignment == 'top' ) addButtons();

    niceSlider.onChanging = function() {};
    niceSlider.onChange = function() {};

    niceSlider.setValue = function( val )
    {
        niceSlider.value = val;
        niceSlider.edit.setText( niceSlider.value );
        if ( niceSlider.invertedAppearance ) niceSlider.slider.value = niceSlider.slider.maxvalue - val + niceSlider.slider.minvalue;
        else niceSlider.slider.value = val;
    }

    //events
    niceSlider.slider.onChanging = function()
    {
        if ( niceSlider.invertedAppearance ) niceSlider.value = Math.round( niceSlider.slider.maxvalue - niceSlider.slider.value + niceSlider.slider.minvalue );
        else niceSlider.value = Math.round( niceSlider.slider.value );
        niceSlider.edit.setText( niceSlider.value );
        niceSlider.onChanging();
    }

    niceSlider.slider.onChange = function()
    {
        niceSlider.onChange();
    }

    niceSlider.edit.onChanging = function()
    {
        var val = parseInt( niceSlider.edit.text );
        if ( isNaN( val ) ) return;
        niceSlider.value = val;
        if ( niceSlider.invertedAppearance ) niceSlider.slider.value = niceSlider.slider.maxvalue - val + niceSlider.slider.minvalue;
        else niceSlider.slider.value = val;
        niceSlider.onChanging();
    }
    niceSlider.edit.onChange = function()
    {
        var val = parseInt( niceSlider.edit.text );
        if ( isNaN( val ) ) return;
        if ( val < niceSlider.slider.minvalue ) val = niceSlider.slider.minvalue;
        if ( val > niceSlider.slider.maxvalue ) val = niceSlider.slider.maxvalue;
        niceSlider.edit.setText( val );
        niceSlider.value = val;
        if ( niceSlider.invertedAppearance ) niceSlider.slider.value = niceSlider.slider.maxvalue - val + niceSlider.slider.minvalue;
        else niceSlider.slider.value = val;
        niceSlider.onChange();
    }

    niceSlider.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    return niceSlider;
}

/**
 * @class
 * @name Selector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} image - The path to the current image (or a PNG as a string representation)
 * @property {Image} icon - The Image currently displayed
 * @property {StaticText} label - The current text
 * @property {DuButton[]} items  - The buttons
 * @property {int} index  - The current index
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback Selector~onChange
 * @memberof Selector
 */

/**
 * Adds a new button to the selector
 * @method
 * @memberof Selector
 * @name addButton
 * @param {string} text - The text displayed by the button
 * @param {string} image - The icon, either a path to the file or a PNG represented as a string.
 * @param {string} helpTip - The help tip
 * @param {string} imageOver - The roll over icon, either a path to the file or a PNG represented as a string.
 */

/**
 * Removes all buttons from the selector
 * @method
 * @memberof Selector
 * @name removeAll
 */

/**
 * Changes the selection and the current index of the selector
 * @method
 * @memberof Selector
 * @name setCurrentIndex
 * @param {int} index - The new index
 */

/**
 * Creates a drop down selector, using image buttons
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addSelector = function( container )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 0;
    selector.alignment = [ 'fill', 'top' ];
    selector.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );

    selector.addButton = function( text, image, helpTip, imageOver )
    {
        if ( !text ) text = '-';
        if ( !image ) image = '';
        if ( !helpTip ) helpTip = '';
        if ( !imageOver ) imageOver = '';

        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
        if ( helpTip != '' ) DuAEF.DuScriptUI.uiStrings.push( helpTip );
        text = tr( text );
        helpTip = tr( helpTip );

        var size = text.length * 7;
        if ( selector.label.minimumSize.width < size ) selector.label.minimumSize.width = size;

        var index = selector.items.length;
        selector.items.push( [ text, image, helpTip, imageOver ] );
        //add to popup
        var button = DuAEF.DuScriptUI.addButton( selector.popup.buttons, text, image, helpTip, imageOver );
        button.onClick = function()
        {
            selector.setCurrentIndex( index );
            selector.popup.hide();
        };
        if ( button.icon ) button.icon.alignment = [ 'left', 'center' ];
    }

    selector.removeAll = function()
    {
        selector.items = [];
        selector.setCurrentIndex( 0 );
        for ( var i = selector.popup.buttons.children.length - 1; i >= 0; i-- )
        {
            selector.popup.buttons.remove( selector.popup.buttons.children[ i ] );
        }
    }

    selector.setCurrentIndex = function( index )
    {
        if ( index < 0 ) return;
        if ( index >= selector.items.length ) return;

        var item = selector.items[ index ];

        if ( !item ) return;

        selector.image = item[ 1 ];
        if ( selector.image != '' )
        {
            selector.icon.image = selector.image;
            selector.icon.helpTip = item[ 2 ];
        }
        selector.label.helpTip = item[ 2 ];
        selector.label.text = item[ 0 ];
        selector.imageOver = item[ 3 ];

        selector.index = index;

        selector.onChange();
    }

    //the menu button
    selector.menuImage = DuAEF.DuBinary.toFile( w14_menu_m );
    selector.menuImageOver = DuAEF.DuBinary.toFile( w14_menu_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton = selector.add( 'image', undefined, selector.menuImage );
    else selector.menuButton = selector.add( 'statictext', undefined, 'M' );
    selector.menuButton.alignment = [ 'left', 'center' ];

    //the image
    selector.image = '';
    selector.icon = selector.add( 'image' );
    selector.icon.alignment = [ 'left', 'center' ];

    //the text
    selector.label = selector.add( 'statictext', undefined, '' );
    selector.label.helpTip = '';
    selector.label.alignment = [ 'fill', 'center' ];

    //if not CS6, add fillers to be able to click anywhere on the button
    if ( DuAEF.DuAE.App.version > 11 )
    {
        selector.fillerR = selector.add( 'statictext', undefined, "" );
        selector.fillerR.alignment = [ 'fill', 'fill' ];
    }

    //the image over
    selector.imageOver = '';

    //create popup
    selector.popup = new Window( 'palette', '', undefined,
    {
        borderless: true
    } );
    selector.popup.margins = 2;
    selector.popup.spacing = 0;
    //DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
    selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
    selector.popup.closeButton.onClick = function()
    {
        selector.popup.hide();
    };
    selector.popup.buttons = selector.popup.add( 'group' );
    selector.popup.buttons.orientation = 'column';
    selector.popup.buttons.margins = 0;
    selector.popup.buttons.spacing = 0;
    //Deactivate bugs on CS6, needs a try/catch
    selector.popup.onDeactivate = function()
    {
        try
        {
            selector.popup.hide();
        }
        catch ( e )
        {}
    };

    //add default button
    selector.items = [];
    selector.index = -1;


    selector.clicked = function( e )
    {
        var popup = false;

        if ( e.target === selector.menuButton ) popup = true;
        if ( e.altKey ) popup = true;

        if ( popup )
        {
            if ( DuAEF.DuAE.App.version < 11 || DuAEF.DuAE.App.version >= 12 )
            {
                var x = e.screenX - e.clientX;
                var y = e.screenY - e.clientY;
                selector.popup.location = [ x, y ];
            }
            selector.popup.show();
        }
        else
        {
            var index = selector.index;
            if ( index == selector.items.length - 1 ) index = 0;
            else index++;
            selector.setCurrentIndex( index );
        }
    }

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        if ( selector.imageOver != '' ) selector.icon.image = selector.imageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        selector.menuButton.image = selector.menuImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
        if ( selector.image != '' ) selector.icon.image = selector.image;
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12 )
    {
        selector.label.addEventListener( "mouseover", selector.highlight );
    }
    else
    {
        selector.addEventListener( "mouseover", selector.highlight );
    }
    selector.addEventListener( "click", selector.clicked, true );

    selector.onChange = function() {};

    return selector;
}

/**
 * @class
 * @name LayerSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addLayerSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [index=0]  - The current layer index, 0 if None
 * @property {CompItem|null} [comp=null] - The composition linked to the selector.<br />
 * If set to null, the seletor will use the current active composition.
 * @property {boolean} [selectedOnly=false] - True to list only selected layers in the composition
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback LayerSelector~onChange
 * @memberof LayerSelector
 */

/**
 * Changes the selection and the current layer index of the selector
 * @method
 * @memberof LayerSelector
 * @name setCurrentIndex
 * @param {int} index - The new layer index
 */

/**
 * Force the refresh of the layer list
 * @method
 * @memberof LayerSelector
 * @name refresh
 */

/**
 * Creates a drop down selector for layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addLayerSelector = function( container )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 5;
    selector.alignment = [ 'fill', 'top' ];
    selector.mainGroup = selector.add( 'group' );
    selector.mainGroup.orientation = 'row';
    selector.mainGroup.margins = 0;
    selector.mainGroup.spacing = 5;
    selector.mainGroup.alignment = [ 'fill', 'fill' ];
    selector.mainGroup.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );

    //init
    selector.index = 0;
    selector.comp = null;
    selector.selectedOnly = false;
    selector.pauseRefresh = false;

    var cs6 = DuAEF.DuAE.App.version < 12;

    //CS6
    if ( cs6 )
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_layers_m );
        selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the dropdownlist
        selector.popup = {};
        selector.popup.list = selector.mainGroup.add( 'dropdownlist' );
        selector.popup.list.alignment = [ 'fill', 'center' ];

        //the refresh button
        selector.refreshImage = DuAEF.DuBinary.toFile( w14_update_m );
        selector.refreshImageOver = DuAEF.DuBinary.toFile( w14_update_l );
        selector.refreshButton = selector.add( 'image', undefined, selector.refreshImage );
        selector.refreshButton.alignment = [ 'right', 'center' ];
    }
    else
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_layers_m );
        selector.menuImageOver = DuAEF.DuBinary.toFile( w14_layers_l );
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        else selector.menuButton = selector.mainGroup.add( 'statictext', undefined, 'L' );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the text
        selector.label = selector.mainGroup.add( 'statictext', undefined, 'None' );
        selector.label.helpTip = '';
        selector.label.alignment = [ 'fill', 'center' ];

        //create popup
        selector.popup = new Window( 'palette', '', undefined,
        {
            borderless: true
        } );
        selector.popup.margins = 2;
        selector.popup.spacing = 0;
        DuAEF.DuScriptUI.setBackgroundColor( selector.popup, DuAEF.DuJS.Color.Colors.DARK_GREY );
        selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
        selector.popup.closeButton.onClick = function()
        {
            selector.popup.hide();
        };
        selector.popup.onDeactivate = function()
        {
            selector.popup.hide();
        };
        selector.popup.list = selector.popup.add( 'listbox', undefined );

        selector.clicked = function( e )
        {
            selector.refresh();

            selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
            selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

            selector.popup.layout.layout();
            selector.popup.layout.resize();

            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            selector.popup.location = [ x, y ];

            selector.popup.show();
        }

        selector.mainGroup.addEventListener( "click", selector.clicked, true );
    }



    //the pick button
    selector.pickImage = DuAEF.DuBinary.toFile( w14_eyedropper_m );
    selector.pickImageOver = DuAEF.DuBinary.toFile( w14_eyedropper_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton = selector.add( 'image', undefined, selector.pickImage );
    else selector.pickButton = selector.add( 'statictext', undefined, 'P' );
    selector.pickButton.alignment = [ 'right', 'center' ];

    selector.popup.list.add( 'item', "None" );
    selector.popup.list.selection = 0;

    selector.refresh = function()
    {
        var comp = selector.comp;
        if ( !comp ) comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        selector.pauseRefresh = true;

        var layers;
        if ( selector.selectedOnly ) layers = comp.selectedLayers;
        else layers = comp.layers;

        var prevIndex = selector.index;
        selector.popup.list.removeAll();
        selector.popup.list.add( 'item', "None" );
        var it = new Iterator( layers );
        it.do( function( layer )
        {
            selector.popup.list.add( 'item', layer.index + ' | ' + layer.name );
        } );
        selector.setCurrentIndex( prevIndex );

        selector.pauseRefresh = false;
    };

    selector.setCurrentIndex = function( index )
    {
        if ( index < 0 ) return;

        selector.pauseRefresh = true;

        if ( index == 0 )
        {
            selector.popup.list.selection = 0;
        }
        else
        {
            for ( var i = 0, num = selector.popup.list.items.length; i < num; i++ )
            {
                var t = selector.popup.list.items[ i ].text;
                if ( index == parseInt( t.split( ' | ' )[ 0 ] ) )
                {
                    selector.popup.list.selection = i;
                    break;
                }
            }
        }

        if ( !cs6 )
        {
            if ( selector.popup.list.selection ) selector.label.text = selector.popup.list.selection.text;
            else
            {
                selector.popup.list.selection = 0;
                selector.label.text = "None";
            }
        }

        selector.index = index;

        selector.pauseRefresh = false;

        selector.onChange();
    };

    selector.popup.list.onChange = function()
    {
        if ( selector.pauseRefresh ) return;
        selector.setCurrentIndex( selector.popup.list.selection.index );
        if ( !cs6 ) selector.popup.hide();
    };

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.pickHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.pickButton.image = selector.pickImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        selector.menuButton.image = selector.menuImage;
        selector.pickButton.image = selector.pickImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
    }

    selector.pick = function()
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        if ( layers.length > 0 ) selector.setCurrentIndex( layers[ 0 ].index );
    }

    selector.getLayer = function()
    {
        if ( selector.index < 1 ) return null;
        var comp = selector.comp;
        if ( !comp ) comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return null;
        try
        {
            return comp.layer( selector.index )
        }
        catch ( e )
        {
            return null
        };
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12 )
    {
        selector.refreshButton.addEventListener( "mousedown", selector.refresh, false );
    }
    else
    {
        selector.mainGroup.addEventListener( "mouseover", selector.highlight );
        selector.pickButton.addEventListener( "mouseover", selector.pickHighlight );
    }

    selector.pickButton.addEventListener( "click", selector.pick );

    selector.onChange = function() {};

    selector.refresh();

    return selector;
}

/**
 * The panel where the help is displayed
 */
DuAEF.DuScriptUI.helpPanel = new Window( 'palette', "Help panel", undefined,
{
    resizeable: true
} );

//low-level undocumented flag. true if the help panel has been initialized (happens on first display)
DuAEF.DuScriptUI.helpPanel.initialized = false;

//Initializes the help panel
DuAEF.DuScriptUI.initHelpPanel = function()
{

    if ( DuAEF.DuScriptUI.helpPanel.initialized ) return;

    DuAEF.DuScriptUI.helpPanel.initialized = true;

    DuAEF.DuScriptUI.helpPanel.link = '';
    DuAEF.DuScriptUI.helpPanel.news = {};
    DuAEF.DuScriptUI.helpPanel.news.link = '';
    DuAEF.DuScriptUI.helpPanel.about = {};
    DuAEF.DuScriptUI.helpPanel.newsItems = [];
    DuAEF.DuScriptUI.helpPanel.currentNewsItem = -1;

    DuAEF.DuScriptUI.helpPanel.margins = 2;
    DuAEF.DuScriptUI.helpPanel.spacing = 0;
    DuAEF.DuScriptUI.helpPanel.maximumSize.height = 500;
    DuAEF.DuScriptUI.helpPanel.alignChildren = [ 'fill', 'fill' ];
    //DuAEF.DuScriptUI.setBackgroundColor(popup,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

    //add buttons for help/news/about tabs
    DuAEF.DuScriptUI.uiStrings.push( "Help" );
    DuAEF.DuScriptUI.uiStrings.push( "News" );
    DuAEF.DuScriptUI.uiStrings.push( "About" );
    var tabsGroup = DuAEF.DuScriptUI.addGroup( DuAEF.DuScriptUI.helpPanel, 'row' );
    tabsGroup.alignment = [ 'fill', 'top' ];
    DuAEF.DuScriptUI.helpPanel.helpButton = DuAEF.DuScriptUI.addCheckBox(
        tabsGroup,
        tr( "Help" ),
        DuAEF.DuBinary.toFile( w14_help_m ),
        '',
        DuAEF.DuBinary.toFile( w14_help_l ),
        undefined,
        undefined,
        true
    );
    DuAEF.DuScriptUI.helpPanel.newsButton = DuAEF.DuScriptUI.addCheckBox(
        tabsGroup,
        tr( "News" ),
        DuAEF.DuBinary.toFile( w14_news_m ),
        '',
        DuAEF.DuBinary.toFile( w14_news_l ),
        undefined,
        undefined,
        true
    );
    DuAEF.DuScriptUI.helpPanel.aboutButton = DuAEF.DuScriptUI.addCheckBox(
        tabsGroup,
        tr( "About" ),
        DuAEF.DuBinary.toFile( w14_help_m ),
        '',
        DuAEF.DuBinary.toFile( w14_help_l ),
        undefined,
        undefined,
        true
    );

    //add main panel
    var mainGroup = DuAEF.DuScriptUI.addGroup( DuAEF.DuScriptUI.helpPanel, 'stack' );

    //help panel
    var helpGroup = DuAEF.DuScriptUI.addGroup( mainGroup, 'column' );
    helpGroup.alignment = [ 'fill', 'fill' ];

    //add title
    DuAEF.DuScriptUI.helpPanel.title = helpGroup.add( 'statictext', undefined, '' );
    DuAEF.DuScriptUI.helpPanel.title.alignment = [ 'fill', 'top' ];
    DuAEF.DuScriptUI.setTextColor( DuAEF.DuScriptUI.helpPanel.title, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );

    //add text
    DuAEF.DuScriptUI.helpPanel.help = helpGroup.add( 'edittext', undefined, '',
    {
        multiline: true
    } );
    DuAEF.DuScriptUI.helpPanel.help.alignment = [ 'fill', 'fill' ];

    //news panel
    var newsGroup = DuAEF.DuScriptUI.addGroup( mainGroup, 'column' );
    newsGroup.alignment = [ 'fill', 'fill' ];

    //add title
    DuAEF.DuScriptUI.helpPanel.news.title = newsGroup.add( 'statictext', undefined, '' );
    DuAEF.DuScriptUI.helpPanel.news.title.alignment = [ 'fill', 'top' ];
    DuAEF.DuScriptUI.setTextColor( DuAEF.DuScriptUI.helpPanel.news.title, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
    //add date
    DuAEF.DuScriptUI.helpPanel.news.date = newsGroup.add( 'statictext', undefined, '' );
    DuAEF.DuScriptUI.helpPanel.news.date.alignment = [ 'fill', 'top' ];

    //add next and previous buttons
    var newsNavGroup = DuAEF.DuScriptUI.addGroup( newsGroup, 'row' );
    newsNavGroup.alignment = [ 'fill', 'top' ];
    DuAEF.DuScriptUI.uiStrings.push( "Previous" );
    DuAEF.DuScriptUI.uiStrings.push( "Next" );
    DuAEF.DuScriptUI.helpPanel.news.prevButton = DuAEF.DuScriptUI.addButton(
        newsNavGroup,
        tr( "Previous" ),
        DuAEF.DuBinary.toFile( w14_back_m ),
        '',
        DuAEF.DuBinary.toFile( w14_back_l )
    );
    DuAEF.DuScriptUI.helpPanel.news.nextButton = DuAEF.DuScriptUI.addButton(
        newsNavGroup,
        tr( "Next" ),
        DuAEF.DuBinary.toFile( w14_next_m ),
        '',
        DuAEF.DuBinary.toFile( w14_next_l )
    );


    //add text
    DuAEF.DuScriptUI.helpPanel.news.help = newsGroup.add( 'edittext', undefined, '',
    {
        multiline: true
    } );
    DuAEF.DuScriptUI.helpPanel.news.help.alignment = [ 'fill', 'fill' ];

    //about panel
    var aboutGroup = DuAEF.DuScriptUI.addGroup( mainGroup, 'column' );
    aboutGroup.alignment = [ 'fill', 'fill' ];

    //add title
    DuAEF.DuScriptUI.helpPanel.about.title = aboutGroup.add( 'statictext', undefined, DuAEF.scriptName + " (v" + DuAEF.scriptVersion + ")" );
    DuAEF.DuScriptUI.helpPanel.about.title.alignment = [ 'fill', 'top' ];
    DuAEF.DuScriptUI.setTextColor( DuAEF.DuScriptUI.helpPanel.about.title, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );

    //add text
    DuAEF.DuScriptUI.helpPanel.about.help = aboutGroup.add( 'edittext', undefined, DuAEF.scriptAbout,
    {
        multiline: true
    } );
    DuAEF.DuScriptUI.helpPanel.about.help.alignment = [ 'fill', 'fill' ];

    //add buttons

    DuAEF.DuScriptUI.helpPanel.moreButton = DuAEF.DuScriptUI.addButton( DuAEF.DuScriptUI.helpPanel, "More...", DuAEF.DuBinary.toFile( w14_url_m ), "Read more details online", DuAEF.DuBinary.toFile( w14_url_l ) );
    DuAEF.DuScriptUI.helpPanel.moreButton.alignment = ['fill','bottom'];
    DuAEF.DuScriptUI.helpPanel.moreButton.addEventListener( 'click', function( e )
    {
        var link = DuAEF.DuScriptUI.helpPanel.link;
        if ( e.shiftKey ) link = 'https://bat-ultra-bunny.tumblr.com/';
        else if ( DuAEF.DuScriptUI.helpPanel.newsButton.checked ) link = DuAEF.DuScriptUI.helpPanel.news.link;
        else if ( DuAEF.DuScriptUI.helpPanel.aboutButton.checked ) link = DuAEF.DuScriptUI.helpPanel.about.link;
        DuAEF.DuSystem.openURL( DuAEF.aboutURL );
    }, true );

    var urlButtonsGroup = DuAEF.DuScriptUI.addGroup( DuAEF.DuScriptUI.helpPanel, 'row' );
    urlButtonsGroup.alignment = [ 'fill', 'bottom' ];

    var socialButtonsGroup1 = DuAEF.DuScriptUI.addGroup( urlButtonsGroup, 'column' );
    socialButtonsGroup1.alignment= ['fill','bottom'];
    if (DuAEF.forumURL != '')
    {
        DuAEF.DuScriptUI.helpPanel.forumButton = DuAEF.DuScriptUI.addButton( socialButtonsGroup1, "Forum", DuAEF.DuBinary.toFile( w18_forum_l ), "Visit our forum", DuAEF.DuBinary.toFile( w18_forum_r ) );
        DuAEF.DuScriptUI.helpPanel.forumButton.onClick = function ()
        {
            DuAEF.DuSystem.openURL( DuAEF.forumURL );
        }
    }
    if (DuAEF.featureRequestURL != '')
    {
        DuAEF.DuScriptUI.helpPanel.featureRequestURL = DuAEF.DuScriptUI.addButton( socialButtonsGroup1, "Feature Request", DuAEF.DuBinary.toFile( w18_featurerequest_l ), "Request something new", DuAEF.DuBinary.toFile( w18_featurerequest_r ) );
        DuAEF.DuScriptUI.helpPanel.featureRequestURL.onClick = function ()
        {
            DuAEF.DuSystem.openURL( DuAEF.featureRequestURL );
        }
    }

    var socialButtonsGroup2 = DuAEF.DuScriptUI.addGroup( urlButtonsGroup, 'column' );
    socialButtonsGroup2.alignment= ['fill','bottom'];
    if (DuAEF.chatURL != '')
    {
        DuAEF.DuScriptUI.helpPanel.discordButton = DuAEF.DuScriptUI.addButton( socialButtonsGroup2, "Live chat", DuAEF.DuBinary.toFile( w18_discord_l ), "Come and have a chat!", DuAEF.DuBinary.toFile( w18_discord_r ) );
        DuAEF.DuScriptUI.helpPanel.discordButton.onClick = function ()
        {
            DuAEF.DuSystem.openURL( DuAEF.chatURL );
        }
    }
    if (DuAEF.bugReportURL != '')
    {
        DuAEF.DuScriptUI.helpPanel.bugReportButton = DuAEF.DuScriptUI.addButton( socialButtonsGroup2, "Bug Report", DuAEF.DuBinary.toFile( w18_bugreport_l ), "Tell us what's wrong", DuAEF.DuBinary.toFile( w18_bugreport_r ) );
        DuAEF.DuScriptUI.helpPanel.bugReportButton.onClick = function ()
        {
            DuAEF.DuSystem.openURL( DuAEF.bugReportURL );
        }
    }
    
    DuAEF.DuScriptUI.helpPanel.closeButton = DuAEF.DuScriptUI.addButton( DuAEF.DuScriptUI.helpPanel, "Close", DuAEF.DuBinary.toFile( w14_cancel_m ), "Close this window", DuAEF.DuBinary.toFile( w14_cancel_l ) );
    DuAEF.DuScriptUI.helpPanel.closeButton.alignment = ['fill','bottom'];
    DuAEF.DuScriptUI.helpPanel.closeButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.hide();
    };
    

    DuAEF.DuScriptUI.helpPanel.setPanel = function( panel )
    {
        if ( typeof panel === 'undefined' ) panel = 0;

        if ( panel == 0 )
        {
            helpGroup.visible = true;
            DuAEF.DuScriptUI.helpPanel.helpButton.setChecked( true );
            newsGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.newsButton.setChecked( false );
            aboutGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.aboutButton.setChecked( false );

            if ( DuAEF.DuScriptUI.helpPanel.link != '' ) DuAEF.DuScriptUI.helpPanel.moreButton.show();
            else DuAEF.DuScriptUI.helpPanel.moreButton.hide();
        }
        else if ( panel == 1 )
        {
            helpGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.helpButton.setChecked( false );
            newsGroup.visible = true;
            DuAEF.DuScriptUI.helpPanel.newsButton.setChecked( true );
            aboutGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.aboutButton.setChecked( false );

            if ( DuAEF.DuScriptUI.helpPanel.news.link != '' ) DuAEF.DuScriptUI.helpPanel.moreButton.show();
            else DuAEF.DuScriptUI.helpPanel.moreButton.hide();
        }
        else if ( panel == 2 )
        {
            helpGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.helpButton.setChecked( false );
            newsGroup.visible = false;
            DuAEF.DuScriptUI.helpPanel.newsButton.setChecked( false );
            aboutGroup.visible = true;
            DuAEF.DuScriptUI.helpPanel.aboutButton.setChecked( true );

            if ( DuAEF.DuScriptUI.helpPanel.about.link != '' ) DuAEF.DuScriptUI.helpPanel.moreButton.show();
            else DuAEF.DuScriptUI.helpPanel.moreButton.hide();
        }
    }

    DuAEF.DuScriptUI.helpPanel.displayNewsItem = function( ind )
    {
        if ( DuAEF.DuScriptUI.helpPanel.newsItems.length == 0 )
        {
            DuAEF.DuScriptUI.helpPanel.news.title.text = '';
            DuAEF.DuScriptUI.helpPanel.news.date.text = '';
            DuAEF.DuScriptUI.helpPanel.news.help.text = '';
            DuAEF.DuScriptUI.helpPanel.news.link = '';
            DuAEF.DuScriptUI.helpPanel.currentNewsItem = -1;
            return;
        }

        if ( ind < 0 )
        {
            ind = 0;
        }

        if ( ind >= DuAEF.DuScriptUI.helpPanel.newsItems.length )
        {
            ind = DuAEF.DuScriptUI.helpPanel.newsItems.length - 1;
        }

        DuAEF.DuScriptUI.helpPanel.news.nextButton.enabled = ind != 0;
        DuAEF.DuScriptUI.helpPanel.news.prevButton.enabled = ind != DuAEF.DuScriptUI.helpPanel.newsItems.length - 1;

        var text = DuAEF.DuScriptUI.helpPanel.newsItems[ ind ].description.replace( '![CDATA[', '' ).replace( ']]', '' );
        var title = DuAEF.DuScriptUI.helpPanel.newsItems[ ind ].title;
        var date = DuAEF.DuScriptUI.helpPanel.newsItems[ ind ].pubDate.toString();
        var link = DuAEF.DuScriptUI.helpPanel.newsItems[ ind ].link;

        DuAEF.DuScriptUI.helpPanel.news.title.text = title;
        DuAEF.DuScriptUI.helpPanel.news.date.text = date;
        DuAEF.DuScriptUI.helpPanel.news.help.text = text;
        DuAEF.DuScriptUI.helpPanel.news.link = link;

        DuAEF.DuScriptUI.helpPanel.currentNewsItem = ind;
    }

    DuAEF.DuScriptUI.helpPanel.news.prevButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.displayNewsItem( DuAEF.DuScriptUI.helpPanel.currentNewsItem + 1 );
    };
    DuAEF.DuScriptUI.helpPanel.news.nextButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.displayNewsItem( DuAEF.DuScriptUI.helpPanel.currentNewsItem - 1 );
    };

    DuAEF.DuScriptUI.helpPanel.helpButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.setPanel( 0 );
    };
    DuAEF.DuScriptUI.helpPanel.newsButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.setPanel( 1 );
    };
    DuAEF.DuScriptUI.helpPanel.aboutButton.onClick = function()
    {
        DuAEF.DuScriptUI.helpPanel.setPanel( 2 );
    };

    DuAEF.DuScriptUI.helpPanel.onResizing = DuAEF.DuScriptUI.helpPanel.onResize = function()
    {
        DuAEF.DuScriptUI.helpPanel.layout.resize();
    };
}

/**
 * Updates the helpPopup with new information
 * @memberof DuAEF.DuScriptUI
 * @param {string} title - A title.
 * @param {string} text - The help text.
 * @param {string} link - The http link to a webpage
 */
DuAEF.DuScriptUI.updateHelpPopup = function( title, text, link )
{
    DuAEF.DuScriptUI.initHelpPanel();
    if ( typeof link === 'undefined' ) link = '';

    if ( text == '' ) return;

    if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
    if ( title != '' ) DuAEF.DuScriptUI.uiStrings.push( title );
    text = tr( text );
    title = tr( title );

    DuAEF.DuScriptUI.helpPanel.title.text = title;
    DuAEF.DuScriptUI.helpPanel.help.text = text;
    DuAEF.DuScriptUI.helpPanel.link = link;

    DuAEF.DuScriptUI.helpPanel.layout.layout( true );
    DuAEF.DuScriptUI.helpPanel.layout.resize();
}

/**
 * Gets the RSS content from a feed url, and set the news in the Help popup
 * @memberof DuAEF.DuRSS
 * @param {string} url - The url of the server.
 * @param {string} [subfolder='feed'] - The subdirectory of the feed (without a leading '/')
 * @param {int} [port=80] - The server port.
 * @return {RSSItem[]} The news items
 */
DuAEF.DuScriptUI.getNews = function( url, subfolder, port )
{
    if ( !DuAEF.DuAE.App.hasFilesAndNetworkAccess ) return;

    if ( typeof port === 'undefined' ) port = 80;
    if ( typeof subfolder === 'undefined' ) subfolder = 'feed';

    var channel = DuAEF.DuRSS.get( url, subfolder, port );

    if ( !channel ) return [];

    DuAEF.DuScriptUI.setNews( channel.items );

    return channel.items;
}

/**
 * Sets the news in the help popup
 * @memberof DuAEF.DuRSS
 * @param {RSSItem[]} items - The items.
 */
DuAEF.DuScriptUI.setNews = function( items )
{
    DuAEF.DuScriptUI.initHelpPanel();

    DuAEF.DuScriptUI.helpPanel.newsItems = items;

    if ( DuAEF.DuScriptUI.helpPanel.newsItems.length == 0 ) return;

    DuAEF.DuScriptUI.helpPanel.displayNewsItem( 0 );

    DuAEF.DuScriptUI.helpPanel.layout.layout( true );
    DuAEF.DuScriptUI.helpPanel.layout.resize();
}

/**
 * Shows the help popup
 * @memberof DuAEF.DuScriptUI
 */
DuAEF.DuScriptUI.showHelp = function()
{
    DuAEF.DuScriptUI.initHelpPanel();
    DuAEF.DuScriptUI.helpPanel.setPanel( 0 );
    DuAEF.DuScriptUI.helpPanel.show();
}

/**
 * Shows the news popup
 * @memberof DuAEF.DuScriptUI
 */
DuAEF.DuScriptUI.showNews = function()
{
    DuAEF.DuScriptUI.initHelpPanel();
    if ( DuAEF.DuScriptUI.helpPanel.newsItems.length == 0 ) return;
    DuAEF.DuScriptUI.helpPanel.setPanel( 1 );
    DuAEF.DuScriptUI.helpPanel.show();
}

/**
 * Shows the about popup
 * @memberof DuAEF.DuScriptUI
 */
DuAEF.DuScriptUI.showAbout = function()
{
    DuAEF.DuScriptUI.initHelpPanel();
    DuAEF.DuScriptUI.helpPanel.setPanel( 2 );
    DuAEF.DuScriptUI.helpPanel.show();
}

/**
 * @class
 * @name CompSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addCompSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [id=0]  - The current compitem id, 0 if None
 * @property {CompItem[]} [comps] - The compositions listed in the selector.
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 * @property {Selector~filterComps} filterComps - A function which gets the comps to set in the selector.<br />
 * The default function will get all the comps in the project,<br />
 * You can set your own function here, which must take no argument.<br />
 * The function must return an array of CompItem.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback CompSelector~onChange
 * @memberof CompSelector
 */


/**
 * A function which gets the comps to set in the selector.<br />
 * The default function will get all the comps in the project,<br />
 * assign another function to this callback if you need to filter these comps.<br />
 * The function must return an array of CompItem.
 * @callback CompSelector~filterComps
 * @memberof CompSelector
 * @return {CompItem[]} The compositions to set in the selector.
 */

/**
 * Changes the selection and the current comp id of the selector
 * @method
 * @memberof CompSelector
 * @name setCurrentId
 * @param {int} index - The new comp id
 */

/**
 * Sets the comp list
 * @method
 * @memberof CompSelector
 * @name setComps
 * @param {CompItem[]} [comps] - The list of compositions. By default, will use {@link CompSelector.filterComps()} to get the comps.
 */

/**
 * Gets the selected comp
 * @method
 * @memberof CompSelector
 * @name getComp
 * @return {CompItem|null} the selected comp
 */

/**
 * Creates a drop down selector for compositions
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {CompSelector} - The selector
 */
DuAEF.DuScriptUI.addCompSelector = function( container )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 5;
    selector.alignment = [ 'fill', 'top' ];
    selector.mainGroup = selector.add( 'group' );
    selector.mainGroup.orientation = 'row';
    selector.mainGroup.margins = 0;
    selector.mainGroup.spacing = 5;
    selector.mainGroup.alignment = [ 'fill', 'fill' ];
    selector.mainGroup.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );

    //init
    selector.id = 0;
    selector.comp = null;
    selector.selectedOnly = false;
    selector.pauseRefresh = false;

    var cs6 = DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12;

    //CS6
    if ( cs6 )
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_comp_m );
        selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the dropdownlist
        selector.popup = {};
        selector.popup.list = selector.mainGroup.add( 'dropdownlist' );
        selector.popup.list.alignment = [ 'fill', 'center' ];
    }
    else
    {
        //the menu button
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess )
        {
            selector.menuImage = DuAEF.DuBinary.toFile( w14_comp_m );
            selector.menuImageOver = DuAEF.DuBinary.toFile( w14_comp_l );
            selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
            selector.menuButton.alignment = [ 'left', 'center' ];
        }


        //the text
        selector.label = selector.mainGroup.add( 'statictext', undefined, 'None' );
        selector.label.helpTip = '';
        selector.label.alignment = [ 'fill', 'center' ];

        //create popup
        selector.popup = new Window( 'palette', '', undefined,
        {
            borderless: true
        } );
        selector.popup.margins = 2;
        selector.popup.spacing = 0;
        DuAEF.DuScriptUI.setBackgroundColor( selector.popup, DuAEF.DuJS.Color.Colors.DARK_GREY );
        selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
        selector.popup.closeButton.onClick = function()
        {
            selector.popup.hide();
        };
        selector.popup.onDeactivate = function()
        {
            selector.popup.hide();
        };
        selector.popup.list = selector.popup.add( 'listbox', undefined );

        selector.clicked = function( e )
        {
            selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
            selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

            selector.popup.layout.layout();
            selector.popup.layout.resize();

            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            selector.popup.location = [ x, y ];

            selector.popup.show();
        }
    }

    //the pick & refresh buttons
    selector.pickImage = DuAEF.DuBinary.toFile( w14_eyedropper_m );
    selector.pickImageOver = DuAEF.DuBinary.toFile( w14_eyedropper_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton = selector.add( 'image', undefined, selector.pickImage );
    else selector.pickButton = selector.add( 'statictext', undefined, 'P' );
    selector.pickButton.alignment = [ 'right', 'center' ];

    //the refresh button
    selector.refreshImage = DuAEF.DuBinary.toFile( w14_update_m );
    selector.refreshImageOver = DuAEF.DuBinary.toFile( w14_update_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton = selector.add( 'image', undefined, selector.refreshImage );
    else selector.refreshButton = selector.add( 'statictext', undefined, 'R' );
    selector.refreshButton.alignment = [ 'right', 'center' ];

    var itemNone = selector.popup.list.add( 'item', "None" );
    itemNone.id = 0;
    selector.popup.list.selection = 0;

    selector.setComps = function()
    {
        var comps = selector.filterComps();
        selector.pauseRefresh = true;

        var prevId = selector.id;
        selector.popup.list.removeAll();
        var itemNone = selector.popup.list.add( 'item', "None" );
        itemNone.id = 0;
        var it = new Iterator( comps );
        it.do( function( comp )
        {
            var item = selector.popup.list.add( 'item', comp.name );
            item.id = comp.id;
        } );
        selector.setCurrentId( prevId );

        selector.pauseRefresh = false;
    };

    selector.getComp = function()
    {
        if ( selector.id == 0 ) return null;
        return DuAEF.DuAE.Project.getItemById( selector.id );
    }

    selector.setCurrentId = function( id )
    {
        if ( id < 0 ) id = 0;

        selector.pauseRefresh = true;

        if ( id == 0 )
        {
            selector.popup.list.selection = 0;
        }
        else
        {
            for ( var i = 0, num = selector.popup.list.items.length; i < num; i++ )
            {
                var item = selector.popup.list.items[ i ];
                if ( id == item.id )
                {
                    selector.popup.list.selection = i;
                    break;
                }
            }
        }

        if ( !cs6 )
        {
            if ( selector.popup.list.selection ) selector.label.text = selector.popup.list.selection.text;
            else
            {
                selector.popup.list.selection = 0;
                selector.label.text = "None";
            }
        }

        selector.id = id;

        selector.pauseRefresh = false;

        selector.onChange();
    };

    selector.popup.list.onChange = function()
    {
        if ( selector.pauseRefresh ) return;
        selector.setCurrentId( selector.popup.list.selection.id );
        if ( !cs6 ) selector.popup.hide();
    };

    selector.onChange = function() {};

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.refreshHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton.image = selector.refreshImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.pickHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton.image = selector.pickImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton.image = selector.menuImage;
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton.image = selector.refreshImage;
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton.image = selector.pickImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.VERY_DARK_GREY );
    }

    selector.pick = function()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( comp ) selector.setCurrentId( comp.id );
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12 )
    {
        //selector.label.addEventListener("mouseover",selector.highlight);
    }
    else
    {
        selector.mainGroup.addEventListener( "mouseover", selector.highlight );
        selector.refreshButton.addEventListener( "mouseover", selector.refreshHighlight );
        selector.pickButton.addEventListener( "mouseover", selector.pickHighlight );
    }

    selector.mainGroup.addEventListener( "click", selector.clicked, true );
    selector.refreshButton.addEventListener( "click", selector.setComps );
    selector.pickButton.addEventListener( "click", selector.pick );

    selector.onChange = function() {};
    selector.filterComps = function()
    {
        var comps = DuAEF.DuAE.Project.getComps();
        return comps;
    };

    return selector;
}

/**
 * @class
 * @name LayerPicker
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A picker for layers with labels.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createLayerPicker} to create a picker.<br />
 * The picker inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {LayerSelector[]} selectors  - The layer selectors
 * @property {string[]} inputs - The labels texts
 */

/**
 * Empties the LayerPicker
 * @method
 * @memberof LayerPicker
 * @name removeAll
 */

/**
 * Adds a new line on the LayerPicker
 * @method
 * @memberof LayerPicker
 * @name addSelector
 * @return {LayerSelector} The added LayerSelector
 */

/**
 * Creates a two-columns group to allow the user to pick layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {LayerPicker} The picker.
 */
DuAEF.DuScriptUI.addLayerPicker = function( container )
{
    var name = "Select layers";
    DuAEF.DuScriptUI.uiStrings.push( name );
    name = tr( name );
    var layerPicker = container.add( 'group' );
    layerPicker.orientation = 'row';
    layerPicker.margins = 0;
    layerPicker.spacing = DuAEF.DuScriptUI.defaultSpacing;
    layerPicker.alignment = [ 'fill', 'top' ];

    layerPicker.labelsGroup = layerPicker.add( 'group' );
    layerPicker.labelsGroup.orientation = 'column';
    layerPicker.labelsGroup.margins = 0;
    layerPicker.labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;
    layerPicker.labelsGroup.alignment = [ 'left', 'fill' ];
    layerPicker.labelsGroup.alignChildren = [ 'left', 'fill' ];

    layerPicker.selectorsGroup = layerPicker.add( 'group' );
    layerPicker.selectorsGroup.orientation = 'column';
    layerPicker.selectorsGroup.margins = 0;
    layerPicker.selectorsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;
    layerPicker.selectorsGroup.alignment = [ 'fill', 'fill' ];

    layerPicker.selectors = [];
    layerPicker.inputs = [];

    layerPicker.removeAll = function()
    {
        layerPicker.selectors = [];
        layerPicker.inputs = [];
        for ( var i = layerPicker.labelsGroup.children.length - 1; i >= 0; i-- )
        {
            layerPicker.labelsGroup.remove( layerPicker.labelsGroup.children[ i ] );
            layerPicker.selectorsGroup.remove( layerPicker.selectorsGroup.children[ i ] );
        }
    }

    layerPicker.addSelector = function( inputLabel )
    {
        DuAEF.DuScriptUI.uiStrings.push( inputLabel );
        inputLabel = tr( inputLabel );
        var l = layerPicker.labelsGroup.add( 'statictext', undefined, inputLabel );

        var sel = DuAEF.DuScriptUI.addLayerSelector( layerPicker.selectorsGroup );
        layerPicker.selectors.push( sel );
        sel.alignment = [ 'fill', 'fill' ];

        //l.minimumSize.height = l.maximumSize.height = 18;

        return sel;
    }

    return layerPicker;
}

/**
 * @class
 * @name LayerPickerDialog
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A picker for layers with labels.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createLayerPicker} to create a picker.<br />
 * The picker inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {LayerPicker} layerPicker The layer picker inside the dialog.
 * @property {bool} accepted This property is true if the user has clicked the OK button, false otherwise.
 */

/**
 * Empties the LayerPicker<br />
 * This is a convenience function equivalent to {@link LayerPickerDialog.layerPicker.removeAll}.
 * @method
 * @memberof LayerPickerDialog
 * @name removeAll
 */

/**
 * Adds a new line on the LayerPicker
 * This is a convenience function equivalent to {@link LayerPickerDialog.layerPicker.addSelector}.
 * @method
 * @memberof LayerPickerDialog
 * @name addSelector
 * @return {LayerSelector} The added LayerSelector
 */

/**
 * Gets the layers picked by the user.
 * @method
 * @memberof LayerPickerDialog
 * @name getLayers
 * @return {Layer[]} The layers picked (null if the user has set none in the selector), in the display order.
 */

/**
 * Gets the layers picked by the user.
 * @method
 * @memberof LayerPickerDialog
 * @name getLayers
 * @return {Layer[]} The layers picked (null if the user has set none in the selector), in the display order.
 */

/**
 * The function called when the dialog is accepted.
 * @callback LayerPickerDialog~onAccept
 * @memberof LayerPickerDialog
 */

/**
 * Creates a dialog with a LayerPicker<br />
 * Use {@link DuAEF.DuScriptUI.showUI} to show it after creation.
 * @memberof DuAEF.DuScriptUI
 * @param {string} title - The title of the dialog.
 * @return {LayerPickerDialog} The dialog window.
 */
DuAEF.DuScriptUI.createLayerPickerDialog = function( title )
{
    var dialog = new Window( 'palette', title, undefined,
    {
        resizeable: true
    } );
    dialog.minimumSize.width = 300;

    dialog.margins = DuAEF.DuScriptUI.defaultMargins;
    dialog.orientation = 'column';

    dialog.layerPicker = DuAEF.DuScriptUI.addLayerPicker( dialog );

    dialog.onAccept = function() {};
    dialog.removeAll = dialog.layerPicker.removeAll;
    dialog.addSelector = dialog.layerPicker.addSelector;
    dialog.getLayers = function()
    {
        var layers = [];
        for ( var i = 0, num = dialog.layerPicker.selectors.length; i < num; i++ )
        {
            var sel = dialog.layerPicker.selectors[ i ];
            layers.push( sel.getLayer() );
        }
        return layers;
    }

    dialog.accepted = false;

    //add buttons
    var validGroup = dialog.add( 'group' );
    validGroup.alignment = [ 'fill', 'bottom' ];
    var validGroupCancelButton = DuAEF.DuScriptUI.addButton( validGroup, "Cancel", DuAEF.DuBinary.toFile( w25_back_m ), "Cancel", DuAEF.DuBinary.toFile( w25_back_r ) );
    var validGroupValidButton = DuAEF.DuScriptUI.addButton( validGroup, "OK", DuAEF.DuBinary.toFile( w25_check_g ), "OK", DuAEF.DuBinary.toFile( w25_check_r ) );

    validGroupValidButton.onClick = function()
    {
        dialog.accepted = true;
        dialog.hide();
        dialog.onAccept();
    };
    validGroupCancelButton.onClick = function()
    {
        dialog.hide();
    };

    return dialog;
}

/**
 * @class
 * @name TabPanel
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Panel with tabs.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addTabPanel} to create a picker.<br />
 * The TabPanel inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {DuButton[]} buttons - The buttons for the tabs. Not that an "index" property is added to the button, containing the Tab index.
 * @property {Tab[]} tabs - The tabs.
 * @property {int} index - The currently visible tab.
 * @property {Group} buttonsGroup - The ScriptUI Group containing the buttons
 * @property {Group} mainGroup - The ScriptUI Group containing the tabs
 * @property {string} scriptUIPanel - The file name ("script.jsx") of a scriptUI Panel. Alt+Click on this tab will open/close this panel.
 * @property {TabPanel~onChange} onChange - Called when the index changes.
 */

/**
 * Adds a new empty Tab in the TabPanel.
 * @method
 * @memberof TabPanel
 * @name addTab
 * @param {string} [tabTitle=''] - The title of the tab.
 * @param {string} [text=tabTitle] - The label of the button.
 * @param {string} [image=''] - The path to the icon.
 * @param {string} [helpTip=''] - The helptip.
 * @param {string} [imageOver=image] - The path to an icon displayed when the mouse is over the button.
 * @return {Tab} The new Tab.
 */

/**
 * Sets the current visible tab.
 * @method
 * @memberof TabPanel
 * @name setCurrentIndex
 * @param {int} [index=0] - The index of the tab to show.
 */

/**
 * Called when the index changes.
 * @callback TabPanel~onChange
 * @memberof TabPanel
 */

/**
 * @class
 * @name Tab
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Tab inside a {@link TabPanel}.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link TabPanel.add} to create a new Tab.
 * @property {int} index - The index of this tab.
 * @property {DuButton} button - The button associated with this tab.
 * @property {Tab~tabActivated} onActivate - The function to execute when the tab is displayed.
 * @property {Tab~tabDeActivated} onActivate - The function to execute when the tab is hidden.
 * @property {Tab~build} build - You can use this callbacl to add a function which builds the UI of the tab, it will be called on first display.
 */

/**
 * The function to execute when the tab is about to be displayed.
 * @callback Tab~tabActivated
 * @memberof Tab
 */

/**
 * The function to execute when the tab is hidden.
 * @callback Tab~tabDeActivated
 * @memberof Tab
 */

/**
 * You can use this callback to add a function which builds the UI of the tab, it will be called on first display.<br />
 * This allows a faster startup of your script by delaying the creation of the tabs which are hidden at startup.<br />
 * The function must take one argument, a ScriptUI Group which is the tab iteself. You can add controls in this group.
 * @callback Tab~build
 * @param {Group} tab - The tab where the ui has to be built
 * @memberof Tab
 */

/**
 * Creates a panel with tabs<br />
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the panel.
 * @param {boolean} [showTitle=true] - Wether to show the titles of the tabs or not.
 * @return {TabPanel} The panel.
 */
DuAEF.DuScriptUI.addTabPanel = function( container )
{
    if ( typeof buttonsAlignment === 'undefined' ) buttonsAlignment = 'center';

    var panel = DuAEF.DuScriptUI.addGroup( container, 'column' );

    panel.alignment = [ 'fill', 'fill' ];

    panel.buttons = [];
    panel.tabs = [];
    panel.tabGroups = [];
    panel.showTitle = true;
    panel.onChange = function() {};

    //adds a group for the buttons
    panel.buttonsGroup = DuAEF.DuScriptUI.addGroup( panel, 'row' );
    //adds a group for the tabs
    panel.mainGroup = DuAEF.DuScriptUI.addGroup( panel, 'stack' );
    panel.mainGroup.alignment = [ 'fill', 'fill' ];

    panel.addTab = function( text, image, helpTip, imageOver )
    {
        //adds the new button
        var button = DuAEF.DuScriptUI.addCheckBox( panel.buttonsGroup, text, image, helpTip, imageOver, undefined, undefined, true );

        button.index = panel.tabs.length;
        panel.buttons.push( button );

        //adds the new tab
        var tab = DuAEF.DuScriptUI.addGroup( panel.mainGroup, 'column' );
        tab.alignment = [ 'fill', 'fill' ];
        tab.visible = false;

        //the onActivate callBack
        tab.tabActivated = function() {};
        tab.tabDeActivated = function() {};
        //the build callBack
        tab.build = function( theTab ) {};
        tab.built = false;

        tab.scriptUIPanel = "";

        tab.button = button;

        //add to the list
        tab.index = panel.tabs.length;
        panel.tabs.push( tab );

        DuAEF.DuScriptUI.allTabs.push( tab );

        button.onClick = function()
        {
            panel.setCurrentIndex( button.index );
        }

        button.onAltClick = function()
        {
            DuAEF.DuAE.App.openScriptUIPanel(tab.scriptUIPanel);
        }

        return tab;
    }

    panel.setCurrentIndex = function( index )
    {
        var numTabs = panel.tabs.length;

        if ( numTabs == 0 ) return;

        //hide all tabs
        for ( var i = 0; i < numTabs; i++ )
        {
            var visible = i == index;
            var tab = panel.tabs[ i ];
            if ( visible )
            {
                if ( !tab.built )
                {
                    tab.build( tab );
                    //resize everything
                    if ( DuAEF.DuScriptUI.uiShown ) DuAEF.DuScriptUI.layout( tab );
                    tab.built = true;
                }
                tab.visible = true;
                tab.tabActivated();
            }
            else
            {
                tab.visible = false;
                tab.tabDeActivated();
            }

            panel.buttons[ i ].setChecked( visible );
        }

        if ( index >= 0 && index < numTabs ) panel.index = index;
        else panel.index = -1;

        panel.onChange();
    }

    return panel;
}

/**
 * Builds all the tabs from all the tab panels<br />
 * @memberof DuAEF.DuScriptUI
 */
DuAEF.DuScriptUI.buildAllTabs = function()
{
    for ( var i = 0, num = DuAEF.DuScriptUI.allTabs.length; i < num; i++ )
    {
        var tab = DuAEF.DuScriptUI.allTabs[ i ];
        if ( !tab.built )
        {
            tab.build( tab );
            //resize everything
            DuAEF.DuScriptUI.layout( tab );
            tab.built = true;
        }
    }
    //check if there's still unbuilt tabs which may have been added
    var redo = false;
    for ( var i = DuAEF.DuScriptUI.allTabs.length - 1; i >= 0; i-- )
    {
        var tab = DuAEF.DuScriptUI.allTabs[ i ];
        if ( !tab.built )
        {
            redo = true;
            break;
        }
    }
    if ( redo ) DuAEF.DuScriptUI.buildAllTabs();
}
