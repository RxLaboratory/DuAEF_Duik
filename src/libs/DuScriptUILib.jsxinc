/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

#include "icons/w14_menu_l.png.jsxinc"
#include "icons/w14_menu_m.png.jsxinc"
#include "icons/w14_layers_m.png.jsxinc"
#include "icons/w14_layers_l.png.jsxinc"
#include "icons/w14_update_l.png.jsxinc"
#include "icons/w14_update_m.png.jsxinc"
#include "icons/w14_checked_m.png.jsxinc"
#include "icons/w14_checked_l.png.jsxinc"
#include "icons/w14_unchecked_l.png.jsxinc"
#include "icons/w14_emptysquare_m.png.jsxinc"

/**
* ScriptUI tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuScriptUI = {};

//initilization
(function ()
{
	/**
	* The default alignment of children of containers with "column" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultColumnAlignment = ["fill","top"];
	/**
	* The default alignment of children of containers with "row" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["left","center"]
	*/
	DuAEF.DuScriptUI.defaultRowAlignment = ["left","center"];
	/**
	* The default alignment of children of containers with "stack" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultStackAlignment = ["fill","top"];
	/**
	* The default spacing of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultSpacing = 2;
	/**
	* The default mqrgins of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultMargins = 2;
})();

/**
 * Changes the color of the text of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI}		text	- The ScriptUI Object
 * @param {Array}				color	- The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.setTextColor = function (text,color)
{
	if (!text) throw "You must provide a ScriptUI Control to change the color of the text";
	var g = text.graphics;
	var textPen = g.newPen(g.PenType.SOLID_COLOR,color,1);
	g.foregroundColor = textPen;
}

/**
 * Changes the color of the background of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI} uiItem - The ScriptUI Object
 * @param {Array} color - The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.setBackgroundColor = function (uiItem,color)
{
	if (!uiItem) throw "You must provide a ScriptUI Control to change the color of the background";
	var g = uiItem.graphics;
	var brush = g.newBrush(g.BrushType.SOLID_COLOR,color);
	g.backgroundColor = brush;
}

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string}	scriptName	- A name for this UI
 * @return {Panel|Window}	The panel created, either a ScriptUI Panel or a ScriptUI Window.<br />
 * The resulting object has one custom method: Panel.refreshUI which takes one argument:<br />
 * a File object which must be the script to reload.<br />
 * The method returns true on success, false otherwise.<br />
 * @example
 * var ui = DuAEF.DuScriptUI.createUI(this,"Test Script");
 * var refreshButton = ui.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuAEF.DuScriptUI.showUI(ui);
 */
DuAEF.DuScriptUI.createUI = function (container, scriptName)
{
	if (!scriptName) scriptName = '';

	var  myPal = null;
	container instanceof Panel ? myPal = container : myPal = new Window('palette',scriptName,undefined, {resizeable:true});

	if (myPal == null) throw "Failed to create User Interface.";

	// Margins and alignment
	myPal.margins = DuAEF.DuScriptUI.defaultMargins;
	myPal.spacing = DuAEF.DuScriptUI.defaultSpacing;
	myPal.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	myPal.orientation = "column";

	myPal.refreshUI = function (scriptFile)
	{

		function refresh()
		{
			var ok = false;
			// Remove everything
			for ( var i = myPal.children.length - 1; i >= 0; i-- )
			{
				myPal.remove( this.children[ i ] );
			}

			// Run the scriptFile
			try
			{
				ok = true;
				$.evalFile( scriptFile );
			}
			catch ( err )
			{
				ok = false;
				//add debug info
				myPal.add('statictext',undefined,err.fileName,{multiline:true});
				myPal.add('statictext',undefined,err.message,{multiline:true});
				myPal.add('statictext',undefined,"on line" + err.line);
				//add a refresh button
				var button = myPal.add('button',undefined,"Refresh UI");
				button.onClick = function () { myPal.refreshUI(scriptFile) };
			}

			// Recalculate UI
			myPal.layout.layout( true );

			return ok;
		}

		return refresh.call(myPal);
	}

	return myPal;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 */
DuAEF.DuScriptUI.showUI = function (ui)
{
	ui.layout.layout(true);
	ui.layout.resize();
	ui.onResizing = ui.onResize = function () {this.layout.resize();}

	// If it's a Window, it needs to be shown
	if (ui instanceof Window) {
		//ui.center();
		ui.show();
	}
}

/**
 * Adds a group in a container, using  DuAEF.DuScriptUI default alignments, and DuAEF.DuScriptUI.defaultSpacing. Margins are set to 0.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the group
 * @param {string}					[orientation] - The orientation to use. One of "column", "row" or "stack". By default, "column" if added in a row, "row" if added in a column.
 * @return {Group}	The group created
 */
DuAEF.DuScriptUI.addGroup = function (container,orientation)
{
	var group = container.add("group");
	group.spacing = 2;
	group.margins = 0;
	if (orientation !== undefined) group.orientation = orientation;
	if(group.orientation === "row")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultRowAlignment;
	}
	else if (group.orientation === "column")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	}
	else
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultStackAlignment;
	}

	return group;
}

/**
* @class
* @name Separator
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Separator.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addSeparator} to create a Separator.<br />
* The Separator inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {StaticText|CheckBox} label - the label
* @property {boolean} checkable - Read-Only | true if a checkbox is displayed
*/

/**
 * Adds separator with an optionnal name in the group
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group} container - Where to create the separator
 * @param {string} [name] - The name displayed
 * @param {boolean} [checkable=false] - When true, adds a checkbox to the separator
 * @param {boolean} [drawLine=true] - Draws a line when there is no name. When false, the separator is an empty space
 * @return {Separator} The separator
 */
DuAEF.DuScriptUI.addSeparator = function (container,name,checkable,drawLine)
{
	if (name == undefined) name = "";
	if (checkable == undefined) checkable = false;
	if (drawLine == undefined) drawLine = true;
	var separator = DuAEF.DuScriptUI.addGroup(container,"row");
	separator.margins = DuAEF.DuScriptUI.defaultMargins;
	separator.margins.bottom = DuAEF.DuScriptUI.defaultMargins*2;
	separator.alignment = ['fill','top'];
	separator.checkable = checkable;

	separator.label = null;
	if (name != '' || checkable)
	{
		if (checkable) separator.label = separator.add('checkbox',undefined,name);
		else separator.label = separator.add('statictext',undefined,name);
		separator.label.alignment = ['center','bottom'];
		if (drawLine) DuAEF.DuScriptUI.setBackgroundColor(separator,DuAEF.DuJS.Color.Colors.DARK_GREY);
	}
	else if (drawLine)
	{
		DuAEF.DuScriptUI.setBackgroundColor(separator,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
	}

	return separator;
}

/**
 * @class
 * @name ImageButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addImageButton} to create an Image Button.<br />
 * The Image Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {Image} image - The scriptui object representing the image
 * @property {StaticText} label - The label
 * @property {ImageButton~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback ImageButton~onClick
 * @memberof ImageButton
 */

/**
 * Creates a button with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]		- The label of the button. Default: empty string
 * @param {string}					[image]		- The path to the icon. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {string}					[imageOver=image]	- The path to an icon displayed when the mouse is over the button.
 * @return {ImageButton}			The image button created.
 */
DuAEF.DuScriptUI.addImageButton = function (container,text,image,helpTip,imageOver)
{
	if (!text) text = '';
	if (!image) image = '';
	if (!helpTip) helpTip = '';
	if (!imageOver) imageOver = '';

	if (text == '' && image == '') throw "You must provide either a text or an icon to create the button";

	var imageButton = container.add('group');
	imageButton.orientation = 'row';
	imageButton.margins = 2;
	imageButton.spacing = 5;
	imageButton.group = imageButton;

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.onClick = function(){};
	imageButton.image = null;
	imageButton.label = null;

	if (image != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(image)) throw new Error("Image does not exists: " + image);
		var icon = imageButton.add('image',undefined,image);
		icon.alignment = ['center','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
		imageButton.icon = icon;
	}
	if (imageOver != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageOver)) throw new Error("Image does not exists: " + imageOver);
	}

	if (text != '')
	{
		var label = imageButton.add('statictext',undefined,text);
		label.helpTip = helpTip;
		label.alignment = ['left','center'];
		imageButton.label = label;
		DuAEF.DuScriptUI.setBackgroundColor(imageButton,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		imageButton.alignment = ['fill','top'];
	}

	//events
	imageButton.clicked = function (e)
	{
		try { imageButton.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured in file at line ' + e.line + '\n\n' + e.description); }
	}

	imageButton.mouseOver = function (e)
	{
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label)
		{
			DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(imageButton.group,DuAEF.DuJS.Color.Colors.DARK_GREY);
		}
	}

	imageButton.mouseOut = function (e)
	{
		if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
		if (label)
		{
			DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(imageButton.group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		}
	}

	//add events
	imageButton.addEventListener("mousedown",imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.mouseOver);
		if (label) imageButton.label.addEventListener("mouseout",imageButton.mouseOut);
	}
	else
	{
		imageButton.addEventListener("mouseover",imageButton.mouseOver);
		imageButton.addEventListener("mouseout",imageButton.mouseOut);
	}


	return imageButton;
}

/**
 * @class
 * @name ImageCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addImageCheckBox} to create an Image Checkbox.<br />
 * The Image Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {string} standardImage - The path to the image (or a PNG as a string representation)
* @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
* @property {string} imageChecked - The path to the image (or a PNG as a string representation) to display when the button is checked
* @property {Image}	image	- The scriptui object representing the image
* @property {StaticText}	label	- The label
* @property {boolean}	checked 	- The checked state of the button
* @property {ImageCheckBox~onClick} onClick - The function to execute when the button is clicked
*/

/**
 * The function to execute when the button is clicked.
 * @callback ImageCheckBox~onClick
 * @memberof ImageButton
 */

/**
 * Creates a checkbox with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					text			- The label of the button. Default: empty string
 * @param {string}					image			- The path to the icon. Default: empty string
 * @param {string}					helpTip			- The helptip. Default: empty string
 * @param {string}					imageChecked	- The path to an icon displayed when the button is checked. Default: empty string
 * @param {string}					imageOver		- The path to an icon displayed when the mouse is over the button. Default: same as imageChecked
 * @param {string}					[textChecked]			- The label of the button displayed when it is checked.
 * @return {ImageCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addImageCheckBox = function (container,text,image,helpTip,imageChecked,imageOver,textChecked)
{
	if (!container) return null;
	if (!text) text = '';
	if (!image) image = '';
	if (!helpTip) helpTip = '';
	if (!imageChecked) imageChecked = '';
	if (!imageOver) imageOver = imageChecked;
	if (textChecked == undefined) textChecked = '';

	if (text == '' && image == '') throw "You must provide either a text or an icon to create the checkbox";

	var group = container.add('group');
	group.orientation = 'row';
	group.margins = 2;
	group.spacing = 5;
	var imageButton = group;
	imageButton.group = group;

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.imageChecked = imageChecked;
	imageButton.onClick = function () {};
	imageButton.checked = imageButton.value = false;
	imageButton.textChecked = textChecked;
	imageButton.defaultText = text;

	imageButton.iconChecked = DuAEF.DuBinary.toFile(w14_checked_m);
	imageButton.iconCheckedOver = DuAEF.DuBinary.toFile(w14_checked_l);
	imageButton.iconUnchecked = DuAEF.DuBinary.toFile(w14_emptysquare_m);
	imageButton.iconUncheckedOver = DuAEF.DuBinary.toFile(w14_unchecked_l);

	//add checkbox
	if (text != '')
	{
		imageButton.checkbox = group.add('image',undefined,imageButton.iconUnchecked);
		imageButton.checkbox.alignment = ['left','center'];
		imageButton.checkbox.helpTip = helpTip;
		DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
	}

	if (image != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(image)) throw new Error("Image does not exists: " + image);
		var icon = group.add('image',undefined,image);
		icon.alignment = ['center','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
	}
	if (imageOver != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageOver)) throw new Error("Image does not exists: " + imageOver);
	}
	if (imageChecked != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageChecked)) throw new Error("Image does not exists: " + imageChecked);
	}

	if (text != '')
	{
		if (image != '')
		{
			var label = group.add('statictext',undefined,text);
			label.helpTip = helpTip;
			label.alignment = ['center','center'];
			imageButton.label = label;
		}
		else
		{
			var label = group.add('checkbox',undefined,text);
			label.helpTip = helpTip;
			label.alignment = ['center','center'];
			imageButton.label = label;
			imageButton.box = true;
		}
		if (text.length < textChecked.length) imageButton.label.minimumSize.width = textChecked.length*7;
		else imageButton.label.minimumSize.width = text.length*7;

	}

	/**
	* Checks or unchecks the button
	* @memberof ImageCheckBox
	* @param {boolean} c	- The checked state
	*/
	imageButton.setChecked = function (c)
	{
		imageButton.checked = imageButton.value = c;

		if (imageButton.label)
		{
			if (imageButton.checked)
			{
				if (imageButton.textChecked != '') imageButton.label.text = imageButton.textChecked;
				imageButton.checkbox.image = imageButton.iconChecked;
			}
			else
			{
				imageButton.label.text = imageButton.defaultText;
				imageButton.checkbox.image = imageButton.iconUnchecked;
			}
		}

		if (imageButton.image)
		{
			if (imageButton.checked)
			{
				if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
			}
			else
			{
				if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
			}
		}
	}

	imageButton.clicked = function (e)
	{
		imageButton.setChecked(!imageButton.checked);
		try { imageButton.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	imageButton.mouseOver = function (e)
	{
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label)
		{
			DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.DARK_GREY);
			if (imageButton.checked) imageButton.checkbox.image = imageButton.iconCheckedOver;
			else imageButton.checkbox.image = imageButton.iconUncheckedOver;
		}
	}

	imageButton.mouseOut = function (e)
	{
		if (label) DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		if (imageButton.checked)
		{
			if (icon) if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
			if (label) imageButton.checkbox.image = imageButton.iconChecked;
		}
		else
		{
			if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
			if (label) imageButton.checkbox.image = imageButton.iconUnchecked;
		}
	}

	imageButton.group.addEventListener("mousedown",imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.mouseOver);
		if (label) imageButton.label.addEventListener("mouseout",imageButton.mouseOut);
	}
	else
	{
		imageButton.group.addEventListener("mouseover",imageButton.mouseOver);
		imageButton.group.addEventListener("mouseout",imageButton.mouseOut);
	}

	return imageButton;
}

/**
 * @class
 * @name NiceCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Nice Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addNiceCheckBox} to create an Nice Checkbox.<br />
 * The Nice Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {StaticText} label - The statictext used as a label
* @property {CheckBox} checkbox - The box
* @property {float[]} color - The color [R,G,B,A]
* @property {NiceCheckbox~onClick} onClick - Function to execute when clicked
*/

/**
 * The function to execute when the button is clicked.
 * @callback NiceCheckbox~onClick
 * @memberof NiceCheckbox
 */

/**
 * Creates a checkbox which can be colored, and changes color on hover
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]			- The label of the button.
 * @param {string}					[helpTip]			- The helptip.
 * @param {color}					[color=DuAEF.DuJS.Color.Colors.LIGHT_GREY]			- The color of the text
 * @return {NiceCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addNiceCheckBox = function (container,text,helpTip,color)
{
	if (color == undefined) color = DuAEF.DuJS.Color.Colors.LIGHT_GREY;
	if (helpTip == undefined) helpTip = '';
	if (text == undefined) text = '';

	var niceCheckBox = container.add('group');
	niceCheckBox.orientation = 'row';
	niceCheckBox.alignChildren = ['left','center'];
	niceCheckBox.spacing = DuAEF.DuScriptUI.defaultSpacing;
	niceCheckBox.margins = 0;
	niceCheckBox.checkBox = niceCheckBox.add('checkbox',undefined,'');
	niceCheckBox.label = niceCheckBox.add('statictext',undefined,text);
	niceCheckBox.onClick = function () {};
	niceCheckBox.checked = niceCheckBox.value = false;
	niceCheckBox.color = color;

	niceCheckBox.checkBox.helpTip = helpTip;
	niceCheckBox.label.helpTip = helpTip;

	DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,niceCheckBox.color);

	/**
	* Checks or unchecks the button
	* @memberof NiceCheckBox
	* @param {boolean} c	- The checked state
	*/
	niceCheckBox.setChecked = function (c)
	{
		niceCheckBox.checked = niceCheckBox.value = c;
		niceCheckBox.checkBox.value = c;
	}

	niceCheckBox.labelClicked = function (e)
	{
		niceCheckBox.setChecked(!niceCheckBox.checked);
		try { niceCheckBox.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	niceCheckBox.checkBoxClicked = function (e)
	{
		niceCheckBox.checked = niceCheckBox.value = niceCheckBox.checkBox.value;
		try { niceCheckBox.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	niceCheckBox.mouseOver = function (e)
	{
		DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
	}

	niceCheckBox.mouseOut = function (e)
	{
		DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,niceCheckBox.color);
	}

	niceCheckBox.label.addEventListener("mousedown",niceCheckBox.labelClicked,false);
	niceCheckBox.checkBox.onClick = niceCheckBox.checkBoxClicked;
	niceCheckBox.addEventListener("mouseover",niceCheckBox.mouseOver);
	niceCheckBox.addEventListener("mouseout",niceCheckBox.mouseOut);

	return niceCheckBox;
}

/**
* @class
* @name Form
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Form.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addForm} to create a Form.<br />
* The Form inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {Group} labels - The left vertical group
* @property {Group} buttons - The right vertical group
*/

/**
 * Creates a layout to add forms to a UI, using ScriptUI groups.<br />
 * You can easily add controls/fields to this form using DuAEF.DuScriptUI.addFormField
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the form.
 * @return {Form}		The custom Group containing the form.
 */
DuAEF.DuScriptUI.addForm = function (container)
{
	var mainGroup = container.add('group');
	mainGroup.orientation = 'row';
	mainGroup.margins = 0;
	mainGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var labelsGroup = mainGroup.add('group');
	labelsGroup.alignment = ['left','top'];
	labelsGroup.orientation = 'column';
	labelsGroup.alignChildren = ['left','bottom'];
	labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var buttonsGroup = mainGroup.add('group');
	buttonsGroup.alignment = ['fill','top'];
	buttonsGroup.orientation = 'column';
	buttonsGroup.alignChildren = ['fill','fill'];
	buttonsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	mainGroup.labels = labelsGroup;
	mainGroup.buttons = buttonsGroup;

	return mainGroup;
}

/**
 * Adds a field to a form
 * example: Duik.ui.addFormField(form,'Composition:','dropdownlist',['Composition1','Composition2'],'Select a composition')
 * @memberof Duik.ui
 * @param {Form}			form		- A custom ScriptUI group as returned by DuAEF.DuScriptUI.addForm
 * @param {string}			label		- The label text.
 * @param {string}			type		- The type of ScriptUI object to add (like 'button','edittext', etc.).
 * @param {object}			[value]		- The default value or content of the field added, depends on the type.
 * @param {string}			[helpTip]		- The helpTip of the form control.
 * @return {ScriptUI[]}		An array with at 0 the StaticText label, and at 1 the ScriptUI object of the type type, added to the form
 */
DuAEF.DuScriptUI.addFormField = function (form,label,type,value,helpTip)
{
	if (helpTip == undefined) helpTip = '';
	var control = null;
	var height = 20;
	if (type == "ImageButton")
	{
		control = DuAEF.DuScriptUI.addImageButton(form.buttons,'',value[0],helpTip,value[1]);
		height = control.image.preferredSize[1];
	}
	else
	{
		control = form.buttons.add(type,undefined,value);
		control.helpTip = helpTip;
		height = control.preferredSize[1];
	}

	var l = form.labels.add('statictext',undefined,label);
	l.helpTip = helpTip;

	l.minimumSize.height = l.maximumSize.height = height;
	return [l,control];
}

/**
* @class
* @name NiceEditText
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Nice EditText.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addNiceEditText} to create a Nice EditText.<br />
* The Nice EditText inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {string} text - Read-Only | The text displayed
* @property {NiceEditText~onActivate} onActivate - Function to execute when activated
* @property {NiceEditText~onDeactivate} onDeactivate - Function to execute when deactivated
* @property {NiceEditText~onChange} onChange - Function to execute when text changed
*/

/**
 * The function to execute when the text is changed.
 * @callback NiceEditText~onChange
 * @memberof NiceEditText
 */

/**
 * The function to execute when the box is activated.
 * @callback NiceEditText~onActivate
 * @memberof NiceEditText
 */

/**
 * The function to execute when the box is deactivated.
 * @callback NiceEditText~onDeactivate
 * @memberof NiceEditText
 */

/**
 * Changes the text
 * @method
 * @memberof NiceEditText
 * @name setText
 * @param {string} text - The new text
 */

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {string}	text		- The initial text in the edit.
 * @param {string}	[prefix]		- A text prefix to display.
 * @param {string}	[suffix]		- A text suffix to display.
 * @param {string}	[placeHolder]	- A place holder default text.
 * @return {NiceEditText}	The custom Group containing the edit text.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addNiceEditText = function(container,text,prefix,suffix,placeHolder)
{
	if (prefix == undefined) prefix = '';
	if (suffix == undefined) suffix = '';
	if (placeHolder == undefined) placeHolder = '';
	var niceEditText = container.add('group');
	niceEditText.orientation = 'stack';
	niceEditText.margins = 0;
	niceEditText.alignChildren = ['fill','fill'];
	niceEditText.placeHolder = placeHolder;
	var staticText = text;
	if (text == "" && placeHolder != "") staticText = placeHolder;
	niceEditText.static = niceEditText.add('statictext',undefined,prefix + staticText + suffix);
	niceEditText.static.alignment = ['fill','center'];
	if (text == "" && placeHolder != "") DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
	else DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
	niceEditText.edit = niceEditText.add('edittext',undefined,text);
	niceEditText.edit.visible = false;
	niceEditText.prefix = prefix;
	niceEditText.suffix = suffix;

	niceEditText.text = text;
	niceEditText.editing = false;

	niceEditText.onActivate = function(){};
	niceEditText.onDeactivate = function(){};
	niceEditText.onChange = function(){};
	niceEditText.onChanging = function(){};

	niceEditText.clicked = function()
	{
		if (niceEditText.editing) return;
		else
		{
			niceEditText.static.visible = false;
			niceEditText.edit.visible = true;
			niceEditText.editing = true;
			niceEditText.edit.active = true;
		}
	}

	niceEditText.changed = function()
	{
		niceEditText.editing = false;
		var staticText = '';
		if (niceEditText.edit.text == '' && niceEditText.placeHolder != '')
		{
			DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			staticText = niceEditText.placeHolder;
		}
		else
		{
			if (niceEditText.placeHolder != '') DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
			staticText = niceEditText.edit.text;
		}
		niceEditText.static.text = niceEditText.prefix + staticText + niceEditText.suffix;
		niceEditText.text = niceEditText.edit.text ;
		niceEditText.edit.visible = false;
		niceEditText.static.visible = true;
		niceEditText.edit.active = false;
		niceEditText.onChange();
	}
	niceEditText.changing = function()
	{
		niceEditText.text = niceEditText.edit.text ;
		niceEditText.onChanging();
	}

	niceEditText.setText = function (text)
	{
		niceEditText.edit.text = niceEditText.text = text;
		niceEditText.static.text = niceEditText.prefix + text + niceEditText.suffix;
	}


	niceEditText.edit.onActivate = function()
	{
		niceEditText.onActivate();
	}
	niceEditText.edit.onDeactivate = function ()
	{
		niceEditText.changed();
		niceEditText.onDeactivate();
	}
	niceEditText.edit.onChange = niceEditText.changed;
	niceEditText.edit.onChanging = niceEditText.changing;
	niceEditText.addEventListener("mousedown",niceEditText.clicked,true);

	return niceEditText;
}

/**
* @class
* @name NiceSlider
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Nice Slider.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addNiceSlider} to create a Nice Slider.<br />
* The Nice Slider inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {int} value - Read-Only | The current value
* @property {NiceSlider~onChanging} onChanging - Function to execute when changing
* @property {NiceSlider~onChange} onChange - Function to execute when changed
*/

/**
 * Function to execute when changing
 * @callback NiceSlider~onChanging
 * @memberof NiceSlider
 */

/**
 * Function to execute when changed
 * @callback NiceSlider~onChange
 * @memberof NiceSlider
 */

/**
 * Changes the value
 * @method
 * @memberof NiceSlider
 * @name setValue
 * @param {int} value - The new value
 */

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {int}	[defaultValue=0]		- The initial value.
 * @param {int}	[min=0]		- The minimal value.
 * @param {int}	[max=100]		- The maximal value.
 * @param {string}	[orientation='column']		- Either 'row' or 'column'
 * @param {boolean}	[invertedAppearance]		- Revert the slider with max value on the left
 * @param {string}	[prefix]		- A text prefix to display.
 * @param {string}	[suffix]		- A text suffix to display.
 * @return {NiceSlider}	The custom Group containing the slider.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addNiceSlider = function(container,defaultValue,min,max,orientation,invertedAppearance,prefix,suffix)
{
	if (prefix == undefined) prefix = '';
	if (suffix == undefined) suffix = '';
	if (min == undefined) min = 0;
	if (max == undefined) max = 100;
	if (defaultValue == undefined) defaultValue = 0;
	if (orientation != 'row') orientation = 'column';

	var niceSlider = container.add('group');
	niceSlider.orientation = orientation;
	niceSlider.spacing = DuAEF.DuScriptUI.defaultSpacing;
	niceSlider.alignment = ['fill','top'];
	niceSlider.alignChildren = ['fill','center'];

	niceSlider.value = defaultValue;
	niceSlider.invertedAppearance = invertedAppearance;

	var sliderValue = defaultValue;
	if (niceSlider.invertedAppearance) sliderValue = max-defaultValue+min;

	niceSlider.slider = niceSlider.add('slider',undefined,sliderValue,min,max);
	niceSlider.edit = DuAEF.DuScriptUI.addNiceEditText(niceSlider,defaultValue.toString(),prefix,suffix);
	niceSlider.edit.minimumSize.width = max.toString().length*7+7;
	if (orientation == 'row')
	{
		niceSlider.edit.alignment = ['right','center'];
	}
	else
	{
		niceSlider.edit.alignment = ['center','center'];
	}
	niceSlider.onChanging = function () {};
	niceSlider.onChange = function () {};

	niceSlider.setValue = function (val)
	{
		niceSlider.value = val;
		niceSlider.edit.setText(niceSlider.value);
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue - val + niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
	}

	//events
	niceSlider.slider.onChanging = function ()
	{
		if (niceSlider.invertedAppearance) niceSlider.value = Math.round(niceSlider.slider.maxvalue - niceSlider.slider.value + niceSlider.slider.minvalue);
		else niceSlider.value = Math.round(niceSlider.slider.value);
		niceSlider.edit.setText(niceSlider.value);
		niceSlider.onChanging();
	}
	niceSlider.slider.onChange = function ()
	{
		niceSlider.onChange();
	}
	niceSlider.edit.onChanging = function ()
	{
		var val = parseInt(niceSlider.edit.text);
		if (isNaN(val)) return;
		niceSlider.value = val;
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue-val+niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
		niceSlider.onChanging();
	}
	niceSlider.edit.onChange = function ()
	{
		var val = parseInt(niceSlider.edit.text);
		if (isNaN(val)) return;
		if (val < niceSlider.slider.minvalue) val = niceSlider.slider.minvalue;
		if (val > niceSlider.slider.maxvalue) val = niceSlider.slider.maxvalue;
		niceSlider.value = val;
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue-val+niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
		niceSlider.onChange();
	}

	return niceSlider;
}

/**
 * @class
 * @name Selector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} image - The path to the current image (or a PNG as a string representation)
 * @property {Image} icon - The Image currently displayed
 * @property {StaticText} label - The current text
 * @property {ImageButtons[]} items  - The buttons
 * @property {int} index  - The current index
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback Selector~onChange
 * @memberof Selector
 */

/**
 * Adds a new button to the selector
 * @method
 * @memberof Selector
 * @name addButton
 * @param {string} text - The text displayed by the button
 * @param {string} image - The icon, either a path to the file or a PNG represented as a string.
 * @param {string} helpTip - The help tip
 * @param {string} imageOver - The roll over icon, either a path to the file or a PNG represented as a string.
 */

/**
 * Changes the selection and the current index of the selector
 * @method
 * @memberof Selector
 * @name setCurrentIndex
 * @param {int} index - The new index
 */

/**
 * Creates a drop down selector, using image buttons
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addSelector = function(container)
{
	//create main group
	var selector = container.add('group');
	selector.orientation = 'row';
	selector.margins = 2;
	selector.spacing = 5;
	selector.alignment = ['fill','top'];
	selector.alignChildren = ['center','center'];
	DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	selector.addButton = function (text,image,helpTip,imageOver)
	{
		if (!text) text = '-';
		if (!image) image = '';
		if (!helpTip) helpTip = '';
		if (!imageOver) imageOver = '';

		var size = text.length*7;
		if (selector.label.minimumSize.width < size) selector.label.minimumSize.width = size;

		var index = selector.items.length;
		selector.items.push([text,image,helpTip,imageOver]);
		//add to popup
		var button = DuAEF.DuScriptUI.addImageButton(selector.popup,text,image,helpTip,imageOver);
		button.onClick = function () { selector.setCurrentIndex(index); selector.popup.hide(); };
		button.icon.alignment = ['left','center'];

	}

	selector.setCurrentIndex = function (index)
	{
		if (index < 0) return;
		if (index >= selector.items.length) return;

		var item = selector.items[index];

		selector.image = item[1];
		if (selector.image != '')
		{
			selector.icon.image = selector.image;
			selector.icon.helpTip = item[2];
		}
		selector.label.helpTip = item[2];
		selector.label.text = item[0];
		selector.imageOver = item[3];

		selector.index = index;

		selector.onChange();
	}

	//the menu button
	selector.menuImage = DuAEF.DuBinary.toFile(w14_menu_m);
	selector.menuImageOver = DuAEF.DuBinary.toFile(w14_menu_l);
	selector.menuButton = selector.add('image',undefined,selector.menuImage);
	selector.menuButton.alignment = ['left','center'];

	//the image
	selector.image = '';
	selector.icon = selector.add('image');

	//the text
	selector.label = selector.add('statictext',undefined,'');
	selector.label.helpTip = '';

	//the image over
	selector.imageOver = '';

	//create popup
	selector.popup = new Window('palette','',undefined,{borderless:true});
	selector.popup.margins = 2;
	selector.popup.spacing = 0;
	DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
	selector.popup.closeButton = DuAEF.DuScriptUI.addImageButton(selector.popup,"Cancel");
	selector.popup.closeButton.onClick = function () { selector.popup.hide(); };
	//Deactivate bugs on CS6, needs a try/catch
	selector.popup.onDeactivate = function () { try { selector.popup.hide(); } catch (e) {} };

	//add default button
	selector.items = [];
	selector.index = -1;


	selector.clicked = function (e)
	{
		var popup = false;

		if (e.target === selector.menuButton) popup = true;
		if (e.altKey) popup = true;

		if (popup)
		{
			if (DuAEF.DuAE.App.version < 11 || DuAEF.DuAE.App.version >= 12)
			{
				var x = e.screenX-e.clientX;
				var y = e.screenY-e.clientY;
				selector.popup.location = [x,y];
			}
			selector.popup.show();
		}
		else
		{
			var index = selector.index;
			if (index == selector.items.length -1) index = 0;
			else index++;
			selector.setCurrentIndex(index);
		}
	}

	//mouse over
	selector.mouseOver = function (e)
	{
		selector.menuButton.image = selector.menuImageOver;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.DARK_GREY);
		if (selector.imageOver != '') selector.icon.image = selector.imageOver;
	}

	selector.mouseOut = function (e)
	{
		selector.menuButton.image = selector.menuImage;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		if (selector.image != '') selector.icon.image = selector.image;
	}

	// Hack - CS6 Bugs on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		selector.label.addEventListener("mouseover",selector.mouseOver);
		selector.label.addEventListener("mouseout",selector.mouseOut);
	}
	else
	{
		selector.addEventListener("mouseover",selector.mouseOver);
		selector.addEventListener("mouseout",selector.mouseOut);
	}
	selector.addEventListener("click",selector.clicked,true);

	selector.onChange = function(){};

	return selector;
}

/**
 * @class
 * @name LayerSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addLayerSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [index=0]  - The current layer index, 0 if None
 * @property {CompItem|null} [comp=null] - The composition linked to the selector.<br />
 * If set to null, the seletor will use the current active composition.
 * @property {boolean} [selectedOnly=false] - True to list only selected layers in the composition
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback LayerSelector~onChange
 * @memberof LayerSelector
 */

/**
 * Changes the selection and the current layer index of the selector
 * @method
 * @memberof LayerSelector
 * @name setCurrentIndex
 * @param {int} index - The new layer index
 */

/**
* Force the refresh of the layer list
* @method
* @memberof LayerSelector
* @name refresh
*/

/**
 * Creates a drop down selector for layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addLayerSelector = function(container)
{
	//create main group
	var selector = container.add('group');
	selector.orientation = 'row';
	selector.margins = 2;
	selector.spacing = 5;
	selector.alignment = ['fill','top'];
	selector.alignChildren = ['center','center'];
	DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	//init
	selector.index = 0;
	selector.comp = null;
	selector.selectedOnly = false;
	selector.pauseRefresh = false;

	var cs6 = DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12;

	//CS6
	if (cs6)
	{
		//the menu button
		selector.menuImage = DuAEF.DuBinary.toFile(w14_layers_m);
		selector.menuButton = selector.add('image',undefined,selector.menuImage);
		selector.menuButton.alignment = ['left','center'];

		//the dropdownlist
		selector.popup = {};
		selector.popup.list = selector.add('dropdownlist');
		selector.popup.list.alignment = ['fill','center'];

		//the refresh button
		selector.refreshImage = DuAEF.DuBinary.toFile(w14_update_m);
		selector.refreshImageOver = DuAEF.DuBinary.toFile(w14_update_l);
		selector.refreshButton = selector.add('image',undefined,selector.refreshImage);
		selector.refreshButton.alignment = ['right','center'];
	}
	else
	{
		//the menu button
		selector.menuImage = DuAEF.DuBinary.toFile(w14_layers_m);
		selector.menuImageOver = DuAEF.DuBinary.toFile(w14_layers_l);
		selector.menuButton = selector.add('image',undefined,selector.menuImage);
		selector.menuButton.alignment = ['left','center'];

		//the text
		selector.label = selector.add('statictext',undefined,'None');
		selector.label.helpTip = '';
		selector.label.alignment = ['fill','center'];

		//create popup
		selector.popup = new Window('palette','',undefined,{borderless:true});
		selector.popup.margins = 2;
		selector.popup.spacing = 0;
		DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
		selector.popup.closeButton = DuAEF.DuScriptUI.addImageButton(selector.popup,"Cancel");
		selector.popup.closeButton.onClick = function () { selector.popup.hide(); };
		selector.popup.onDeactivate = function () { selector.popup.hide(); };
		selector.popup.list = selector.popup.add('listbox',undefined);

		selector.clicked = function (e)
		{
			selector.refresh();

			selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
			selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

			selector.popup.layout.layout();
			selector.popup.layout.resize();

			var x = e.screenX-e.clientX;
			var y = e.screenY-e.clientY;
			selector.popup.location = [x,y];

			selector.popup.show();
		}

		selector.mouseOver = function (e)
		{
			selector.menuButton.image = selector.menuImageOver;
			DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.DARK_GREY);
		}

		selector.mouseOut = function (e)
		{
			selector.menuButton.image = selector.menuImage;
			DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		}

		selector.addEventListener("mouseover",selector.mouseOver);
		selector.addEventListener("mouseout",selector.mouseOut);

		selector.addEventListener("click",selector.clicked,true);
	}

	selector.popup.list.add('item',"None");
	selector.popup.list.selection = 0;

	selector.refresh = function()
	{
		var comp = selector.comp;
		if (!comp) comp = DuAEF.DuAE.Project.getActiveComp();
		if (!comp) return;

		selector.pauseRefresh = true;

		var layers;
		if (selector.selectedOnly) layers = comp.selectedLayers;
		else layers = comp.layers;

		var prevIndex = selector.index;
		selector.popup.list.removeAll();
		selector.popup.list.add('item',"None");
		var it = new Iterator(layers);
		it.do(function(layer)
		{
			selector.popup.list.add('item',layer.index + ' | ' + layer.name);
		});
		selector.setCurrentIndex(prevIndex);

		selector.pauseRefresh = false;
	};

	selector.setCurrentIndex = function (index)
	{
		if (index < 0) return;

		selector.pauseRefresh = true;

		if (index == 0)
		{
			selector.popup.list.selection = 0;
		}
		else
		{
			for(var i = 0,num = selector.popup.list.items.length ; i < num ; i++)
			{
				var t = selector.popup.list.items[i].text;
				if (index == parseInt(t.split(' | ')[0]))
				{
					selector.popup.list.selection = i;
					break;
				}
			}
		}

		if (!cs6) selector.label.text = selector.popup.list.selection.text;

		selector.index = index;

		selector.pauseRefresh = false;

		selector.onChange();
	};

	selector.popup.list.onChange = function()
	{
		if (selector.pauseRefresh) return;
		selector.setCurrentIndex(selector.popup.list.selection.index);
		if (!cs6) selector.popup.hide();
	};

	if (cs6) selector.refreshButton.addEventListener("mousedown",selector.refresh,false);

	selector.onChange = function(){};

	return selector;
}
