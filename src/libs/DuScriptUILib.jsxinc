/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

#include "icons/w14_menu_l.png.jsxinc"
#include "icons/w14_menu_m.png.jsxinc"
#include "icons/w14_layers_m.png.jsxinc"
#include "icons/w14_layers_l.png.jsxinc"
#include "icons/w14_update_l.png.jsxinc"
#include "icons/w14_update_m.png.jsxinc"
#include "icons/w14_checked_m.png.jsxinc"
#include "icons/w14_checked_l.png.jsxinc"
#include "icons/w14_unchecked_l.png.jsxinc"
#include "icons/w14_emptysquare_m.png.jsxinc"
#include "icons/w14_url_m.png.jsxinc"
#include "icons/w14_url_l.png.jsxinc"
#include "icons/w14_cancel_m.png.jsxinc"
#include "icons/w14_cancel_l.png.jsxinc"
#include "icons/w14_comp_l.png.jsxinc"
#include "icons/w14_comp_m.png.jsxinc"
#include "icons/w14_eyedropper_m.png.jsxinc"
#include "icons/w14_eyedropper_l.png.jsxinc"
#include 'icons/w25_back_r.jsxinc'
#include 'icons/w25_back_m.jsxinc'
#include 'icons/w25_check_r.jsxinc'
#include 'icons/w25_check_g.jsxinc'

/**
* ScriptUI tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuScriptUI = {};

/**
* The default alignment of children of containers with "column" orientation
* @memberof DuAEF.DuScriptUI
* @type {String[]}
* @default ["fill","top"]
*/
DuAEF.DuScriptUI.defaultColumnAlignment = ["fill","top"];

/**
* The default alignment of children of containers with "row" orientation
* @memberof DuAEF.DuScriptUI
* @type {String[]}
* @default ["left","center"]
*/
DuAEF.DuScriptUI.defaultRowAlignment = ["left","center"];

/**
* The default alignment of children of containers with "stack" orientation
* @memberof DuAEF.DuScriptUI
* @type {String[]}
* @default ["fill","top"]
*/
DuAEF.DuScriptUI.defaultStackAlignment = ["fill","top"];

/**
* The default spacing of containers
* @memberof DuAEF.DuScriptUI
* @type {int}
* @default 2
*/
DuAEF.DuScriptUI.defaultSpacing = 2;

/**
* The default margins of containers
* @memberof DuAEF.DuScriptUI
* @type {int}
* @default 2
*/
DuAEF.DuScriptUI.defaultMargins = 2;

/**
* Stores all strings used by the UI.<br />
* This can be very useful to work with a translation framework.
*/
DuAEF.DuScriptUI.uiStrings = [];

//low-level undocumented list: keeps the currently highlighted controls
DuAEF.DuScriptUI.highlightedControls = [];

//low-level undocumented function: dims all currently highlighted controls
DuAEF.DuScriptUI.dimControls = function(e)
{
	if (DuAEF.DuScriptUI.highlightedControls.length == 0) return;
	for (var i = DuAEF.DuScriptUI.highlightedControls.length-1; i >= 0; i--)
	{
		try { DuAEF.DuScriptUI.highlightedControls[i].dim(); } catch (e) {};
		DuAEF.DuScriptUI.highlightedControls.pop();
	}
}

/**
 * Adjust the color according to the brightness setting of After Effects
 * @memberof DuAEF.DuScriptUI
 * @param {float[]} color - The color [R,V,B,A] Array
 * @return {float[]} - The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.adjustColor = function (color)
{
	//gets the main application color
	var q = app.themeColor(78)[0];
	//the darkest one is 0.15000000596046
	q = q - 0.15000000596046;
	var newColor = color + [q,q,q,0];
	for (var i = 0; i < 3; i++)
	{
		if (newColor[i] < 0) newColor[i] = 0;
		else if (newColor[i] > 1) newColor[i] = 1;
	}
	return newColor;
}

/**
 * Changes the color of the text of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI}		text	- The ScriptUI Object
 * @param {float[]}				color	- The new color [R,V,B,A] Array
 * @param {bool}				[adjusted=true]	- lightens the color if the brightness setting of Ae is not set on the darkest one
 */
DuAEF.DuScriptUI.setTextColor = function (text,color,adjusted)
{
	if (typeof adjusted === 'undefined') adjusted = true;
	if (!text) throw "You must provide a ScriptUI Control to change the color of the text";
	if (adjusted) c = DuAEF.DuScriptUI.adjustColor(color);
	var g = text.graphics;
	var textPen = g.newPen(g.PenType.SOLID_COLOR,c,1);
	g.foregroundColor = textPen;
}

/**
 * Changes the color of the background of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI} uiItem - The ScriptUI Object
 * @param {Array} color - The new color [R,V,B,A] Array
 * @param {bool} [adjusted=true] - lightens the color if the brightness setting of Ae is not set on the darkest one
 */
DuAEF.DuScriptUI.setBackgroundColor = function (uiItem,color,adjusted)
{
	if (typeof adjusted === 'undefined') adjusted = true;
	if (!uiItem) throw "You must provide a ScriptUI Control to change the color of the background";
	if (adjusted) c = DuAEF.DuScriptUI.adjustColor(color);
	var g = uiItem.graphics;
	var brush = g.newBrush(g.BrushType.SOLID_COLOR,c);
	g.backgroundColor = brush;
}

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string}	scriptName	- A name for this UI
 * @return {Panel|Window}	The panel created, either a ScriptUI Panel or a ScriptUI Window.<br />
 * The resulting object has one custom method: Panel.refreshUI which takes one argument:<br />
 * a File object which must be the script to reload.<br />
 * The method returns true on success, false otherwise.<br />
 * @example
 * var ui = DuAEF.DuScriptUI.createUI(this,"Test Script");
 * var refreshButton = ui.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuAEF.DuScriptUI.showUI(ui);
 */
DuAEF.DuScriptUI.createUI = function (container, scriptName)
{
	if (!scriptName) scriptName = '';

	if (scriptName != '') DuAEF.DuScriptUI.uiStrings.push(scriptName);
	scriptName = tr(scriptName);

	var  myPal = null;
	container instanceof Panel ? myPal = container : myPal = new Window('palette',scriptName,undefined, {resizeable:true});

	if (myPal == null) throw "Failed to create User Interface.";

	myPal.margins = 0;
	myPal.spacing = 0;

	//create margins to dim buttons
	var topMargin = myPal.add('group');
	topMargin.minimumSize.height = DuAEF.DuScriptUI.defaultMargins;
	topMargin.alignment = ['fill','top'];
	topMargin.margins = 0;
	topMargin.spacing = 0;

	var mainRow = myPal.add('group');
	mainRow.alignment = DuAEF.DuScriptUI.defaultColumnAlignment;
	mainRow.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	mainRow.margins = 0;
	mainRow.spacing = 0;

	var leftMargin = mainRow.add('group');
	leftMargin.minimumSize.width = leftMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
	leftMargin.alignment = ['left','fill'];
	leftMargin.margins = 0;
	leftMargin.spacing = 0;

	myPal.contents = mainRow.add('group');
	myPal.contents.margins = 0;
	myPal.contents.spacing = DuAEF.DuScriptUI.defaultSpacing;
	myPal.contents.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	myPal.contents.orientation = "column";

	var rightMargin = mainRow.add('group');
	rightMargin.minimumSize.width = rightMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
	rightMargin.alignment = ['right','fill'];
	rightMargin.margins = 0;
	rightMargin.spacing = 0;

	var bottomMargin = myPal.add('group');
	bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = DuAEF.DuScriptUI.defaultMargins;
	bottomMargin.alignment = ['fill','bottom'];
	bottomMargin.margins = 0;
	bottomMargin.spacing = 0;

	myPal.refreshUI = function (scriptFile)
	{

		function refresh()
		{
			var ok = false;
			DuAEF.DuScriptUI.dimControls();
			// Remove everything
			for ( var i = myPal.children.length - 1; i >= 0; i-- )
			{
				myPal.remove( this.children[ i ] );
			}

			// delete DuAEF
			delete DuAEF;
			delete tr;

			// Run the scriptFile
			try
			{
				ok = true;
				$.evalFile( scriptFile );
			}
			catch ( err )
			{
				ok = false;
				//add debug info
				myPal.add('statictext',undefined,err.fileName,{multiline:true});
				myPal.add('statictext',undefined,err.message,{multiline:true});
				myPal.add('statictext',undefined,"on line" + err.line);
				//add a refresh button
				var button = myPal.add('button',undefined,"Refresh UI");
				button.onClick = function () { myPal.refreshUI(scriptFile) };
			}

			// Recalculate UI
			myPal.layout.layout( true );
			myPal.layout.resize()

			return ok;
		}

		return refresh.call(myPal);
	}

	myPal.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);
	topMargin.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);
	leftMargin.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);
	rightMargin.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);
	bottomMargin.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return myPal;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 */
DuAEF.DuScriptUI.showUI = function (ui)
{
	ui.layout.layout(true);
	ui.layout.resize();
	ui.onResizing = ui.onResize = function () {try {this.layout.resize();} catch (e) {}}

	// If it's a Window, it needs to be shown
	if (ui instanceof Window) {
		//ui.center();
		ui.show();
	}
}

/**
 * Adds a group in a container, using  DuAEF.DuScriptUI default alignments, and DuAEF.DuScriptUI.defaultSpacing. Margins are set to 0.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the group
 * @param {string}					[orientation] - The orientation to use. One of "column", "row" or "stack". By default, "column" if added in a row, "row" if added in a column.
 * @return {Group}	The group created
 */
DuAEF.DuScriptUI.addGroup = function (container,orientation)
{
	var group = container.add("group");
	group.spacing = 2;
	group.margins = 0;
	if (orientation !== undefined) group.orientation = orientation;
	if(group.orientation === "row")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultRowAlignment;
	}
	else if (group.orientation === "column")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	}
	else
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultStackAlignment;
	}

	group.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return group;
}

/**
* @class
* @name Separator
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Separator.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addSeparator} to create a Separator.<br />
* The Separator inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {StaticText|CheckBox} label - the label
* @property {boolean} checkable - Read-Only | true if a checkbox is displayed
*/

/**
 * Adds separator with an optionnal name in the group
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group} container - Where to create the separator
 * @param {string} [name] - The name displayed
 * @param {boolean} [checkable=false] - When true, adds a checkbox to the separator
 * @param {boolean} [drawLine=true] - Draws a line when there is no name. When false, the separator is an empty space
 * @return {Separator} The separator
 */
DuAEF.DuScriptUI.addSeparator = function (container,name,checkable,drawLine)
{
	if (name == undefined) name = '';
	if (checkable == undefined) checkable = false;
	if (drawLine == undefined) drawLine = true;

	if (name != '') DuAEF.DuScriptUI.uiStrings.push(name);
	name = tr(name);

	var separator = DuAEF.DuScriptUI.addGroup(container,"row");
	separator.margins = DuAEF.DuScriptUI.defaultMargins;
	separator.margins.bottom = DuAEF.DuScriptUI.defaultMargins*2;
	separator.alignment = ['fill','top'];
	separator.checkable = checkable;

	separator.label = null;
	if (name != '' || checkable)
	{
		DuAEF.DuScriptUI.uiStrings.push(name);
		name = tr(name);
		if (checkable) separator.label = separator.add('checkbox',undefined,name);
		else separator.label = separator.add('statictext',undefined,name);
		separator.label.alignment = ['center','bottom'];
		if (drawLine) DuAEF.DuScriptUI.setBackgroundColor(separator,DuAEF.DuJS.Color.Colors.DARK_GREY);
	}
	else if (drawLine)
	{
		DuAEF.DuScriptUI.setBackgroundColor(separator,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
	}

	separator.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return separator;
}

/**
 * @class
 * @name ImageButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addImageButton} to create an Image Button.<br />
 * The Image Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {Image} image - The scriptui object representing the image
 * @property {StaticText} label - The label
 * @property {ImageButton~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback ImageButton~onClick
 * @memberof ImageButton
 */

/**
 * Creates a button with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]		- The label of the button. Default: empty string
 * @param {string}					[image]		- The path to the icon. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {string}					[imageOver=image]	- The path to an icon displayed when the mouse is over the button.
 * @return {ImageButton}			The image button created.
 */
DuAEF.DuScriptUI.addImageButton = function (container,text,image,helpTip,imageOver)
{
	if (typeof text === 'undefined') text = '';
	if (!image) image = '';
	if (typeof helpTip === 'undefined') helpTip = '';
	if (!imageOver) imageOver = '';

	if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
	if (helpTip != '') DuAEF.DuScriptUI.uiStrings.push(helpTip);
	text = tr(text);
	helpTip = tr(helpTip);

	if (image == '' && text == '') text = 'o';

	var imageButton = container.add('group');
	imageButton.orientation = 'row';
	imageButton.margins = 2;
	if (image == '') imageButton.margins = 5;
	imageButton.spacing = 5;
	imageButton.group = imageButton;

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.onClick = function(){};
	imageButton.image = null;
	imageButton.label = null;

	if (image != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(image)) throw new Error("Image does not exists: " + image);
		var icon = imageButton.add('image',undefined,image);
		icon.alignment = ['center','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
		imageButton.icon = icon;
	}
	if (imageOver != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageOver)) throw new Error("Image does not exists: " + imageOver);
	}

	if (text != '')
	{
		var label = imageButton.add('statictext',undefined,text);
		label.helpTip = helpTip;
		if (image == '') label.alignment = ['center','center'];
		imageButton.label = label;
		DuAEF.DuScriptUI.setBackgroundColor(imageButton,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		imageButton.alignment = ['fill','top'];
	}

	//events
	imageButton.clicked = function (e)
	{
		DuAEF.DuScriptUI.updateHelpPopup(imageButton.help.title, imageButton.help.text, imageButton.help.link);
		if (e.shiftKey)
		{
			if (imageButton.help.text != '')
			{
				DuAEF.DuScriptUI.helpPanel.show();
			}
			return;
		}
		else
		{
			try { imageButton.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured in file at line ' + e.line + '\n\n' + e.description); }
		}
	}

	imageButton.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label)
		{
			DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(imageButton.group,DuAEF.DuJS.Color.Colors.DARK_GREY);
		}
		DuAEF.DuScriptUI.highlightedControls.push(imageButton);
	}

	imageButton.dim = function ()
	{
		if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
		if (label)
		{
			DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			DuAEF.DuScriptUI.setBackgroundColor(imageButton.group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		}
	}

	//add events
	imageButton.addEventListener('click',imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.highlight);
	}
	else
	{
		imageButton.addEventListener("mouseover",imageButton.highlight);
	}


	imageButton.help = {};
	imageButton.help.title = '';
	imageButton.help.text = '';
	imageButton.help.link = '';

	//help popup
	imageButton.setHelp = function(title,text,link)
	{
		imageButton.help.title = title;
		imageButton.help.text = text;
		imageButton.help.link = link;
	}

	return imageButton;
}

/**
 * @class
 * @name ImageCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addImageCheckBox} to create an Image Checkbox.<br />
 * The Image Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {string} standardImage - The path to the image (or a PNG as a string representation)
* @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
* @property {string} imageChecked - The path to the image (or a PNG as a string representation) to display when the button is checked
* @property {Image}	image	- The scriptui object representing the image
* @property {StaticText}	label	- The label
* @property {boolean}	checked 	- The checked state of the button
* @property {ImageCheckBox~onClick} onClick - The function to execute when the button is clicked
*/

/**
 * The function to execute when the button is clicked.
 * @callback ImageCheckBox~onClick
 * @memberof ImageButton
 */

/**
 * Creates a checkbox with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					text			- The label of the button. Default: empty string
 * @param {string}					image			- The path to the icon. Default: empty string
 * @param {string}					helpTip			- The helptip. Default: empty string
 * @param {string}					imageChecked	- The path to an icon displayed when the button is checked. Default: empty string
 * @param {string}					imageOver		- The path to an icon displayed when the mouse is over the button. Default: same as imageChecked
 * @param {string}					[textChecked]			- The label of the button displayed when it is checked.
 * @return {ImageCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addImageCheckBox = function (container,text,image,helpTip,imageChecked,imageOver,textChecked)
{
	if (!container) return null;
	if (!text) text = '';
	if (!image) image = '';
	if (!helpTip) helpTip = '';
	if (!imageChecked) imageChecked = '';
	if (!imageOver) imageOver = imageChecked;
	if (textChecked == undefined) textChecked = '';

	if (image == '' && text == '') text = '#';

	if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
	if (helpTip != '') DuAEF.DuScriptUI.uiStrings.push(helpTip);
	text = tr(text);
	helpTip = tr(helpTip);

	var group = container.add('group');
	group.orientation = 'row';
	group.margins = 2;
	if (image == '') group.margins = 5;
	group.spacing = 5;
	var imageButton = group;
	imageButton.group = group;

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.imageChecked = imageChecked;
	imageButton.onClick = function () {};
	imageButton.checked = imageButton.value = false;
	imageButton.textChecked = textChecked;
	imageButton.defaultText = text;

	imageButton.iconChecked = DuAEF.DuBinary.toFile(w14_checked_m);
	imageButton.iconCheckedOver = DuAEF.DuBinary.toFile(w14_checked_l);
	imageButton.iconUnchecked = DuAEF.DuBinary.toFile(w14_emptysquare_m);
	imageButton.iconUncheckedOver = DuAEF.DuBinary.toFile(w14_unchecked_l);

	//add checkbox
	if (text != '' && DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{
		imageButton.checkbox = group.add('image',undefined,imageButton.iconUnchecked);
		imageButton.checkbox.alignment = ['left','center'];
		imageButton.checkbox.helpTip = helpTip;
		DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		imageButton.alignment = ['fill','top'];
	}

	if (image != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(image)) throw new Error("Image does not exists: " + image);
		var icon = group.add('image',undefined,image);
		icon.alignment = ['left','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
	}

	if (imageOver != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageOver)) throw new Error("Image does not exists: " + imageOver);
	}

	if (imageChecked != '')
	{
		if (!DuAEF.DuJS.Fs.fileExists(imageChecked)) throw new Error("Image does not exists: " + imageChecked);
	}

	if (text != '')
	{
		var label = group.add('statictext',undefined,text);
		label.helpTip = helpTip;
		label.alignment = ['fill','center'];
		imageButton.label = label;

		if (text.length < textChecked.length) imageButton.label.minimumSize.width = textChecked.length*7;
		else imageButton.label.minimumSize.width = text.length*7;
	}

	/**
	* Checks or unchecks the button
	* @memberof ImageCheckBox
	* @param {boolean} c	- The checked state
	*/
	imageButton.setChecked = function (c)
	{
		imageButton.checked = imageButton.value = c;

		if (imageButton.label)
		{
			if (imageButton.checked)
			{
				if (imageButton.textChecked != '') imageButton.label.text = imageButton.textChecked;
				if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) imageButton.checkbox.image = imageButton.iconChecked;
			}
			else
			{
				imageButton.label.text = imageButton.defaultText;
				if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) imageButton.checkbox.image = imageButton.iconUnchecked;
			}
		}

		if (imageButton.image)
		{
			if (imageButton.checked)
			{
				if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
			}
			else
			{
				if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
			}
		}
	}

	imageButton.clicked = function (e)
	{
		DuAEF.DuScriptUI.updateHelpPopup(imageButton.help.title, imageButton.help.text, imageButton.help.link);
		if (e.shiftKey)
		{
			if (imageButton.help.text != '')
			{
				DuAEF.DuScriptUI.helpPanel.show();
			}
			return;
		}
		imageButton.setChecked(!imageButton.checked);
		try { imageButton.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	imageButton.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label)
		{
			DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.DARK_GREY);
			if (DuAEF.DuAE.App.hasFilesAndNetworkAccess)
			{
				if (imageButton.checked) imageButton.checkbox.image = imageButton.iconCheckedOver;
				else imageButton.checkbox.image = imageButton.iconUncheckedOver;
			}

		}
		DuAEF.DuScriptUI.highlightedControls.push(imageButton);
	}

	imageButton.dim = function (e)
	{
		if (label) DuAEF.DuScriptUI.setBackgroundColor(group,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		if (imageButton.checked)
		{
			if (icon) if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
			if (label && DuAEF.DuAE.App.hasFilesAndNetworkAccess) imageButton.checkbox.image = imageButton.iconChecked;
		}
		else
		{
			if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
			if (label && DuAEF.DuAE.App.hasFilesAndNetworkAccess) imageButton.checkbox.image = imageButton.iconUnchecked;
		}
	}

	imageButton.group.addEventListener("mousedown",imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.highlight);
	}
	else
	{
		imageButton.group.addEventListener("mouseover",imageButton.highlight);
	}

	imageButton.help = {};
	imageButton.help.title = '';
	imageButton.help.text = '';
	imageButton.help.link = '';

	//help popup
	imageButton.setHelp = function(title,text,link)
	{
		imageButton.help.title = title;
		imageButton.help.text = text;
		imageButton.help.link = link;
	}

	return imageButton;
}

/**
 * @class
 * @name NiceCheckBox
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Nice Checkbox.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addNiceCheckBox} to create an Nice Checkbox.<br />
 * The Nice Checkbox inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {StaticText} label - The statictext used as a label
* @property {CheckBox} checkbox - The box
* @property {float[]} color - The color [R,G,B,A]
* @property {NiceCheckbox~onClick} onClick - Function to execute when clicked
*/

/**
 * The function to execute when the button is clicked.
 * @callback NiceCheckbox~onClick
 * @memberof NiceCheckbox
 */

/**
 * Creates a checkbox which can be colored, and changes color on hover
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]			- The label of the button.
 * @param {string}					[helpTip]			- The helptip.
 * @param {color}					[color=DuAEF.DuJS.Color.Colors.LIGHT_GREY]			- The color of the text
 * @return {NiceCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addNiceCheckBox = function (container,text,helpTip,color)
{
	if (color == undefined) color = DuAEF.DuJS.Color.Colors.LIGHT_GREY;
	if (helpTip == undefined) helpTip = '';
	if (text == undefined) text = '';

	if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
	if (helpTip != '') DuAEF.DuScriptUI.uiStrings.push(helpTip);
	text = tr(text);
	helpTip = tr(helpTip);

	var niceCheckBox = container.add('group');
	niceCheckBox.orientation = 'row';
	niceCheckBox.alignChildren = ['left','center'];
	niceCheckBox.spacing = DuAEF.DuScriptUI.defaultSpacing;
	niceCheckBox.margins = 0;
	niceCheckBox.checkBox = niceCheckBox.add('checkbox',undefined,'');
	niceCheckBox.label = niceCheckBox.add('statictext',undefined,text);
	niceCheckBox.onClick = function () {};
	niceCheckBox.checked = niceCheckBox.value = false;
	niceCheckBox.color = color;

	niceCheckBox.checkBox.helpTip = helpTip;
	niceCheckBox.label.helpTip = helpTip;

	DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,niceCheckBox.color);

	/**
	* Checks or unchecks the button
	* @memberof NiceCheckBox
	* @param {boolean} c	- The checked state
	*/
	niceCheckBox.setChecked = function (c)
	{
		niceCheckBox.checked = niceCheckBox.value = c;
		niceCheckBox.checkBox.value = c;
	}

	niceCheckBox.labelClicked = function (e)
	{
		niceCheckBox.setChecked(!niceCheckBox.checked);
		try { niceCheckBox.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	niceCheckBox.checkBoxClicked = function (e)
	{
		niceCheckBox.checked = niceCheckBox.value = niceCheckBox.checkBox.value;
		try { niceCheckBox.onClick(); } catch (e) { if (DuAEF.debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	niceCheckBox.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
		DuAEF.DuScriptUI.highlightedControls.push(niceCheckBox);
	}

	niceCheckBox.dim = function (e)
	{
		DuAEF.DuScriptUI.setTextColor(niceCheckBox.label,niceCheckBox.color);
	}

	niceCheckBox.label.addEventListener("mousedown",niceCheckBox.labelClicked,false);
	niceCheckBox.checkBox.onClick = niceCheckBox.checkBoxClicked;
	niceCheckBox.addEventListener("mouseover",niceCheckBox.highlight);

	return niceCheckBox;
}

/**
* @class
* @name Form
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Form.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addForm} to create a Form.<br />
* The Form inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {Group} labels - The left vertical group
* @property {Group} buttons - The right vertical group
*/

/**
 * Creates a layout to add forms to a UI, using ScriptUI groups.<br />
 * You can easily add controls/fields to this form using DuAEF.DuScriptUI.addFormField
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the form.
 * @return {Form}		The custom Group containing the form.
 */
DuAEF.DuScriptUI.addForm = function (container)
{
	var mainGroup = container.add('group');
	mainGroup.orientation = 'row';
	mainGroup.margins = 0;
	mainGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var labelsGroup = mainGroup.add('group');
	labelsGroup.alignment = ['left','top'];
	labelsGroup.orientation = 'column';
	labelsGroup.alignChildren = ['left','bottom'];
	labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var buttonsGroup = mainGroup.add('group');
	buttonsGroup.alignment = ['fill','top'];
	buttonsGroup.orientation = 'column';
	buttonsGroup.alignChildren = ['fill','fill'];
	buttonsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	mainGroup.labels = labelsGroup;
	mainGroup.buttons = buttonsGroup;

	mainGroup.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return mainGroup;
}

/**
 * Adds a field to a form
 * example: Duik.ui.addFormField(form,'Composition:','dropdownlist',['Composition1','Composition2'],'Select a composition')
 * @memberof Duik.ui
 * @param {Form}			form		- A custom ScriptUI group as returned by DuAEF.DuScriptUI.addForm
 * @param {string}			label		- The label text.
 * @param {string}			type		- The type of ScriptUI object to add (like 'button','edittext', etc.).
 * @param {object}			[value]		- The default value or content of the field added, depends on the type.
 * @param {string}			[helpTip]		- The helpTip of the form control.
 * @return {ScriptUI[]}		An array with at 0 the StaticText label, and at 1 the ScriptUI object of the type type, added to the form
 */
DuAEF.DuScriptUI.addFormField = function (form,label,type,value,helpTip)
{
	if (helpTip == undefined) helpTip = '';

	if (label != '') DuAEF.DuScriptUI.uiStrings.push(label);
	if (helpTip != '') DuAEF.DuScriptUI.uiStrings.push(helpTip);
	label = tr(label);
	helpTip = tr(helpTip);

	var control = null;
	var height = 20;
	if (type == "ImageButton")
	{
		control = DuAEF.DuScriptUI.addImageButton(form.buttons,'',value[0],helpTip,value[1]);
		height = control.image.preferredSize[1];
	}
	else
	{
		control = form.buttons.add(type,undefined,value);
		control.helpTip = helpTip;
		height = control.preferredSize[1];
	}

	var l = form.labels.add('statictext',undefined,label);
	l.helpTip = helpTip;

	l.minimumSize.height = l.maximumSize.height = height;
	return [l,control];
}

/**
* @class
* @name NiceEditText
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Nice EditText.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addNiceEditText} to create a Nice EditText.<br />
* The Nice EditText inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {string} text - Read-Only | The text displayed
* @property {NiceEditText~onActivate} onActivate - Function to execute when activated
* @property {NiceEditText~onDeactivate} onDeactivate - Function to execute when deactivated
* @property {NiceEditText~onChange} onChange - Function to execute when text changed
*/

/**
 * The function to execute when the text is changed.
 * @callback NiceEditText~onChange
 * @memberof NiceEditText
 */

/**
 * The function to execute when the box is activated.
 * @callback NiceEditText~onActivate
 * @memberof NiceEditText
 */

/**
 * The function to execute when the box is deactivated.
 * @callback NiceEditText~onDeactivate
 * @memberof NiceEditText
 */

/**
 * Changes the text
 * @method
 * @memberof NiceEditText
 * @name setText
 * @param {string} text - The new text
 */

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {string}	text		- The initial text in the edit.
 * @param {string}	[prefix]		- A text prefix to display.
 * @param {string}	[suffix]		- A text suffix to display.
 * @param {string}	[placeHolder]	- A place holder default text.
 * @return {NiceEditText}	The custom Group containing the edit text.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addNiceEditText = function(container,text,prefix,suffix,placeHolder)
{
	if (prefix == undefined) prefix = '';
	if (suffix == undefined) suffix = '';
	if (placeHolder == undefined) placeHolder = '';

	if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
	if (prefix != '') DuAEF.DuScriptUI.uiStrings.push(prefix);
	if (suffix != '') DuAEF.DuScriptUI.uiStrings.push(suffix);
	if (placeHolder != '') DuAEF.DuScriptUI.uiStrings.push(placeHolder);
	text = tr(text);
	prefix = tr(prefix);
	suffix = tr(suffix);
	placeHolder = tr(placeHolder);

	var niceEditText = container.add('group');
	niceEditText.orientation = 'stack';
	niceEditText.margins = 0;
	niceEditText.alignChildren = ['fill','fill'];
	niceEditText.placeHolder = placeHolder;
	var staticText = text;
	if (text == "" && placeHolder != "") staticText = placeHolder;
	niceEditText.static = niceEditText.add('statictext',undefined,prefix + staticText + suffix);
	niceEditText.static.alignment = ['fill','center'];
	if (text == "" && placeHolder != "") DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
	else DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
	niceEditText.edit = niceEditText.add('edittext',undefined,text);
	niceEditText.edit.visible = false;
	niceEditText.prefix = prefix;
	niceEditText.suffix = suffix;

	niceEditText.text = text;
	niceEditText.editing = false;

	niceEditText.onActivate = function(){};
	niceEditText.onDeactivate = function(){};
	niceEditText.onChange = function(){};
	niceEditText.onChanging = function(){};

	niceEditText.clicked = function()
	{
		if (niceEditText.editing) return;
		else
		{
			niceEditText.static.visible = false;
			niceEditText.edit.visible = true;
			niceEditText.editing = true;
			niceEditText.edit.active = true;
		}
	}

	niceEditText.changed = function()
	{
		niceEditText.editing = false;
		var staticText = '';
		if (niceEditText.edit.text == '' && niceEditText.placeHolder != '')
		{
			DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			staticText = niceEditText.placeHolder;
		}
		else
		{
			if (niceEditText.placeHolder != '') DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
			staticText = niceEditText.edit.text;
		}
		niceEditText.static.text = niceEditText.prefix + staticText + niceEditText.suffix;
		niceEditText.text = niceEditText.edit.text ;
		niceEditText.edit.visible = false;
		niceEditText.static.visible = true;
		niceEditText.edit.active = false;
		niceEditText.onChange();
	}
	niceEditText.changing = function()
	{
		niceEditText.text = niceEditText.edit.text ;
		niceEditText.onChanging();
	}

	niceEditText.setText = function (text)
	{
		niceEditText.edit.text = niceEditText.text = text;
		niceEditText.static.text = niceEditText.prefix + text + niceEditText.suffix;
	}


	niceEditText.edit.onActivate = function()
	{
		niceEditText.onActivate();
	}
	niceEditText.edit.onDeactivate = function ()
	{
		niceEditText.changed();
		niceEditText.onDeactivate();
	}
	niceEditText.edit.onChange = niceEditText.changed;
	niceEditText.edit.onChanging = niceEditText.changing;
	niceEditText.addEventListener("mousedown",niceEditText.clicked,true);

	niceEditText.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return niceEditText;
}

/**
* @class
* @name NiceSlider
* @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
* A Nice Slider.<br />
* This is not a real class, and cannot be instanciated.<br />
* Use {@link DuAEF.DuScriptUI.addNiceSlider} to create a Nice Slider.<br />
* The Nice Slider inherits the Group object from ScriptUI and has all of its properties and methods.
* @property {int} value - Read-Only | The current value
* @property {NiceSlider~onChanging} onChanging - Function to execute when changing
* @property {NiceSlider~onChange} onChange - Function to execute when changed
*/

/**
 * Function to execute when changing
 * @callback NiceSlider~onChanging
 * @memberof NiceSlider
 */

/**
 * Function to execute when changed
 * @callback NiceSlider~onChange
 * @memberof NiceSlider
 */

/**
 * Changes the value
 * @method
 * @memberof NiceSlider
 * @name setValue
 * @param {int} value - The new value
 */

/**
 * Creates a nice edittext where the edit text is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the nice edit text.
 * @param {int}	[defaultValue=0]		- The initial value.
 * @param {int}	[min=0]		- The minimal value.
 * @param {int}	[max=100]		- The maximal value.
 * @param {string}	[orientation='column']		- Either 'row' or 'column'
 * @param {boolean}	[invertedAppearance]		- Revert the slider with max value on the left
 * @param {string}	[prefix]		- A text prefix to display.
 * @param {string}	[suffix]		- A text suffix to display.
 * @return {NiceSlider}	The custom Group containing the slider.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addNiceSlider = function(container,defaultValue,min,max,orientation,invertedAppearance,prefix,suffix)
{
	if (prefix == undefined) prefix = '';
	if (suffix == undefined) suffix = '';
	if (min == undefined) min = 0;
	if (max == undefined) max = 100;
	if (defaultValue == undefined) defaultValue = 0;
	if (orientation != 'row') orientation = 'column';

	if (prefix != '') DuAEF.DuScriptUI.uiStrings.push(prefix);
	if (suffix != '') DuAEF.DuScriptUI.uiStrings.push(suffix);
	prefix = tr(prefix);
	suffix = tr(suffix);

	var niceSlider = container.add('group');
	niceSlider.orientation = orientation;
	niceSlider.spacing = DuAEF.DuScriptUI.defaultSpacing;
	niceSlider.alignment = ['fill','top'];
	niceSlider.alignChildren = ['fill','center'];

	niceSlider.value = defaultValue;
	niceSlider.invertedAppearance = invertedAppearance;

	var sliderValue = defaultValue;
	if (niceSlider.invertedAppearance) sliderValue = max-defaultValue+min;

	niceSlider.slider = niceSlider.add('slider',undefined,sliderValue,min,max);
	niceSlider.edit = DuAEF.DuScriptUI.addNiceEditText(niceSlider,defaultValue.toString(),prefix,suffix);
	niceSlider.edit.minimumSize.width = max.toString().length*7+7;
	if (orientation == 'row')
	{
		niceSlider.edit.alignment = ['right','center'];
	}
	else
	{
		niceSlider.edit.alignment = ['center','center'];
	}
	niceSlider.onChanging = function () {};
	niceSlider.onChange = function () {};

	niceSlider.setValue = function (val)
	{
		niceSlider.value = val;
		niceSlider.edit.setText(niceSlider.value);
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue - val + niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
	}

	//events
	niceSlider.slider.onChanging = function ()
	{
		if (niceSlider.invertedAppearance) niceSlider.value = Math.round(niceSlider.slider.maxvalue - niceSlider.slider.value + niceSlider.slider.minvalue);
		else niceSlider.value = Math.round(niceSlider.slider.value);
		niceSlider.edit.setText(niceSlider.value);
		niceSlider.onChanging();
	}
	niceSlider.slider.onChange = function ()
	{
		niceSlider.onChange();
	}
	niceSlider.edit.onChanging = function ()
	{
		var val = parseInt(niceSlider.edit.text);
		if (isNaN(val)) return;
		niceSlider.value = val;
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue-val+niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
		niceSlider.onChanging();
	}
	niceSlider.edit.onChange = function ()
	{
		var val = parseInt(niceSlider.edit.text);
		if (isNaN(val)) return;
		if (val < niceSlider.slider.minvalue) val = niceSlider.slider.minvalue;
		if (val > niceSlider.slider.maxvalue) val = niceSlider.slider.maxvalue;
		niceSlider.value = val;
		if (niceSlider.invertedAppearance) niceSlider.slider.value = niceSlider.slider.maxvalue-val+niceSlider.slider.minvalue;
		else niceSlider.slider.value = val;
		niceSlider.onChange();
	}

	niceSlider.addEventListener("mouseover",DuAEF.DuScriptUI.dimControls);

	return niceSlider;
}

/**
 * @class
 * @name Selector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} image - The path to the current image (or a PNG as a string representation)
 * @property {Image} icon - The Image currently displayed
 * @property {StaticText} label - The current text
 * @property {ImageButtons[]} items  - The buttons
 * @property {int} index  - The current index
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback Selector~onChange
 * @memberof Selector
 */

/**
 * Adds a new button to the selector
 * @method
 * @memberof Selector
 * @name addButton
 * @param {string} text - The text displayed by the button
 * @param {string} image - The icon, either a path to the file or a PNG represented as a string.
 * @param {string} helpTip - The help tip
 * @param {string} imageOver - The roll over icon, either a path to the file or a PNG represented as a string.
 */

/**
* Removes all buttons from the selector
* @method
* @memberof Selector
* @name removeAll
*/

/**
 * Changes the selection and the current index of the selector
 * @method
 * @memberof Selector
 * @name setCurrentIndex
 * @param {int} index - The new index
 */

/**
 * Creates a drop down selector, using image buttons
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addSelector = function(container)
{
	//create main group
	var selector = container.add('group');
	selector.orientation = 'row';
	selector.margins = 2;
	selector.spacing = 5;
	selector.alignment = ['fill','top'];
	selector.alignChildren = ['center','center'];
	DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	selector.addButton = function (text,image,helpTip,imageOver)
	{
		if (!text) text = '-';
		if (!image) image = '';
		if (!helpTip) helpTip = '';
		if (!imageOver) imageOver = '';

		if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
		if (helpTip != '') DuAEF.DuScriptUI.uiStrings.push(helpTip);
		text = tr(text);
		helpTip = tr(helpTip);

		var size = text.length*7;
		if (selector.label.minimumSize.width < size) selector.label.minimumSize.width = size;

		var index = selector.items.length;
		selector.items.push([text,image,helpTip,imageOver]);
		//add to popup
		var button = DuAEF.DuScriptUI.addImageButton(selector.popup.buttons,text,image,helpTip,imageOver);
		button.onClick = function () { selector.setCurrentIndex(index); selector.popup.hide(); };
		if (button.icon) button.icon.alignment = ['left','center'];
	}

	selector.removeAll = function ()
	{
		selector.items = [];
		selector.setCurrentIndex(0);
		for ( var i = selector.popup.buttons.children.length - 1; i >= 0; i-- )
		{
			selector.popup.buttons.remove( selector.popup.buttons.children[ i ] );
		}
	}

	selector.setCurrentIndex = function (index)
	{
		if (index < 0) return;
		if (index >= selector.items.length) return;

		var item = selector.items[index];

		selector.image = item[1];
		if (selector.image != '')
		{
			selector.icon.image = selector.image;
			selector.icon.helpTip = item[2];
		}
		selector.label.helpTip = item[2];
		selector.label.text = item[0];
		selector.imageOver = item[3];

		selector.index = index;

		selector.onChange();
	}

	//the menu button
	selector.menuImage = DuAEF.DuBinary.toFile(w14_menu_m);
	selector.menuImageOver = DuAEF.DuBinary.toFile(w14_menu_l);
	if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.menuButton = selector.add('image',undefined,selector.menuImage);
	else selector.menuButton = selector.add('statictext',undefined,'M');
	selector.menuButton.alignment = ['left','center'];

	//the image
	selector.image = '';
	selector.icon = selector.add('image');
	selector.icon.alignment = ['left','center'];

	//the text
	selector.label = selector.add('statictext',undefined,'');
	selector.label.helpTip = '';
	selector.label.alignment = ['fill','center'];

	//the image over
	selector.imageOver = '';

	//create popup
	selector.popup = new Window('palette','',undefined,{borderless:true});
	selector.popup.margins = 2;
	selector.popup.spacing = 0;
	//DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
	selector.popup.closeButton = DuAEF.DuScriptUI.addImageButton(selector.popup,"Cancel");
	selector.popup.closeButton.onClick = function () { selector.popup.hide(); };
	selector.popup.buttons = selector.popup.add('group');
	selector.popup.buttons.orientation = 'column';
	selector.popup.buttons.margins = 0;
	selector.popup.buttons.spacing = 0;
	//Deactivate bugs on CS6, needs a try/catch
	selector.popup.onDeactivate = function () { try { selector.popup.hide(); } catch (e) {} };

	//add default button
	selector.items = [];
	selector.index = -1;


	selector.clicked = function (e)
	{
		var popup = false;

		if (e.target === selector.menuButton) popup = true;
		if (e.altKey) popup = true;

		if (popup)
		{
			if (DuAEF.DuAE.App.version < 11 || DuAEF.DuAE.App.version >= 12)
			{
				var x = e.screenX-e.clientX;
				var y = e.screenY-e.clientY;
				selector.popup.location = [x,y];
			}
			selector.popup.show();
		}
		else
		{
			var index = selector.index;
			if (index == selector.items.length -1) index = 0;
			else index++;
			selector.setCurrentIndex(index);
		}
	}

	//mouse over
	selector.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		selector.menuButton.image = selector.menuImageOver;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.DARK_GREY);
		if (selector.imageOver != '') selector.icon.image = selector.imageOver;
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.dim = function (e)
	{
		selector.menuButton.image = selector.menuImage;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
		if (selector.image != '') selector.icon.image = selector.image;
	}

	// Hack - CS6 Bugs on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		selector.label.addEventListener("mouseover",selector.highlight);
	}
	else
	{
		selector.addEventListener("mouseover",selector.highlight);
	}
	selector.addEventListener("click",selector.clicked,true);

	selector.onChange = function(){};

	return selector;
}

/**
 * @class
 * @name LayerSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addLayerSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [index=0]  - The current layer index, 0 if None
 * @property {CompItem|null} [comp=null] - The composition linked to the selector.<br />
 * If set to null, the seletor will use the current active composition.
 * @property {boolean} [selectedOnly=false] - True to list only selected layers in the composition
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback LayerSelector~onChange
 * @memberof LayerSelector
 */

/**
 * Changes the selection and the current layer index of the selector
 * @method
 * @memberof LayerSelector
 * @name setCurrentIndex
 * @param {int} index - The new layer index
 */

/**
* Force the refresh of the layer list
* @method
* @memberof LayerSelector
* @name refresh
*/

/**
 * Creates a drop down selector for layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addLayerSelector = function(container)
{
	//create main group
	var selector = container.add('group');
	selector.orientation = 'row';
	selector.margins = 2;
	selector.spacing = 5;
	selector.alignment = ['fill','top'];
	selector.mainGroup =  selector.add('group');
	selector.mainGroup.orientation = 'row';
	selector.mainGroup.margins = 0;
	selector.mainGroup.spacing = 5;
	selector.mainGroup.alignment = ['fill','fill'];
	selector.mainGroup.alignChildren = ['center','center'];
	DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	//init
	selector.index = 0;
	selector.comp = null;
	selector.selectedOnly = false;
	selector.pauseRefresh = false;

	var cs6 = DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12;

	//CS6
	if (cs6)
	{
		//the menu button
		selector.menuImage = DuAEF.DuBinary.toFile(w14_layers_m);
		selector.menuButton = selector.mainGroup.add('image',undefined,selector.menuImage);
		selector.menuButton.alignment = ['left','center'];

		//the dropdownlist
		selector.popup = {};
		selector.popup.list = selector.mainGroup.add('dropdownlist');
		selector.popup.list.alignment = ['fill','center'];

		//the refresh button
		selector.refreshImage = DuAEF.DuBinary.toFile(w14_update_m);
		selector.refreshImageOver = DuAEF.DuBinary.toFile(w14_update_l);
		selector.refreshButton = selector.add('image',undefined,selector.refreshImage);
		selector.refreshButton.alignment = ['right','center'];
	}
	else
	{
		//the menu button
		selector.menuImage = DuAEF.DuBinary.toFile(w14_layers_m);
		selector.menuImageOver = DuAEF.DuBinary.toFile(w14_layers_l);
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.menuButton = selector.mainGroup.add('image',undefined,selector.menuImage);
		else selector.menuButton = selector.mainGroup.add('statictext',undefined,'L');
		selector.menuButton.alignment = ['left','center'];

		//the text
		selector.label = selector.mainGroup.add('statictext',undefined,'None');
		selector.label.helpTip = '';
		selector.label.alignment = ['fill','center'];

		//create popup
		selector.popup = new Window('palette','',undefined,{borderless:true});
		selector.popup.margins = 2;
		selector.popup.spacing = 0;
		DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
		selector.popup.closeButton = DuAEF.DuScriptUI.addImageButton(selector.popup,"Cancel");
		selector.popup.closeButton.onClick = function () { selector.popup.hide(); };
		selector.popup.onDeactivate = function () { selector.popup.hide(); };
		selector.popup.list = selector.popup.add('listbox',undefined);

		selector.clicked = function (e)
		{
			selector.refresh();

			selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
			selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

			selector.popup.layout.layout();
			selector.popup.layout.resize();

			var x = e.screenX-e.clientX;
			var y = e.screenY-e.clientY;
			selector.popup.location = [x,y];

			selector.popup.show();
		}

		selector.mainGroup.addEventListener("click",selector.clicked,true);
	}

	//the pick button
	selector.pickImage = DuAEF.DuBinary.toFile(w14_eyedropper_m);
	selector.pickImageOver = DuAEF.DuBinary.toFile(w14_eyedropper_l);
	if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.pickButton = selector.add('image',undefined,selector.pickImage);
	else selector.pickButton = selector.add('statictext',undefined,'P');
	selector.pickButton.alignment = ['right','center'];

	selector.popup.list.add('item',"None");
	selector.popup.list.selection = 0;

	selector.refresh = function()
	{
		var comp = selector.comp;
		if (!comp) comp = DuAEF.DuAE.Project.getActiveComp();
		if (!comp) return;

		selector.pauseRefresh = true;

		var layers;
		if (selector.selectedOnly) layers = comp.selectedLayers;
		else layers = comp.layers;

		var prevIndex = selector.index;
		selector.popup.list.removeAll();
		selector.popup.list.add('item',"None");
		var it = new Iterator(layers);
		it.do(function(layer)
		{
			selector.popup.list.add('item',layer.index + ' | ' + layer.name);
		});
		selector.setCurrentIndex(prevIndex);

		selector.pauseRefresh = false;
	};

	selector.setCurrentIndex = function (index)
	{
		if (index < 0) return;

		selector.pauseRefresh = true;

		if (index == 0)
		{
			selector.popup.list.selection = 0;
		}
		else
		{
			for(var i = 0,num = selector.popup.list.items.length ; i < num ; i++)
			{
				var t = selector.popup.list.items[i].text;
				if (index == parseInt(t.split(' | ')[0]))
				{
					selector.popup.list.selection = i;
					break;
				}
			}
		}

		if (!cs6)
		{
			if ( selector.popup.list.selection) selector.label.text = selector.popup.list.selection.text;
			else
			{
				selector.popup.list.selection = 0;
				selector.label.text = "None";
			}
		}

		selector.index = index;

		selector.pauseRefresh = false;

		selector.onChange();
	};

	selector.popup.list.onChange = function()
	{
		if (selector.pauseRefresh) return;
		selector.setCurrentIndex(selector.popup.list.selection.index);
		if (!cs6) selector.popup.hide();
	};

	//mouse over
	selector.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		selector.menuButton.image = selector.menuImageOver;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.DARK_GREY);
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.pickHighlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		selector.pickButton.image = selector.pickImageOver;
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.dim = function (e)
	{
		selector.menuButton.image = selector.menuImage;
		selector.pickButton.image = selector.pickImage;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
	}

	selector.pick = function ()
	{
		var layers = DuAEF.DuAE.Comp.getSelectedLayers();
		if (layers.length > 0) selector.setCurrentIndex(layers[0].index);
	}

	selector.getLayer = function ()
	{
		if (selector.index < 1) return null;
		var comp = selector.comp;
		if (!comp) comp = DuAEF.DuAE.Project.getActiveComp();
		if (!comp) return null;
		try { return comp.layer(selector.index)} catch(e){return null};
	}

	// Hack - CS6 Bugs on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		selector.refreshButton.addEventListener("mousedown",selector.refresh,false);
	}
	else
	{
		selector.mainGroup.addEventListener("mouseover",selector.highlight);
		selector.pickButton.addEventListener("mouseover",selector.pickHighlight);
	}

	selector.pickButton.addEventListener("click",selector.pick);

	selector.onChange = function(){};

	selector.refresh();

	return selector;
}

/**
* The panel where the help is displayed
*/
DuAEF.DuScriptUI.helpPanel = new Window('palette',"Help panel",undefined,{resizeable:true});

//Initializes the help panel
(function(){
	DuAEF.DuScriptUI.helpPanel.maximumSize.height = 500;
	DuAEF.DuScriptUI.helpPanel.margins = 2;
	DuAEF.DuScriptUI.helpPanel.spacing = 0;
	//DuAEF.DuScriptUI.setBackgroundColor(popup,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	//add title
	DuAEF.DuScriptUI.helpPanel.title = DuAEF.DuScriptUI.helpPanel.add('statictext',undefined,'');
	DuAEF.DuScriptUI.helpPanel.title.alignment = ['fill','top'];

	//add spacer
	DuAEF.DuScriptUI.addSeparator(DuAEF.DuScriptUI.helpPanel);

	//add text
	DuAEF.DuScriptUI.helpPanel.help = DuAEF.DuScriptUI.helpPanel.add('edittext',undefined,'',{multiline:true});
	DuAEF.DuScriptUI.helpPanel.help.alignment = ['fill','fill'];

	//add buttons
	var buttonsGroup = DuAEF.DuScriptUI.addGroup(DuAEF.DuScriptUI.helpPanel,'row');
	buttonsGroup.alignment = ['fill','bottom'];
	DuAEF.DuScriptUI.helpPanel.closeButton = DuAEF.DuScriptUI.addImageButton(buttonsGroup,"Close",DuAEF.DuBinary.toFile(w14_cancel_m),"Close this window",DuAEF.DuBinary.toFile(w14_cancel_l));
	DuAEF.DuScriptUI.helpPanel.closeButton.onClick = function () { DuAEF.DuScriptUI.helpPanel.hide(); };
	DuAEF.DuScriptUI.helpPanel.helpButton = DuAEF.DuScriptUI.addImageButton(buttonsGroup,"More...",DuAEF.DuBinary.toFile(w14_url_m),"Read more details online",DuAEF.DuBinary.toFile(w14_url_l));
	DuAEF.DuScriptUI.helpPanel.helpButton.onClick = function()
	{
		if(DuAEF.mac) system.callSystem('open ' + DuAEF.DuScriptUI.helpPanel.link);
		else system.callSystem('explorer ' + DuAEF.DuScriptUI.helpPanel.link);
	}

	DuAEF.DuScriptUI.helpPanel.onResizing = DuAEF.DuScriptUI.helpPanel.onResize = function () {DuAEF.DuScriptUI.helpPanel.layout.resize();};
})();

/**
* Updates the helpPopup with new information
* @memberof DuAEF.DuScriptUI
* @param {string} title - A title.
* @param {string} text - The help text.
* @param {string} link - The http link to a webpage
*/
DuAEF.DuScriptUI.updateHelpPopup = function (title,text,link)
{
	if (typeof link === 'undefined') link = '';

	if (text == '') return;

	if (text != '') DuAEF.DuScriptUI.uiStrings.push(text);
	if (title != '') DuAEF.DuScriptUI.uiStrings.push(title);
	text = tr(text);
	title = tr(title);

	DuAEF.DuScriptUI.helpPanel.title.text = title;
	DuAEF.DuScriptUI.helpPanel.help.text = text;
	DuAEF.DuScriptUI.helpPanel.link = link;
	if (link != '') DuAEF.DuScriptUI.helpPanel.helpButton.show();
	else DuAEF.DuScriptUI.helpPanel.helpButton.hide();

	DuAEF.DuScriptUI.helpPanel.layout.layout(true);
	DuAEF.DuScriptUI.helpPanel.layout.resize();
}

/**
 * @class
 * @name CompSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addCompSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [id=0]  - The current compitem id, 0 if None
 * @property {CompItem[]} [comps] - The compositions listed in the selector.
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 * @property {Selector~filterComps} filterComps - A function which gets the comps to set in the selector.<br />
 * The default function will get all the comps in the project,<br />
 * You can set your own function here, which must take no argument.<br />
 * The function must return an array of CompItem.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback CompSelector~onChange
 * @memberof CompSelector
 */


/**
  * A function which gets the comps to set in the selector.<br />
  * The default function will get all the comps in the project,<br />
  * assign another function to this callback if you need to filter these comps.<br />
  * The function must return an array of CompItem.
  * @callback CompSelector~filterComps
  * @memberof CompSelector
  * @return {CompItem[]} The compositions to set in the selector.
  */

/**
 * Changes the selection and the current comp id of the selector
 * @method
 * @memberof CompSelector
 * @name setCurrentId
 * @param {int} index - The new comp id
 */

/**
* Sets the comp list
* @method
* @memberof CompSelector
* @name setComps
* @param {CompItem[]} [comps] - The list of compositions. By default, will use {@link CompSelector.filterComps()} to get the comps.
*/

/**
* Gets the selected comp
* @method
* @memberof CompSelector
* @name getComp
* @return {CompItem|null} the selected comp
*/

/**
 * Creates a drop down selector for compositions
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {CompSelector} - The selector
 */
DuAEF.DuScriptUI.addCompSelector = function(container)
{
	//create main group
	var selector = container.add('group');
	selector.orientation = 'row';
	selector.margins = 2;
	selector.spacing = 5;
	selector.alignment = ['fill','top'];
	selector.mainGroup =  selector.add('group');
	selector.mainGroup.orientation = 'row';
	selector.mainGroup.margins = 0;
	selector.mainGroup.spacing = 5;
	selector.mainGroup.alignment = ['fill','fill'];
	selector.mainGroup.alignChildren = ['center','center'];
	DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);

	//init
	selector.id = 0;
	selector.comp = null;
	selector.selectedOnly = false;
	selector.pauseRefresh = false;

	var cs6 = DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12;

	//CS6
	if (cs6)
	{
		//the menu button
		selector.menuImage = DuAEF.DuBinary.toFile(w14_comp_m);
		selector.menuButton = selector.mainGroup.add('image',undefined,selector.menuImage);
		selector.menuButton.alignment = ['left','center'];

		//the dropdownlist
		selector.popup = {};
		selector.popup.list = selector.mainGroup.add('dropdownlist');
		selector.popup.list.alignment = ['fill','center'];
	}
	else
	{
		//the menu button
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess)
		{
			selector.menuImage = DuAEF.DuBinary.toFile(w14_comp_m);
			selector.menuImageOver = DuAEF.DuBinary.toFile(w14_comp_l);
			selector.menuButton = selector.mainGroup.add('image',undefined,selector.menuImage);
			selector.menuButton.alignment = ['left','center'];
		}


		//the text
		selector.label = selector.mainGroup.add('statictext',undefined,'None');
		selector.label.helpTip = '';
		selector.label.alignment = ['fill','center'];

		//create popup
		selector.popup = new Window('palette','',undefined,{borderless:true});
		selector.popup.margins = 2;
		selector.popup.spacing = 0;
		DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
		selector.popup.closeButton = DuAEF.DuScriptUI.addImageButton(selector.popup,"Cancel");
		selector.popup.closeButton.onClick = function () { selector.popup.hide(); };
		selector.popup.onDeactivate = function () { selector.popup.hide(); };
		selector.popup.list = selector.popup.add('listbox',undefined);

		selector.clicked = function (e)
		{
			selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
			selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

			selector.popup.layout.layout();
			selector.popup.layout.resize();

			var x = e.screenX-e.clientX;
			var y = e.screenY-e.clientY;
			selector.popup.location = [x,y];

			selector.popup.show();
		}
	}

	//the pick & refresh buttons
	selector.pickImage = DuAEF.DuBinary.toFile(w14_eyedropper_m);
	selector.pickImageOver = DuAEF.DuBinary.toFile(w14_eyedropper_l);
	if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.pickButton = selector.add('image',undefined,selector.pickImage);
	else selector.pickButton = selector.add('statictext',undefined,'P');
	selector.pickButton.alignment = ['right','center'];

	//the refresh button
	selector.refreshImage = DuAEF.DuBinary.toFile(w14_update_m);
	selector.refreshImageOver = DuAEF.DuBinary.toFile(w14_update_l);
	if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.refreshButton = selector.add('image',undefined,selector.refreshImage);
	else selector.refreshButton = selector.add('statictext',undefined,'R');
	selector.refreshButton.alignment = ['right','center'];

	var itemNone = selector.popup.list.add('item',"None");
	itemNone.id = 0;
	selector.popup.list.selection = 0;

	selector.setComps = function()
	{
		var comps = selector.filterComps();
		selector.pauseRefresh = true;

		var prevId = selector.id;
		selector.popup.list.removeAll();
		var itemNone = selector.popup.list.add('item',"None");
		itemNone.id = 0;
		var it = new Iterator(comps);
		it.do(function(comp)
		{
			var item = selector.popup.list.add('item', comp.name);
			item.id = comp.id;
		});
		selector.setCurrentId(prevId);

		selector.pauseRefresh = false;
	};

	selector.getComp = function ()
	{
		if (selector.id == 0) return null;
		return DuAEF.DuAE.Project.getItemById(selector.id);
	}

	selector.setCurrentId = function (id)
	{
		if (id < 0) id = 0;

		selector.pauseRefresh = true;

		if (id == 0)
		{
			selector.popup.list.selection = 0;
		}
		else
		{
			for(var i = 0,num = selector.popup.list.items.length ; i < num ; i++)
			{
				var item = selector.popup.list.items[i];
				if (id == item.id)
				{
					selector.popup.list.selection = i;
					break;
				}
			}
		}

		if (!cs6)
		{
			if ( selector.popup.list.selection) selector.label.text = selector.popup.list.selection.text;
			else
			{
				selector.popup.list.selection = 0;
				selector.label.text = "None";
			}
		}

		selector.id = id;

		selector.pauseRefresh = false;

		selector.onChange();
	};

	selector.popup.list.onChange = function()
	{
		if (selector.pauseRefresh) return;
		selector.setCurrentId(selector.popup.list.selection.id);
		if (!cs6) selector.popup.hide();
	};

	selector.onChange = function(){};

	//mouse over
	selector.highlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.menuButton.image = selector.menuImageOver;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.DARK_GREY);
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.refreshHighlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.refreshButton.image = selector.refreshImageOver;
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.pickHighlight = function (e)
	{
		e.stopPropagation();
		DuAEF.DuScriptUI.dimControls();
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.pickButton.image = selector.pickImageOver;
		DuAEF.DuScriptUI.highlightedControls.push(selector);
	}

	selector.dim = function (e)
	{
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.menuButton.image = selector.menuImage;
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.refreshButton.image = selector.refreshImage;
		if (DuAEF.DuAE.App.hasFilesAndNetworkAccess) selector.pickButton.image = selector.pickImage;
		DuAEF.DuScriptUI.setTextColor(selector.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
		DuAEF.DuScriptUI.setBackgroundColor(selector,DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
	}

	selector.pick = function ()
	{
		var comp = DuAEF.DuAE.Project.getActiveComp();
		if (comp) selector.setCurrentId(comp.id);
	}

	// Hack - CS6 Bugs on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		//selector.label.addEventListener("mouseover",selector.highlight);
	}
	else
	{
		selector.mainGroup.addEventListener("mouseover",selector.highlight);
		selector.refreshButton.addEventListener("mouseover",selector.refreshHighlight);
		selector.pickButton.addEventListener("mouseover",selector.pickHighlight);
	}

	selector.mainGroup.addEventListener("click",selector.clicked,true);
	selector.refreshButton.addEventListener("click",selector.setComps);
	selector.pickButton.addEventListener("click",selector.pick);

	selector.onChange = function(){};
	selector.filterComps = function(){ var comps = DuAEF.DuAE.Project.getComps(); return comps; };

	return selector;
}

/**
 * @class
 * @name LayerPicker
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A picker for layers with labels.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createLayerPicker} to create a picker.<br />
 * The picker inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {LayerSelector[]} selectors  - The layer selectors
 * @property {string[]} inputs - The labels texts
 */

/**
 * Empties the LayerPicker
 * @method
 * @memberof LayerPicker
 * @name removeAll
 */

/**
* Adds a new line on the LayerPicker
* @method
* @memberof LayerPicker
* @name addSelector
* @return {LayerSelector} The added LayerSelector
*/

/**
 * Creates a two-columns group to allow the user to pick layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {LayerPicker} The picker.
 */
DuAEF.DuScriptUI.addLayerPicker = function(container)
{
	var name = "Select layers";
	DuAEF.DuScriptUI.uiStrings.push(name);
	name = tr(name);
	var layerPicker = container.add('group');
	layerPicker.orientation = 'row';
	layerPicker.margins = 0;
	layerPicker.spacing = DuAEF.DuScriptUI.defaultSpacing;
	layerPicker.alignment = ['fill','top'];

	layerPicker.labelsGroup = layerPicker.add('group');
	layerPicker.labelsGroup.orientation = 'column';
	layerPicker.labelsGroup.margins = 0;
	layerPicker.labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;
	layerPicker.labelsGroup.alignment = ['left','fill'];
	layerPicker.labelsGroup.alignChildren = ['left','center'];

	layerPicker.selectorsGroup = layerPicker.add('group');
	layerPicker.selectorsGroup.orientation = 'column';
	layerPicker.selectorsGroup.margins = 0;
	layerPicker.selectorsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;
	layerPicker.selectorsGroup.alignment = ['fill','fill'];

	layerPicker.selectors = [];
	layerPicker.inputs = [];

	layerPicker.removeAll = function()
	{
		layerPicker.selectors = [];
		layerPicker.inputs = [];
		for ( var i = layerPicker.labelsGroup.children.length - 1; i >= 0; i-- )
		{
			layerPicker.labelsGroup.remove( layerPicker.labelsGroup.children[ i ] );
			layerPicker.selectorsGroup.remove( layerPicker.selectorsGroup.children[ i ] );
		}
	}

	layerPicker.addSelector = function(inputLabel)
	{
		DuAEF.DuScriptUI.uiStrings.push(inputLabel);
		inputLabel = tr(inputLabel);
		var l = layerPicker.labelsGroup.add('statictext',undefined,inputLabel);

		var sel = DuAEF.DuScriptUI.addLayerSelector(layerPicker.selectorsGroup);
		layerPicker.selectors.push(sel);

		l.minimumSize.height = l.maximumSize.height = 18;

		return sel;
	}

	return layerPicker;
}

/**
 * @class
 * @name LayerPickerDialog
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A picker for layers with labels.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createLayerPicker} to create a picker.<br />
 * The picker inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {LayerPicker} layerPicker The layer picker inside the dialog.
 * @property {bool} accepted This property is true if the user has clicked the OK button, false otherwise.
 */

/**
 * Empties the LayerPicker<br />
 * This is a convenience function equivalent to {@link LayerPickerDialog.layerPicker.removeAll}.
 * @method
 * @memberof LayerPickerDialog
 * @name removeAll
 */

/**
* Adds a new line on the LayerPicker
 * This is a convenience function equivalent to {@link LayerPickerDialog.layerPicker.addSelector}.
* @method
* @memberof LayerPickerDialog
* @name addSelector
* @return {LayerSelector} The added LayerSelector
*/

/**
* Gets the layers picked by the user.
* @method
* @memberof LayerPickerDialog
* @name getLayers
* @return {Layer[]} The layers picked (null if the user has set none in the selector), in the display order.
*/

/**
* Gets the layers picked by the user.
* @method
* @memberof LayerPickerDialog
* @name getLayers
* @return {Layer[]} The layers picked (null if the user has set none in the selector), in the display order.
*/

/**
 * The function called when the dialog is accepted.
 * @callback LayerPickerDialog~onAccept
 * @memberof LayerPickerDialog
 */


/**
 * Creates a dialog with a LayerPicker<br />
 * Use {@link DuAEF.DuScriptUI.showUI} to show it after creation.
 * @memberof DuAEF.DuScriptUI
 * @param {string} title - The title of the dialog.
 * @return {LayerPickerDialog} The dialog window.
 */
DuAEF.DuScriptUI.createLayerPickerDialog = function (title)
{
	var dialog = new Window('palette', title, undefined, {resizeable:true});
	dialog.minimumSize.width = 300;

	dialog.margins = DuAEF.DuScriptUI.defaultMargins;
	dialog.orientation = 'column';

	dialog.layerPicker = DuAEF.DuScriptUI.addLayerPicker(dialog);

	dialog.onAccept = function() {};
	dialog.removeAll = dialog.layerPicker.removeAll;
	dialog.addSelector = dialog.layerPicker.addSelector;
	dialog.getLayers = function ()
	{
		var layers = [];
		for (var i = 0, num = dialog.layerPicker.selectors.length; i < num; i++)
		{
			var sel = dialog.layerPicker.selectors[i];
			layers.push(sel.getLayer());
		}
		return layers;
	}

	dialog.accepted = false;

	//add buttons
	var validGroup = dialog.add('group');
	validGroup.alignment = ['fill', 'bottom'];
	var validGroupCancelButton = DuAEF.DuScriptUI.addImageButton(validGroup,"Cancel",DuAEF.DuBinary.toFile(w25_back_m),"Cancel",DuAEF.DuBinary.toFile(w25_back_r));
	var validGroupValidButton = DuAEF.DuScriptUI.addImageButton(validGroup,"OK",DuAEF.DuBinary.toFile(w25_check_g),"OK",DuAEF.DuBinary.toFile(w25_check_r));

	validGroupValidButton.onClick = function() {dialog.accepted = true; dialog.hide(); dialog.onAccept(); };
	validGroupCancelButton.onClick = function() {dialog.hide();};

	return dialog;
}
