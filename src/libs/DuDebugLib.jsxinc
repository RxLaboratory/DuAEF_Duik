/*
	DuDebugLib
  Library to with tools for debugging
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/


/**
* Tools for debugging
* @namespace
* @memberof DuAEF
*/
DuAEF.Debug = {};

/**
 * The log levels
 * @enum {int}
 * @readonly
 */
DuAEF.Debug.LogLevel =
{
	VERBOSE: 0,
	DEBUG: 1,
	WARNING: 2,
	CRITICAL: 3,
	FATAL: 4,
	NO_DEBUG: 5
}

/**
 * Constructs a new debug logger
 * @class DebugLog
 * @classdesc A logger for debugging purposes: writes debug messages to a file, with date and type
 * @param	{string|File} pathOrFile - The log file.
 * @param	{boolean} [clear=true] - Whether to clear the previous log file before starting
 * @param	{DuAEF.Debug.LogLevel}	[logLevel=DuAEF.Debug.LogLevel.DEBUG] -  The log level.
 * @param	{boolean}	[enabled=DuAEF.debug] -  true to enable the log and start recording
 * @property {DuAEF.Debug.LogLevel} level - The log level.
 * @property {File}	file - The log file.
 * @property {boolean}	running - true if the timer is running, false if it is stopped.
 */
function DebugLog(pathOrFile,clear,logLevel,enabled)
{
	if (!(pathOrFile instanceof File)) this.file = new File(pathOrFile);
	else this.file = pathOrFile;
	this.file.encoding = 'UTF-8';

	if (logLevel == undefined) logLevel = DuAEF.Debug.LogLevel.DEBUG;
	this.level = logLevel;

	if (enabled == undefined) enabled = DuAEF.debug;
	this.enabled = enabled;

	if (clear == undefined) clear = true;
	var openOption = 'a';
	if (clear || !this.file.exists) openOption = 'w';
	if (this.level <= DuAEF.Debug.LogLevel.DEBUG && DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{
		if (this.file.open(openOption))
		{
			var currentDate = new Date();
			this.file.writeln('[' + currentDate.toString() + '] == Debugger started. ==');
			this.file.close();
		}
	}

	this.elapsed = 0;
	this.running = false;
}

/**
* Logs a message
* @param {string} message - The message to log
* @param {DuAEF.Debug.LogLevel} [level=DuAEF.Debug.LogLevel.DEBUG] - The level of the message
*/
DebugLog.prototype.log = function (message,level)
{
	if (typeof level === 'undefined') level = DuAEF.Debug.LogLevel.DEBUG;

	if (!this.enabled) return;
	if (level < this.level) return;
	if (!DuAEF.DuAE.App.hasFilesAndNetworkAccess) return;

	if (!this.file.open('a')) return;

	if (level == undefined) level = DuAEF.Debug.DEBUG;

	var currentDate = new Date();
	var levelString = " || Debug info || ";
	if (level == DuAEF.Debug.LogLevel.WARNING) levelString = " || Warning || ";
	else if (level == DuAEF.Debug.LogLevel.CRITICAL) levelString = " || Critical || ";
	else if (level == DuAEF.Debug.LogLevel.FATAL) levelString = " || Fatal || ";
	this.file.writeln('[' + currentDate.toString() + ']' + levelString + message );
	this.file.close();
}

/**
* Starts the debugger timer.
* @param {string} [message] - A message to display in the log
* @param {DuAEF.Debug.LogLevel} [level=DuAEF.Debug.LogLevel.VERBOSE] - The level of the message
*/
DebugLog.prototype.startTimer = function(message, level)
{
	if (typeof level === 'undefined') level = DuAEF.Debug.LogLevel.VERBOSE;

	if (!this.enabled) return;

	if (message == undefined) message = '';

	if (level >= this.level && DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{
		if (this.file.open('a'))
		{
			var currentDate = new Date();
			this.file.writeln('[' + currentDate.toString() + '] == Timer started. == ' + message);
			this.file.close();
		}
	}

	if (!this.running) this.elapsed = 0;
	this.running = true;
	$.hiresTimer;
}

/**
* Stops the debugger timer.
* @param {string} [message] - A message to display in the log
* @param {DuAEF.Debug.LogLevel} [level=DuAEF.Debug.LogLevel.DEBUG] - The level of the message
*/
DebugLog.prototype.stopTimer = function(message, level)
{
	if (typeof level === 'undefined') level = DuAEF.Debug.LogLevel.DEBUG;
	if (!this.enabled) return;
	if (!this.running) return;

	this.elapsed += Math.round($.hiresTimer/1000);

	if (typeof message === 'undefined') message = '';

	if (level >= this.level && DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{
		if (this.file.open('a'))
		{
			var currentDate = new Date();
			this.file.writeln('[' + currentDate.toString() + '] == Timer stopped == Time elapsed | ' + this.elapsed + 'ms | == ' + message);
			this.file.close();
		}
	}

	this.elapsed = 0;
	this.running = false;
	$.hiresTimer;
}

/**
* Checks the time elapsed since the timer has started<br />
* If the timer is not running, it will be started.
* @param {string} message - A message to display in the log
* @param {DuAEF.Debug.LogLevel} [level=DuAEF.Debug.LogLevel.DEBUG] - The level of the message
* @return {int} The time elapsed in milliseconds
*/
DebugLog.prototype.checkTimer = function(message, level)
{
	if (typeof level === 'undefined') level = DuAEF.Debug.LogLevel.DEBUG;
	if (!this.running) this.startTimer();
	this.elapsed += Math.round($.hiresTimer/1000);

	if (!this.enabled) return -1;

	if (level >= this.level && DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{
		if (this.file.open('a'))
		{
			if (message == undefined) message = '';

			var currentDate = new Date();
			this.file.writeln('[' + currentDate.toString() + '] == Time elapsed | ' + this.elapsed + 'ms | == ' + message);
			this.file.close();
		}
	}

	return this.elapsed;
}
