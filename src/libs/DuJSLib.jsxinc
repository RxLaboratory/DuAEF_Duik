/*
	DuJSLib
	Library javascript tools
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
	Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/


/**
	* Constructs an iterator
	* @example
	* //When iterating through the whole list,
	* //using the function do() has the best performance
	* //but you can not break the loop.
	* //If you need it, instead of using the word 'continue',
	* //just make the function return.
	* var it = new Iterator(layers);
	* it.do(function doSomething(layer) {
	* 	layer.name = something;
	*	//If we need to continue to the next item, return.
	*	if (dontWantThis) return;
	*	//else do something here
	* });
	* @example
	* //If you need to break the loop at one time,
	* //like if you're searching for something,
	* //you can use this method instead, which is a bit less quick than using the function do()
	* var it = new Iterator(layers);
	* while (layer = it.next())
	* {
	*	//do something with the layer
		layer.name = something;
		//when found what we're looking for
		if (found) break;
	* }
	* @class Iterator
	* @classdesc An iterator object to use for easier loops
	* @property {Array|Collection} list - An array or an After Effects Collection
	* @param {Array|Collection} list - An array or an After Effects Collection
	* @property {int} min - The minimum value (inclusive)
	* @property {int} max - The maximum (inclusive)
	* @property {int} length - The number of items
	* @property {int} current - The current item number
	* @property {boolean} atEnd - true if the iterator has reached the end
	* @property {boolean} atStart - true if the iterator is at the start
	* @property {boolean} valid - true if the iterator is between min and max. false until next() or previous() has been called at least once
	* @property {boolean} isCollection - true if the list is a Collection, false if it's a controller
*/
function Iterator(list)
{
	//check if list is an Array, a collection, or something else.
	//if something else, store it in a one-item array
	this.isCollection = DuAEF.DuAE.isCollection(list);
	if (!(list instanceof Array) && !this.isCollection)
	{
		list = [list];
	}

	this.min = 0;
	this.max = list.length -1;
	this.length = list.length;
	if (list.length == 0) return;
	if (this.isCollection)
	{
		this.min = 1;
		this.max = this.length;
	}
	this.current = -1;
	this.atStart = false;
	this.atEnd = false;
	this.valid = false;
	this.list = list;
}

/**
	* Increments the Iterator<br />
	* Must be called at least once to validate the iterator
	* @return {Object} The next item, or null if there isn't
*/
Iterator.prototype.next = function ()
{
	if (this.length == 0) return null;

	if (!this.valid)
	{
		return this.goToStart();
	}
	if (this.current < this.max)
	{
		return this.goTo(this.current + 1);
	}

	return null;
}

/**
	* Decrements the Iterator
	* if it's called while valid is false, goes to the end
	* @return {Object} The previous item, or null if there isn't
*/
Iterator.prototype.previous = function ()
{
	if (this.length == 0) return null;
	if (!this.valid)
	{
		return this.goToEnd();
	}
	if (this.current > this.min)
	{
		return this.goTo(this.current - 1);
	}

	return null;
}

/**
	* Goes to the end of the Iterator
	* @return {Object} The item at the end, or null if length is 0
*/
Iterator.prototype.goToEnd = function ()
{
	if (this.length == 0) return null;
	return this.goTo(this.max);
}

/**
	* Goes to the start of the Iterator
	* @return {Object} The item at the start, or null if length is 0
*/
Iterator.prototype.goToStart = function ()
{
	if (this.length == 0) return null;
	return this.goTo(this.min);
}

/**
	* Sets the iterator on the index
	* @param {int} index - The index
	* @return {Object} The item at index, or null if there isn't
*/
Iterator.prototype.goTo = function(index)
{
	if (this.length == 0) return;
	this.current = index;
	if (this.current < this.min || this.current > this.max) this.valid = false;
	else this.valid = true;
	if (this.current == this.min) this.atStart = true;
	else this.atStart = false;
	if (this.current == this.max) this.atEnd = true;
	else this.atEnd = false;

	if (this.valid) return this.list[this.current];
	else return null;
}

/**
	* Executes a function on each item of the List
	* @param {function} callBack - The function to execute, which takes one parameter: an item of the list
*/
Iterator.prototype.do = function (callBack)
{
	if (this.length == 0) return;
	var current = this.current;

	for (var i = this.min ; i <= this.max ; i++)
	{
		this.valid = true;
		this.current = i;
		callBack(this.list[i]);
	}

	this.goTo(current);
}

/**
	* Gets the item at an index,<br />
	* without changing the current iterator index.
	* @param {int} index - The index of the item
	* @return {Object} The item at index, or null if there isn't one
*/
Iterator.prototype.itemAt = function (index)
{
	if (index < this.min) return null;
	if (index > this.max) return null;
	else return this.list[index];
}

/**
	* Gets the first item,<br />
	* without changing the current iterator index.
	* @return {Object} The first item, or null if there isn't one
*/
Iterator.prototype.firstItem = function ()
{
	if (this.list.length == 0) return null;
	else return this.list[this.min];
}

/**
	* Gets the last item,<br />
	* without changing the current iterator index.
	* @return {Object} The last item, or null if there isn't one
*/
Iterator.prototype.lastItem = function ()
{
	if (this.list.length == 0) return null;
	else return this.list[this.max];
}

/**
	* Useful JavaScript tools
	* @namespace
	* @memberof DuAEF
*/
DuAEF.DuJS = {};

/**
 * Assigns a default value to a var if it's undefined.
 * @param {object} val - The variable to set
 * @param {object} defaultVal - The default value
 * @param {boolean} [doPostInit=true] - True to trigger the post-init method of DuAEF when run.<br />
 * Set it to false if it is used in a method which has to run during initialisation of your script,<br />
 * and true if it is used in a method run by the user later.
 * @return {object} The var
 */
def = function(val,defaultVal)
{
	return typeof val === 'undefined' ? defaultVal : val;
}

/**
 * Improved typeof which returns the type of object instead of 'object'
 * @param {any} exp - The expression to check.
 * @return {string} The type. For primitives, in lower case ('string', 'number', 'boolean', 'null', 'undefined')
*/
DuAEF.DuJS.typeof = function (value) {
    var type = typeof value;

    switch(type) {
        case 'object':
        return value === null ? 'null' : Object.prototype.toString.call(value).
            match(/^\[object (.*)\]$/)[1]

        case 'function':
        return 'Function';

        default:
        return type;
    }
}

/**
	* JavaScript Array related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Array = {};

/**
	* Checks if this is an Array or an After Effects collection type
	* @memberof DuAEF.DuJS.Array
	* @param {Array|Collection} list - The list to check
	* @return {boolean} true if this is a Cllection or an Array
*/
DuAEF.DuJS.Array.isList = function (list)
{
	return (list instanceof Array || DuAEF.DuAE.isCollection(list));
}

/**
	* A function to compare two elements in an array
	* @callback DuAEF.DuJS.Array.indexOf~comparisonFunction
	* @memberof DuAEF.DuJS.Array.indexOf
	* @param {*} elementInArray The element in the array
	* @param {*} value The value to compare
	* @return {bool} true if the two values should be considered the same
*/

/**
	* Gets the first index of a value in an Array, or -1 if not found
	* @memberof DuAEF.DuJS.Array
	* @param {Array}	arr	- The array
	* @param {*}	value	- The value to find. Must be compatible with the == operand, or provide a comparison function
	* @param {function}	[comparisonFunction]	- A function which compares two values which returns true if the values are considered the same.
	* @return {int}	The index of the value, -1 if not found
*/
DuAEF.DuJS.Array.indexOf = function (arr,value,comparisonFunction)
{
	if (value == undefined) throw "Value can not be undefined";
	var useFunction = typeof comparisonFunction === 'function';

	for (var i = 0;i<arr.length;i++)
	{
		if (!useFunction && arr[i] == value) return i;
		if (useFunction && comparisonFunction(arr[i],value)) return i;
	}
	return -1;
}

/**
	* Checks if the array has duplicate values
	* @memberof DuAEF.DuJS.Array
	* @param {Array}	arr	- The array
	* @return {boolean}	true if the array has duplicate values
*/
DuAEF.DuJS.Array.hasDuplicates = function (arr)
{
	for (var i = 0;i<arr.length-1;i++) {
		for (var j=i+1;j<arr.length;j++) {
			if (arr[i] === arr[j]) return true;
		}
	}
	return false;
}

/**
	* Returns all duplicated values found in the array
	* @memberof DuAEF.DuJS.Array
	* @param {Array}	arr	- The array
	* @return {Array}	The duplicated values
*/
DuAEF.DuJS.Array.getDuplicates = function (arr)
{
	var duplicates = [];
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) duplicates.push(arr[j]);
	}
	}
	DuAEF.DuJS.Array.removeDuplicates(duplicates);
	return duplicates;
}

/**
	* Removes all duplicated values from the Array, and returns them
	* @memberof DuAEF.DuJS.Array
	* @param {Array}	arr	- The array
	* @return {Array}	The duplicated (and removed) values
*/
DuAEF.DuJS.Array.removeDuplicates = function (arr)
{
	var removed = [];
	for (var i = 0;i<arr.length-1;i++)
	{
        for (var j=i+1;j<arr.length;j++)
		{
            if (arr[i] === arr[j]) removed = removed.concat(arr.splice(j,1));
        }
	}
	return removed;
}

/**
	* Compares two arrays.<br />
	* The items in the arrays must be compatible with the == operand
	* @memberof DuAEF.DuJS.Array
	* @param {Array|Collection} array1 - The array
	* @param {Array|Collection} array2 - The array
	* @param {int} [floatPrecision=-1] - The precision for (float) number comparison, number of decimals. Set to -1 to not use.
	* @return {boolean} true if the two arrays contain the same values
*/
DuAEF.DuJS.Array.compare = function (array1,array2,floatPrecision)
{
	if (!DuAEF.DuJS.Array.isList(array1) && !DuAEF.DuJS.Array.isList(array2))
	{
		if (typeof array1 == 'number' && typeof array2 == 'number')
		{
			return DuAEF.DuJS.Math.compare(array1,array2,floatPrecision)
		}
		else return array1 == array2;
	}
	if (DuAEF.DuJS.Array.isList(array1) && !DuAEF.DuJS.Array.isList(array2)) return false;
	if (!DuAEF.DuJS.Array.isList(array1) && DuAEF.DuJS.Array.isList(array2)) return false;
	if (array1.length != array2.length) return false;

	var it = new Iterator(array1);
	var ok = true;
	it.do(function (item1)
	{
		var item2 = array2[it.current];
		if (!DuAEF.DuJS.Array.compare(item1,item2,floatPrecision))
		{
			ok = false;
			return;
		}
	});

	return ok;
}

/**
	* JavaScript File System related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Fs = {};

/**
 * The default user data.<br />
 * Replaces the Folder.userData provided by ESTK which does not work properly with mac network sessions.<br />
 * In windows, the value of %APPDATA% ("C:\Documents and Settings\username\Application Data")<br />
 * In Mac OS, "~/Library/Application Support"
 * @type {Folder}
 */
DuAEF.DuJS.Fs.userData = Folder.userData;

if (DuAEF.mac) DuAEF.DuJS.Fs.userData = new Folder('~/Library/Application Support');

/**
 * The folder where DuAEF stores its data, a "DuAEF" subfolder of DuAEF.DuJS.Fs.userData
 * @type {Folder}
 */
DuAEF.DuJS.Fs.duaefData = new Folder(DuAEF.DuJS.Fs.userData.absoluteURI + '/DuAEF/');

/**
 * Recursively remove all content from folder and the folder itself. Warning, this does not move files to the recycle bin and can not be undone.
 * @param {string|Folder} folder - the path or Folder object to wipe.
 */
DuAEF.DuJS.Fs.wipeFolder = function(folder)
{
	if (DuAEF.DuJS.typeof(folder) == 'string' && folder != '') folder = new Folder(folder);
	if (!folder.exists) return;

	//get content and remove 
	var files = folder.getFiles();
	var it = new Iterator(files);
	it.do(function (file)
	{
		if (DuAEF.DuJS.typeof(file) == 'Folder') DuAEF.DuJS.Fs.wipeFolder(file);
		else file.remove();
	});
	folder.remove();
}

/**
	* Recursively gets all files in a folder using a name filter
	* Returns an array of File objects.
	* @memberof DuAEF.DuJS.Fs
	* @param {Folder}	folder	- The Folder
	* @param {string|function}	[filter=*]	- A search mask for file names, specified as a string or a function.
	* A mask string can contain question mark (?) and asterisk (*) wild cards. Default is "*", which matches all file names.
	* Can also be the name of a function that takes a File or Folder object as its argument. It is called for each file or folder found in the search; if it returns true, the object is added to the return array.
	* @return {Array}	The files found.
*/
DuAEF.DuJS.Fs.getFilesInFolder = function (folder,filter)
{
	if (folder === undefined) return [];
	if (!(folder instanceof Folder)) return [];

	var files = folder.getFiles(filter);
	if (files === null) files = [];

	var folders = folder.getFiles(DuJS.fs.isFolder);

	for (var i = 0 ; i < folders.length ; i++)
	{
		files = files.concat(DuJS.fs.getFilesInFolder(folders[i],filter));
	}
	return files;
}

/**
	* Checks if an object is a Folder
	* @memberof DuAEF.DuJS.Fs
	* @param {*}	file	- The object to check
	* @return {boolean}	true if this object is an instance of Folder
*/
DuAEF.DuJS.Fs.isFolder = function (file)
{
	return file instanceof Folder;
}

/**
	* Checks if an object is a File
	* @memberof DuAEF.DuJS.Fs
	* @param {*}	file	- The object to check
	* @return {boolean}	true if this object is an instance of Folder
*/
DuAEF.DuJS.Fs.isFile = function (file)
{
	return file instanceof File;
}

/**
	* Returns the basename of the given path or file
	* @memberof DuAEF.DuJS.Fs
	* @example
	* DuAEF.DuJS.Fs.getBasename(new File("D:/code/open/Duik/shape.test")) // "shape"
	* DuAEF.DuJS.Fs.getBasename("D:/code/open/Duik/shape.test") // "shape"
	* @param {String|File}	 [pathOrFile]	- The file or the path
	* @return {String} The basename
*/
DuAEF.DuJS.Fs.getBasename = function(pathOrFile)
{
    if (pathOrFile instanceof File) pathOrFile = pathOrFile.fsName;
    var name = pathOrFile.split("/").pop();
    name = name.split("\\").pop();
    if(name.lastIndexOf(".") > 0) return name.slice(0, name.lastIndexOf("."));
    return name;
}

/**
	* Returns the extension of the given path or file
	* @memberof DuAEF.DuJS.Fs
	* @example
	* DuAEF.DuJS.Fs.getExtension(new File("D:/code/open/Duik/shape.other.test")) // "test"
	* DuAEF.DuJS.Fs.getExtension("D:/code/open/Duik/shape.test") // "test"
	* @param {String|File}	 [pathOrFile]	- The file or the path
	* @return {String} The extension
*/
DuAEF.DuJS.Fs.getExtension = function(pathOrFile)
{
    if (pathOrFile instanceof File) pathOrFile = pathOrFile.absoluteURI;
    var name = pathOrFile.split("/").pop();
    name = name.split("\\").pop();
    if(name.indexOf(".") > 0) return name.split(".").pop();
    return '';
}

/**
	* Switch the extension of the given path. Create a new path from a given path and a given extension.
	* @memberof DuAEF.DuJS.Fs
	* @param {String|File}	 [pathOrFile]	- The file or the path
	* @param {String}	     [newExtension]	- The new extension
	* @return {String}  The new path
*/
DuAEF.DuJS.Fs.switchExtension = function(pathOrFile, newExtension)
{
    if (pathOrFile instanceof File) pathOrFile = pathOrFile.absoluteURI;
    var point = pathOrFile.lastIndexOf(".");
    if (point == -1) return pathOrFile + "." + newExtension;
    return pathOrFile.slice(0, point) + "." + newExtension;
}

/**
	* Checks if the given path exists
	* @memberof DuAEF.DuJS.Fs
	* @param {string}	 [path]	- The file path
	* @return {boolean} True or false
*/
DuAEF.DuJS.Fs.fileExists = function(path)
{
	var file;
	if (path instanceof File) file = path;
  else file = new File(path);
  return file.exists;
}

/**
	* Reads the first line of a file and return its content
	* @memberof DuAEF.DuJS.Fs
	* @param {File}	 file	- The file
	* @return {string} The content
*/
DuAEF.DuJS.Fs.readFirstLine = function(file)
{
	//open and parse file
	if (!file.open('r')) return '';
	var data = file.readln();
	file.close();
	return data;
}

/**
	* Reads a whole file and return its content
	* @memberof DuAEF.DuJS.Fs
	* @param {File}	 file	- The file
	* @param {string}	 [encoding='UTF-8']	- The text encoding
	* @return {string} The content
*/
DuAEF.DuJS.Fs.readFile = function(file,encoding)
{
	if (typeof encoding === 'undefined') encoding = 'UTF-8';
	//open and parse file
	file.encoding = encoding;
	if (!file.open('r')) return '';
	var data = file.read();
	file.close();
	return data;
}

/**
	* Writes a text file
	* @memberof DuAEF.DuJS.Fs
	* @param {File}	 file	- The file
	* @param {string}	 content	- The content to write
	* @param {boolean}	 [append=false]	- Appends instead of replacing
	* @param {string}	 [encoding='UTF-8']	- The text encoding
*/
DuAEF.DuJS.Fs.writeTextFile = function(file, content, append, encoding)
{
	append = def(append, false);
	encoding = def(encoding, 'UTF-8');
	//open and parse file
	file.encoding = encoding;
	var mode = 'w';
	if (append) mode = 'a';
	if (!file.open(mode)) return;
	file.write(content);
	file.close();
}

/**
	* Parses a JSON file
	* @memberof DuAEF.DuJS.Fs
	* @param {File}	 file	- The file
	* @return {Object|null} The content or null if the file couldn't be parsed
*/
DuAEF.DuJS.Fs.parseJSON = function(file)
{
	//open and parse file
	var json = DuAEF.DuJS.Fs.readFile(file);
	if (json == '') return null;
	var data = {};

	try { data = DuAEF.JSON.parse(json); } catch (e) { if (DuAEF.debug) alert(e.description + '\n\nJSON DATA:\n\n' + json); }
	return data;
}

/**
	* Saves a js object to a JSON file
	* @memberof DuAEF.DuJS.Fs
	* @param {Object} obj - The object to save
	* @param {File|string} file - The file or URI
	* @return {boolean} true if the file has been correctly written
*/
DuAEF.DuJS.Fs.saveJSON = function (obj,file)
{
	if (!DuAEF.DuAE.App.hasFilesAndNetworkAccess) return false;
	if (!(file instanceof File)) file = new File(file);
	var data = DuAEF.JSON.stringify(obj,null,4);
	//save to file
	file.encoding = 'UTF-8';
	if (file.open('w'))
	{
		file.write(data);
		file.close();
		return true;
	}
	return false;
}

/**
	* Parses a CSV file
	* @memberof DuAEF.DuJS.Fs
	* @param {File}	 file	- The file
	* @param {string}	 [delimiter=',']	- The delimiter used
	* @param {string}	 [textSeparator='"']	- The separator for texts
	* @return {string[]|null} The content (a two-dimensionnal Array) or null if the file couldn't be parsed
*/
DuAEF.DuJS.Fs.parseCSV = function(file,delimiter,textSeparator)
{
	if (typeof delimiter === 'undefined') delimiter = ',';
	if (typeof textSeparator === 'undefined') textSeparator = '"';
	var reQuoted = new RegExp("(" + textSeparator + ")((?:\\\\\\1|(?:(?!\\1).))*)\\1");
	//open and parse file
	var data = DuAEF.DuJS.Fs.readFile(file);
	if (data == '') return null;
	data = data.split('\n');
	for (var i = 0, num = data.length; i < num; i++)
	{
		//get quoted values
		var quotedValues = [];
		var line = data[i];
		var quoted = reQuoted.exec(line);
		while (quoted)
		{
			quotedValues.push(quoted[2]);
			line = line.replace(quoted[0],'%%');
			quoted = reQuoted.exec(line);
		}
		data[i] = line.split(delimiter);
		for (var j = 0, numJ = data[i].length; j < numJ; j++)
		{
			data[i][j] = DuAEF.DuJS.String.trim(data[i][j]);
			if (data[i][j] == '%%')
			{
				data[i][j] = quotedValues.shift();
			}
		}
	}
	return data;
}

/**
	* Shows the default save file dialog and returns the file selected by the user.<r />
	* If the user ommits the extension, the default extension will be appended (Mac OS fix).
	* @memberof DuAEF.DuJS.Fs
	* @param {string}	 prompt	- The prompt text, displayed if the dialog allows a prompt.
	* @param {string}	 [filter='']	- The file type filter (windows only)
	* @param {string}	 [defaultExtension='']	- The default extension
	* @return {File|null} The file or null if the user cancels
*/
DuAEF.DuJS.Fs.saveFileDialog = function(prompt, filter, defaultExtension)
{
	if (typeof defaultExtension === 'undefined') defaultExtension = '';

	var saveFile = File.saveDialog(prompt, filter);
	if (!saveFile) return null;

	if (saveFile.name.indexOf('.') < 1 && defaultExtension != '')
	{
		if (defaultExtension.indexOf('.') != 0) defaultExtension = '.' + defaultExtension;
		saveFile = new File(saveFile.parent.absoluteURI + '/' + saveFile.name + defaultExtension);
	}

	return saveFile;
}

/**
	* Image sequences tools
	* @namespace
	* @memberof DuAEF.DuJS.Fs
*/
DuAEF.DuJS.Fs.ImageSequence  ={};

/**
	* Gets the number of a frame from an image sequence<br />
	* The number must be right before the extension.
	* @param {string}	path	- The path of the frame
*/
DuAEF.DuJS.Fs.ImageSequence.getNumber = function(path)
{
	var string_noExt = path.substring(0,path.lastIndexOf('.'));
	var numberi = 0;
	var namei = 0;
	for(var i = string_noExt.length-1;i>=0;i--)
	{
		if(isNaN(parseInt(string_noExt.charAt(i))))
		{
			numberi = i+1;
			break;
		}
	}
	number = string_noExt.substring(numberi,string_noExt.length);
	return number;
}

/**
	* JavaScript Math related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Math = {};

/**
	* Generates a random integer between minimum and maximum
	* @memberof DuAEF.DuJS.Math
	* @param {int}	[min=0]	- The minimum value
	* @param {int}	[max=1]	- The maximum value
	* @return {int}	The randomly generated integer
*/
DuAEF.DuJS.Math.random = function (min, max)
{
	if (min == undefined) min = 0;
	if (max == undefined) max = 1;
	var rng = null;
	$.sleep(1);
	var date = new Date();
	var rng = new Math.seedrandom(date.getTime())();
	//rng = Math.random();

	if (!rng) return 0;
	return rng * (max - min) + min;
}

/**
	* Measures the vector length between two points
	* @param {int[]} value1 - The first value
	* @param {int[]} value2 - The second value
	* @return {float} The length
*/
DuAEF.DuJS.Math.getLength = function (value1,value2)
{
	if (typeof value1 !== typeof value2)
	{
		return null;
	}
	if (value1.length > 0)
	{
		var result = 0;
		for (var dim = 0;dim<value1.length;dim++)
		{
			result += (value1[dim]-value2[dim])*(value1[dim]-value2[dim]);
		}
		result = Math.sqrt(result);
		return result;
	}
	else return Math.abs(value1 - value2) ;
}

/**
	* Compares two numbers
	* @memberof DuAEF.DuJS.Array
	* @param {Number} value1 - The first value
	* @param {Number} value2 - The second value
	* @param {int} [floatPrecision=-1] - The precision for (float) number comparison, number of decimals. Set to -1 to not use.
	* @return {boolean} true if the two values are equal
*/
DuAEF.DuJS.Math.compare = function (value1,value2,floatPrecision)
{
	if (typeof value1 != 'number') return false;
	if (typeof value2 != 'number') return false;
	if (floatPrecision >= 0)
	{
		var mul = Math.pow(10,floatPrecision);
		var num1 = Math.round(value1*mul)/mul;
		var num2 = Math.round(value2*mul)/mul;
		return num1 == num2;
	}
	else return value1 == value2;
}

/**
	* Calculates the log10 of a number
	* @memberof DuAEF.DuJS.Math
	* @param {float}	w	- The number
	* @return {float}	The result of log10(x)<br />
	* i.e. Math.log(x)/Math.LN10
*/
DuAEF.DuJS.Math.log10 = function (x)
{
	return Math.log(x)/Math.LN10;
}

/**
	* Calculates the average value in a list
	* @memberof DuAEF.DuJS.Math
	* @param {Number|Number[]}	values	- values
	* @return {float}	The average value
*/
DuAEF.DuJS.Math.average = function (values)
{
	if (!(values instanceof Array)) return values;
	var sum = 0;
	var total = values.length;
	if (total == 0) return 0;
	for (var i = 0; i < total; i++)
	{
		sum += values[i];
	}
	return sum/total;
}

/**
	* Clamps the value
	* @memberof DuAEF.DuJS.Math
	* @param {Number|Number[]}	values	- values
	* @param {Number}	[min=0] - The minimum value
	* @param {Number}	[max=1] - The maximum value
	* @return {Number|Number[]}	The clamped values
*/
DuAEF.DuJS.Math.clamp = function (values, min, max)
{
	if (typeof min === 'undefined') min = 0;
	if (typeof max === 'undefined') max = 1;
	var isArray = true;
	var result = [];
	if (!(values instanceof Array))
	{
		isArray = false;
		values = [values];
	}
	for (var i = 0, num = values.length; i < num; i++)
	{
		var v = values[i];
		if (v < min) v = min;
		if (v > max) v = max;
		result.push(v);
	}
	if (isArray) return result;
	else return result[0];
}

/**
	* Converts the number from degrees to radians
	* @memberof DuAEF.DuJS.Math
	* @param {number} value - the value
	* @return {float} The value in radians
*/
DuAEF.DuJS.Math.toRadians = function (value)
{
	return value * Math.PI / 180;
}

/**
	* Converts the number from radians to degrees
	* @memberof DuAEF.DuJS.Math
	* @param {number} value - the value
	* @return {float} The value in degrees
*/
DuAEF.DuJS.Math.toDegrees = function (value)
{
	return value * 180 / Math.PI;
}

/**
	* Converts the number from degrees to radians
	* @memberof DuAEF.DuJS.Math
	* @param {number} value - the value
	* @return {float} The value in radians
*/
DuAEF.DuJS.Math.toRadians = function (value)
{
	return value * Math.PI / 180;
}

/**
	* Converts the number from radians to degrees
	* @memberof DuAEF.DuJS.Math
	* @param {number} value - the value
	* @return {float} The value in degrees
*/
DuAEF.DuJS.Math.toDegrees = function (value)
{
	return value * 180 / Math.PI;
}

/**
	* JavaScript Regular Expression related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.RegExp = {};

/**
	* Escape reg exp reserved characters from a string to build a regular expression compatible string
	* @memberof DuAEF.DuJS.RegExp
	* @param {string}	string		- The string to escape
	* @return	{string}	The escaped string
*/
DuAEF.DuJS.RegExp.escapeRegExp = function (string)
{
	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
}

/**
	* JavaScript String related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.String = {};

/**
 * Counts the number of occurences of item in string
 * @param {string} string - The string where to count
 * @param {string} item - the string to search
 * @return {int} the number of occurences
 */
DuAEF.DuJS.String.occurences = function (string, item)
{
	return (string.split(item).length -1);
}

/**
	* Parses the string as a boolean.<br />
	* The following strings are falsy:<br />
	* 'false', '0', '', 'null', 'undefined', 'NaN'.<br />
	* Note that any string consisiting only in any number of 0 will be falsy.
	* @memberof DuAEF.DuJS.String
	* @param {string} string - The string to parse
	* @param {boolean} [caseSensitive=true] - When false, 'FALSE', 'nan', 'UNdefined'... for example will be falsy too.
	* @return {boolean} The resulting boolean
*/
DuAEF.DuJS.String.parseBool = function (string, caseSensitive)
{
	if (typeof caseSensitive === 'undefined') caseSensitive = true;

	if (!caseSensitive) string = string.toLowerCase();
	var nan = 'NaN';
	if (!caseSensitive) nan = 'nan';

	// test if string is only zeroes
	var reZeroes = /^0+$/g;
	if (reZeroes.test(string)) return false;

	return string === 'false' || string === 'null' || string === '' || string === 'undefined' || string === nan;
}

/**
	* Replaces all occurences of a substring by another and returns the new string.
	* @memberof DuAEF.DuJS.String
	* @param {string}	string			- The original string
	* @param {string}	find			- The substring to replace
	* @param {string}	replace			- The new substring to insert
	* @param {boolean}	[caseSensitive=true]	- Optionnal. Do a case sensitive search of substring.
	* @return	{string}	The new string
	*/
DuAEF.DuJS.String.replace = function (string, find, replace, caseSensitive)
{
	if (caseSensitive == undefined) caseSensitive = true;
	var re = new RegExp(DuAEF.DuJS.RegExp.escapeRegExp(find),caseSensitive ? 'g' : 'gi');
	return string.replace(re, replace);
}

/**
	* Replaces all occurences of "{#}" in the string by the args. Uses "?" if there are less args than occurences of "{#}".
	* @memberof DuAEF.DuJS.String
	* @param {string}	string			- The original string
	* @param {string[]}	args			- The arguments
	* @return {string}	The new string
	*/
DuAEF.DuJS.String.args = function (string, args)
{
    var str = string;
    while(str.indexOf("{#}") !== -1)
	{
		// While there is stuff to format
		if(args.length < 1)
		{ // If no more args, replace with ?
			str = str.replace("{#}", "?"); // Will replace the first occurence
		}
		else
		{
			var arg = args.shift(); // Take the first arg and remove it
			str = str.replace("{#}", arg);
		}
	}
    return str;
}

/**
 * Checks if a string ends with a given suffix
 * @memberof DuAEF.DuJS.String
 * @param {string}	str 	The string to check
 * @param {string}	suffix	The suffix
 * @return {bool}	Wether the string ends with the given suffix or not
 */
DuAEF.DuJS.String.endsWith = function (str, suffix)
{
	return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

/**
 * Generates a new unique string (numbered)
 * @param {string} newString	- The wanted new string
 * @param {string[]} stringList 	- The list of strings where the new one must be generateUnique
 * @param {boolean} [increment=true] - true to automatically increment the new name if it already ends with a digit
 * @return {string}	The unique string, with a new number at the end if needed.
 */
DuAEF.DuJS.String.generateUnique = function ( newString , stringList , increment )
{
	if (increment == undefined) increment = true;
	if (!increment) newString += ' ';

    //detect digits
    var reg = "( *)(\\d+)([.,]?\\d*)$";
    //clean input
    var regexClean = new RegExp(reg);
    newString = newString.replace(regexClean,"");
    //go!
    var regex = new RegExp( DuAEF.DuJS.RegExp.escapeRegExp(newString) + reg);
    //The greatest number found
    var greatestNumber = 0;
    //The number of digits for the number as string
    var numDigits = 0;
    var spaceString = "";
    for ( var i =0 ; i < stringList.length ; i ++)
    {
        var currentNumberMatch = stringList[i].match(regex);
        if (stringList[i] === newString && greatestNumber == 0) greatestNumber++;
        else if (currentNumberMatch !== null)
        {
            //if its a decimal number, keep only the integer part
            var numberAsString = currentNumberMatch[2];
            //convert to int
            var numberAsInt = parseInt(currentNumberMatch[2],10);
			if (isNaN(numberAsInt)) continue;
            if(numberAsInt >= greatestNumber ){
                greatestNumber = numberAsInt  + 1;
                spaceString = currentNumberMatch[1];
            }
            //check if there are zeroes before the number, count the digits
            if(numberAsInt.toString().length < numberAsString.length && numDigits < numberAsString.length) numDigits = numberAsString.length;
        }
    }

    //add leading 0 if needed
    if (greatestNumber > 0)
    {
            //convert to string with leading zeroes
            if (greatestNumber == 1) {
                greatestNumber++;
                spaceString = " ";
            }
            newString += spaceString;
            greatestNumber = DuAEF.DuJS.Number.convertToString(greatestNumber,numDigits);
            newString += greatestNumber;
    }

	if (!increment) newString = newString.substr(0,newString.length-1);

    return newString;
}

/**
	* Join multiple paths togetther.
	* @param {string[]}	 [parts]	- The parts to join togehter
	* @param {String}	[sep=/]	- The separator to use. If not defined, will look for the first sep in the path.
	* @return {String} The final path
*/
DuAEF.DuJS.String.pathJoin = function(parts, sep)
{
   var separator = sep || false;
   if(!separator)
   {
       // Find first /
       if(parts[0].indexOf('/') != -1) separator = '/';
       if(parts[0].indexOf('\\') != -1) separator = '\\';
   }
   if(!separator) separator = '/';
   var replace   = new RegExp(separator+'{1,}', 'g');  // Replace ///// with /
   return parts.join(separator).replace(replace, separator);
}

/**
	* Returns a copy of the string without leading and trailing white spaces.
	* @param {string}	 str	- The string to trim
	* @return {String} The trimmed string
*/
DuAEF.DuJS.String.trim = function(str)
{
	return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
}

/**
	* Returns a copy of the string without leading white spaces.
	* @param {string}	 str	- The string to trim
	* @return {String} The trimmed string
*/
DuAEF.DuJS.String.leftTrim = function(str)
{
	return str.replace(/^[\s\uFEFF\xA0]+/, '');
}

/**
	* Returns a copy of the string without trailing white spaces.
	* @param {string}	 str	- The string to trim
	* @return {String} The trimmed string
*/
DuAEF.DuJS.String.rightTrim = function(str)
{
	return str.replace(/[\s\uFEFF\xA0]+$/, '');
}

/**
	* Returns a copy of the string without leading and trailing white spaces, and without any new line, leaving only standard spaces.
	* @param {string}	 str	- The string to trim
	* @return {String} The trimmed string
*/
DuAEF.DuJS.String.fullTrim = function(str)
{
	var newStr = str.replace(/[\s\uFEFF\xA0]+/g,' ');
	return DuAEF.DuJS.String.trim(newStr);
}

/**
	* Number related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Number = {};

/**
 * Converts a number to a string, adding optionnal leading zeroes
 * @param {Number} num	- The number
 * @param {int} numDigits 	- The number of digits in the string. Adds leading zeroes
 * @param {int} [base=10]	- The conversion base
 * @return {string}	The number as a string
 */
DuAEF.DuJS.Number.convertToString = function (num, numDigits, base)
{
	if (base == undefined) base = 10;
	var result = num.toString(base);
	while(numDigits > result.length)
	{
		result  = "0" + result ;
	}
	return result;
}

/**
	* Color related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Color = {};

/**
 * Enum for predefined colors.
 * @readonly
 * @enum {float[]}
 */
DuAEF.DuJS.Color.Colors =
{
	BLACK: [0,0,0,1],
	VERY_DARK_GREY: [0.12,0.12,0.12,1],
	DARK_GREY: [.262,.262,.262,1],
	LIGHT_GREY: [.65,.65,.65,1],
	VERY_LIGHT_GREY: [.85,.85,.85,1],
	RAINBOX_RED: [.925,.094,.094,1],
	ORANGE: [.925,.471,.094,1],
	YELLOW: [.925,.839,.094,1],
	GREEN: [.094,.925,.094],
	LIGHT_BLUE: [.471,.839,.925,1],
	LIGHT_PURPLE: [.471,.471,.925,1],
	AFTER_EFFECTS_BLUE: [.439,.722,1,1],
	RAINBOX_PURPLE: [.443,.004,.196,1],
	RANDOM: [-1,-1,-1,-1]
};

/**
 * Checks if this color is valid ([R,V,B,A] in the range 0.0 ... 1.0)
 * @param {float[]} color - The color to validate
 * @param {boolean} [ignoreAlpha=false] - Will return true even if the array does not have any alpha value
 * @return {boolean} true if the color is valid
 */
DuAEF.DuJS.Color.validateColor = function (color, ignoreAlpha)
{
	ignoreAlpha = def( ignoreAlpha, false, false );
	if ( !DuAEF.DuJS.typeof(color) == 'Array' ) return false;
	var numChannels = color.length;
	if ( numChannels != 4 && !ignoreAlpha ) return false;
	if ( numChannels != 4 && numChannels != 3 ) return false;
	for (var i = 0, numChannels; i < numChannels; i++)
	{
		var c = color[i];
		if (isNaN(c)) return false;
		if (!DuAEF.DuJS.typeof(color) == 'number') return false;
		if (c < 0) return false;
		if (c > 1) return false;
	}
	return true;
}

/**
	* Generates a random color
	* @memberof DuAEF.DuJS.Color
	* @return {float[]}	The color as an [R,G,B,A] Array with float values between 0.0 and 1.0
*/
DuAEF.DuJS.Color.random = function ()
{
	var color = [0,0,0,1];
	for (var i = 0 ; i < 3 ; i++)
	{
		color[i] = DuAEF.DuJS.Math.random();
		$.sleep(10);
	}
	return color;
}

/**
	* Converts an hexadecimal color to an RVB Array
	* @memberof DuAEF.DuJS.Color
	* @param {string|int[]} hexColor	- The hexadecimal color
	* @param {boolean}	[isString=true] 	- Whether hexColor is a string or an Array of int of base 16
	* @return {float[]}	The color as an [R,G,B,A] Array with float values between 0.0 and 1.0
*/
DuAEF.DuJS.Color.hexToRGB = function (hexColor,isString)
{
		if (isString == undefined) isString = true;
		if (isString)
		{
			if (hexColor.indexOf("#") == 0) hexColor = hexColor.replace("#","");
			var red = parseInt(hexColor.substr(0,2),16)/255.0;
			var green = parseInt(hexColor.substr(2,2),16)/255.0;
			var blue = parseInt(hexColor.substr(4,2),16)/255.0;
			return [red,green,blue,1];
		}
		else
		{
			var r = hexColor >> 16;
			var g = (hexColor & 0x00ff00) >> 8;
			var b = hexColor & 0xff;
			return [r/255,g/255,b/255,1];
		}
	}


/**
	* Converts an RGB color to a hex string
	* @memberof DuAEF.DuJS.Color
	* @param {float[]} rgbColor	- The rgb color
	* @return {string}	The color as an hex string
*/
DuAEF.DuJS.Color.rgbToHex = function (rgbColor)
{
	var red = rgbColor[0]*255;
	var green = rgbColor[1]*255;
	var blue = rgbColor[2]*255;
	var hexR = red.toString(16)
	var hexG = green.toString(16)
	var hexB = blue.toString(16);
	if (hexR.length == 1) hexR = "0" + hexR;
	if (hexG.length == 1) hexG = "0" + hexG;
	if (hexB.length == 1) hexB = "0" + hexB;
	var hex = hexR+hexG+hexB;
	return hex;
}

/**
	* Converts an HSL color to RGB
	* @param {float[]} color - The RGBA color array
	* @return {float[]} the HSLA color array
*/
DuAEF.DuJS.Color.hslToRgb = function (color)
{
    var r, g, b;
	var h = color[0];
	var s = color[1];
	var l = color[2];

    if(s == 0)
	{
        r = g = b = l; // achromatic
    }
	else
	{
        function hue2rgb(p, q, t)
		{
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [r, g, b, color[3]];
}

/**
	* Converts an RGB color to HSL
	* @param {float[]} color - The HSLA color array
	* @return {float[]} the RGBA color array
*/
DuAEF.DuJS.Color.rgbToHsl = function (color)
{
	var r = color[0];
	var g = color[1];
	var b = color[2];

    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min)
	{
        h = s = 0; // achromatic
    }
	else
	{
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max)
		{
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l, color[3]];
}

/**
 * Converts an 8bpc color array to a 32bpc float color array
 * @param {int[]} color - The RGB(A) color array in 8bpc (0-255 range)
 * @return {float[]} the RGBA color array
 */
DuAEF.DuJS.Color.eightBpcToFloat = function (color)
{
	var floatColor = [];
	for (var i = 0, numChannels = color.length; i < numChannels; i++)
	{
		floatColor.push( color[ i ] / 255 );
	}
	return floatColor;
}

/**
	* Date related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Date = {};

/**
	* Gets the month number from a literal name
	* @memberof DuAEF.DuJS.Date
	* @param {string} string - The month name
	* @return {int} The month number
*/
DuAEF.DuJS.Date.getMonth = function (string)
{
	var month = 0;
	if (string.toLowerCase().indexOf('feb') == 0) month = 1;
	if (string.toLowerCase().indexOf('mar') == 0) month = 2;
	if (string.toLowerCase().indexOf('apr') == 0) month = 3;
	if (string.toLowerCase().indexOf('may') == 0) month = 4;
	if (string.toLowerCase().indexOf('jun') == 0) month = 5;
	if (string.toLowerCase().indexOf('jul') == 0) month = 6;
	if (string.toLowerCase().indexOf('aug') == 0) month = 7;
	if (string.toLowerCase().indexOf('sep') == 0) month = 8;
	if (string.toLowerCase().indexOf('oct') == 0) month = 9;
	if (string.toLowerCase().indexOf('nov') == 0) month = 10;
	if (string.toLowerCase().indexOf('dec') == 0) month = 11;

	return month;
}

/**
	* Version handling
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Version = {};

/**
 * Compares two versions in the standard form AA.BB.CC-BetaX
 * @param {string} vA - The first version
 * @param {string} [vB=DuAEF.scriptVersion] - The other version
 * @return {boolean} True if vA is more recent than vB
*/
DuAEF.DuJS.Version.compare = function (vA, vB)
{
	vB = def(vB, DuAEF.scriptVersion, false);
	if (vA === vB) return false;

	var vAArray = vA.split('.');
	var vBArray = vB.split('.');

	for (var i = 0; i < 3; i++)
	{
		if (i >= vBArray.length) return true;
		if (i >= vAArray.length) return false;

		var a = parseInt(vAArray[i]);
		var b = parseInt(vBArray[i]);

		//remove "alpha" or "beta" if needed
		if (i == 2)
		{
			if (isNaN(a)) a = vAArray[i].split("-")[0];
			a = parseInt(a);
			if (isNaN(b)) b = vBArray[i].split("-")[0];
			b = parseInt(b);
		}

		if (isNaN(a) && isNaN(b)) continue;
		else if (isNaN(a)) return false;
		else if (isNaN(b)) return true;

		if (a == b)
		{
			if (i == 0 || i == 1) continue;
			else 
			{
				//get the "alpha" or "beta" part
				var aa = vAArray[i].split("-");
				if (aa.length == 2) aa = aa[1].toLowerCase();
				else aa = "";
				var bb = vBArray[i].split("-");
				if (bb.length == 2) bb = bb[1].toLowerCase();
				else bb = "";

				if (aa == bb) continue;

				if (bb == "" && aa == "") return true;
				if (bb == "" && aa != "") return false;
				if (bb != "" && aa == "") return true;

				if (bb.indexOf("beta") >= 0 && aa.indexOf("beta") >= 0 ) return true;
				if (bb.indexOf("beta") >= 0 && aa.indexOf("beta") < 0 ) return false;
				if (bb.indexOf("beta") < 0 && aa.indexOf("beta") >= 0 ) return true;

				if (bb.indexOf("alpha") >= 0 && aa.indexOf("alpha") >= 0 ) return true;
				if (bb.indexOf("alpha") >= 0 && aa.indexOf("alpha") < 0 ) return false;
				if (bb.indexOf("alpha") < 0 && aa.indexOf("alpha") >= 0 ) return true;
			}

		}
		else return a > b;
		
	}

	return true;
}
