/*
DuikLib
Library with Duik tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

__Contributors:__

	Nicolas Dufresne - Lead developer
	Kevin Masson - Developer

__Thanks to:__

	Dan Ebberts - Writing the first IK Expressions
	Eric Epstein - making the IK's work with 3D Layers
	Kevin Schires – Including images in the script
	Matias Poggini – Bezier IK feature
	Eric Epstein - Making the IK's work with 3D Layers
	Assia Chioukh and Quentin Saint-Georges – User Guides composition
	Motion Cafe – Ideas and feedback
	Fous d’anim – Ideas and feedback
	All 258 Duik 15 indiegogo backers for making this libDuik possible!


This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Duik tools
* @namespace
* @memberof DuAEF
*/
DuAEF.Duik = {};

//Loads pseudo effects
(function ()
{
	//structures
	#include "pseudoEffects/duik_structure.ffx.jsxinc"
	duik_structure = DuAEF.DuBinary.toFile(duik_structure);
	//list
	#include "pseudoEffects/duik_1d_list.ffx.jsxinc"
	duik_1d_list = DuAEF.DuBinary.toFile(duik_1d_list);
	#include "pseudoEffects/duik_2d_list.ffx.jsxinc"
	duik_2d_list = DuAEF.DuBinary.toFile(duik_2d_list);
	#include "pseudoEffects/duik_3d_list.ffx.jsxinc"
	duik_3d_list = DuAEF.DuBinary.toFile(duik_3d_list);
	//wiggle
	#include "pseudoEffects/duik_1d_wiggle.ffx.jsxinc"
	duik_1d_wiggle = DuAEF.DuBinary.toFile(duik_1d_wiggle);
	#include "pseudoEffects/duik_1d_multiwiggle.ffx.jsxinc"
	duik_1d_multiwiggle = DuAEF.DuBinary.toFile(duik_1d_multiwiggle);
	#include "pseudoEffects/duik_2d_wiggle.ffx.jsxinc"
	duik_2d_wiggle = DuAEF.DuBinary.toFile(duik_2d_wiggle);
	#include "pseudoEffects/duik_3d_wiggle.ffx.jsxinc"
	duik_3d_wiggle = DuAEF.DuBinary.toFile(duik_3d_wiggle);
	//swing
	#include "pseudoEffects/duik_1d_swing.ffx.jsxinc"
	duik_1d_swing = DuAEF.DuBinary.toFile(duik_1d_swing);
	#include "pseudoEffects/duik_2d_swing.ffx.jsxinc"
	duik_2d_swing = DuAEF.DuBinary.toFile(duik_2d_swing);
	#include "pseudoEffects/duik_3d_swing.ffx.jsxinc"
	duik_3d_swing = DuAEF.DuBinary.toFile(duik_3d_swing);
	#include "pseudoEffects/duik_spatial_swing.ffx.jsxinc"
	duik_spatial_swing = DuAEF.DuBinary.toFile(duik_spatial_swing);
	//Wheel
	#include "pseudoEffects/duik_wheel.ffx.jsxinc"
	duik_wheel = DuAEF.DuBinary.toFile(duik_wheel);
	//Effector
	#include "pseudoEffects/duik_effector.ffx.jsxinc"
	duik_effector = DuAEF.DuBinary.toFile(duik_effector);
	//Spring
	#include "pseudoEffects/duik_1d_spring.ffx.jsxinc"
	duik_1d_spring = DuAEF.DuBinary.toFile(duik_1d_spring);
	#include "pseudoEffects/duik_multid_spring.ffx.jsxinc"
	duik_multid_spring = DuAEF.DuBinary.toFile(duik_multid_spring);
	#include "pseudoEffects/duik_spatial_spring.ffx.jsxinc"
	duik_spatial_spring = DuAEF.DuBinary.toFile(duik_spatial_spring);
	//Blink
	#include "pseudoEffects/duik_1d_blink.ffx.jsxinc"
	duik_1d_blink = DuAEF.DuBinary.toFile(duik_1d_blink);
	#include "pseudoEffects/duik_2d_blink.ffx.jsxinc"
	duik_2d_blink = DuAEF.DuBinary.toFile(duik_2d_blink);
	#include "pseudoEffects/duik_3d_blink.ffx.jsxinc"
	duik_3d_blink = DuAEF.DuBinary.toFile(duik_3d_blink);
	#include "pseudoEffects/duik_color_blink.ffx.jsxinc"
	duik_color_blink = DuAEF.DuBinary.toFile(duik_color_blink);
	//Paint Rig
	#include "pseudoEffects/duik_paint_rig.ffx.jsxinc"
	duik_paint_rig = DuAEF.DuBinary.toFile(duik_paint_rig);
	//Motion Trail
	#include "pseudoEffects/duik_motion_trail.ffx.jsxinc"
	duik_motion_trail = DuAEF.DuBinary.toFile(duik_motion_trail);
	//X-Sheet
	#include "pseudoEffects/duik_x_sheet.ffx.jsxinc"
	duik_x_sheet = DuAEF.DuBinary.toFile(duik_x_sheet);
	//Controller
	#include "pseudoEffects/duik_controller.ffx.jsxinc"
	duik_controller = DuAEF.DuBinary.toFile(duik_controller);
	#include "pseudoEffects/duik_controller_slider.ffx.jsxinc"
	duik_controller_slider = DuAEF.DuBinary.toFile(duik_controller_slider);
	#include "pseudoEffects/duik_controller_dslider.ffx.jsxinc"
	duik_controller_dslider = DuAEF.DuBinary.toFile(duik_controller_dslider);
	#include "pseudoEffects/duik_controller_angle.ffx.jsxinc"
	duik_controller_angle = DuAEF.DuBinary.toFile(duik_controller_angle);
	//constraints
	#include "pseudoEffects/duik_orientation.ffx.jsxinc"
	duik_orientation = DuAEF.DuBinary.toFile(duik_orientation);
	#include "pseudoEffects/duik_position.ffx.jsxinc"
	duik_position = DuAEF.DuBinary.toFile(duik_position);
	#include "pseudoEffects/duik_path.ffx.jsxinc"
	duik_path = DuAEF.DuBinary.toFile(duik_path);
	#include "pseudoEffects/duik_parent.ffx.jsxinc"
	duik_parent = DuAEF.DuBinary.toFile(duik_parent);
	#include "pseudoEffects/duik_attachment.ffx.jsxinc"
	duik_attachment = DuAEF.DuBinary.toFile(duik_attachment);
	#include "pseudoEffects/duik_attachment_options.ffx.jsxinc"
	duik_attachment_options = DuAEF.DuBinary.toFile(duik_attachment_options);
	//bones
	#include "pseudoEffects/duik_bone.ffx.jsxinc"
	duik_bone = DuAEF.DuBinary.toFile(duik_bone);
	#include "pseudoEffects/duik_bone_linker.ffx.jsxinc"
	duik_bone_linker = DuAEF.DuBinary.toFile(duik_bone_linker);
	//connector
	#include "pseudoEffects/duik_1d_connector.ffx.jsxinc"
	duik_1d_connector = DuAEF.DuBinary.toFile(duik_1d_connector);
	#include "pseudoEffects/duik_2d_connector.ffx.jsxinc"
	duik_2d_connector = DuAEF.DuBinary.toFile(duik_2d_connector);
	#include "pseudoEffects/duik_3d_connector.ffx.jsxinc"
	duik_3d_connector = DuAEF.DuBinary.toFile(duik_3d_connector);
	#include "pseudoEffects/duik_color_connector.ffx.jsxinc"
	duik_color_connector = DuAEF.DuBinary.toFile(duik_color_connector);
	//ik
	#include "pseudoEffects/duik_1layer_ik.ffx.jsxinc"
	duik_1layer_ik = DuAEF.DuBinary.toFile(duik_1layer_ik);
	#include "pseudoEffects/duik_2layer_ik.ffx.jsxinc"
	duik_2layer_ik = DuAEF.DuBinary.toFile(duik_2layer_ik);
	#include "pseudoEffects/duik_3layer_ik.ffx.jsxinc"
	duik_3layer_ik = DuAEF.DuBinary.toFile(duik_3layer_ik);
	#include "pseudoEffects/duik_bezier_ik.ffx.jsxinc"
	duik_bezier_ik = DuAEF.DuBinary.toFile(duik_bezier_ik);
	#include "pseudoEffects/duik_bezier_ik_curve.ffx.jsxinc"
	duik_bezier_ik_curve = DuAEF.DuBinary.toFile(duik_bezier_ik_curve);
	#include "pseudoEffects/duik_bezier_ik_layer.ffx.jsxinc"
	duik_bezier_ik_layer = DuAEF.DuBinary.toFile(duik_bezier_ik_layer);
	#include "pseudoEffects/duik_ik.ffx.jsxinc"
	duik_ik = DuAEF.DuBinary.toFile(duik_ik);
	//cameras
	#include "pseudoEffects/duik_2d_camera.ffx.jsxinc"
	duik_2d_camera = DuAEF.DuBinary.toFile(duik_2d_camera);
	//autorig
	#include "pseudoEffects/duik_foot_roll.ffx.jsxinc"
	duik_foot_roll = DuAEF.DuBinary.toFile(duik_foot_roll);
	#include "pseudoEffects/duik_shoulder.ffx.jsxinc"
	duik_shoulder = DuAEF.DuBinary.toFile(duik_shoulder);

	/**
	 * The pseudo effects needed by Duik
	 * @enum {File}
	 * @readonly
	 */
	DuAEF.Duik.PseudoEffects =
	{
		//autorig
		FOOT_ROLL: duik_foot_roll,
		SHOULDER: duik_shoulder,
		//camera
		TWOD_CAMERA: duik_2d_camera,
		//ik
		ONELAYER_IK: duik_1layer_ik,
		TWOLAYER_IK: duik_2layer_ik,
		THREELAYER_IK: duik_3layer_ik,
		BEZIER_IK: duik_bezier_ik,
		BEZIER_IK_CURVE: duik_bezier_ik_curve,
		BEZIER_IK_LAYER: duik_bezier_ik_layer,
		IK: duik_ik,
		//connector
		ONED_CONNECTOR: duik_1d_connector,
		TWOD_CONNECTOR: duik_2d_connector,
		THREED_CONNECTOR: duik_3d_connector,
		COLOR_CONNECTOR: duik_color_connector,
		//bones
		BONE: duik_bone,
		BONE_LINKER: duik_bone_linker,
		//constraints
		ATTACHMENT_OPTIONS: duik_attachment_options,
		ATTACHMENT: duik_attachment,
		PARENT: duik_parent,
		PATH: duik_path,
		POSITION: duik_position,
		ORIENTATION: duik_orientation,
		//Controller
		CONTROLLER: duik_controller,
		CONTROLLER_SLIDER: duik_controller_slider,
		CONTROLLER_DOUBLE_SLIDER: duik_controller_dslider,
		CONTROLLER_ANGLE: duik_controller_angle,
		//X-Sheet
		X_SHEET: duik_x_sheet,
		//Motion trail
		MOTION_TRAIL: duik_motion_trail,
		//Paint Rig
		PAINT_RIG: duik_paint_rig,
		//Blink
		COLOR_BLINK: duik_color_blink,
		ONED_BLINK: duik_1d_blink,
		TWOD_BLINK: duik_2d_blink,
		THREED_BLINK: duik_3d_blink,
		//Spring
		ONED_SPRING: duik_1d_spring,
		MULTID_SPRING: duik_multid_spring,
		SPATIAL_SPRING: duik_spatial_spring,
		//Effector
		EFFECTOR: duik_effector,
		//Wheel
		WHEEL: duik_wheel,
		//Swing
		ONED_SWING: duik_1d_swing,
		SPATIAL_SWING: duik_spatial_swing,
		TWOD_SWING: duik_2d_swing,
		THREED_SWING: duik_3d_swing,
		//wiggle
		ONED_WIGGLE: duik_1d_wiggle,
		ONED_MULTIWIGGLE: duik_1d_multiwiggle,
		TWOD_WIGGLE: duik_2d_wiggle,
		THREED_WIGGLE: duik_3d_wiggle,
		//list
		ONED_LIST: duik_1d_list,
		TWOD_LIST: duik_2d_list,
		THREED_LIST: duik_3d_list,
		//structures
		STRUCTURE_ELEMENT: duik_structure
	};

	/**
	 * The pseudo effects match names
	 * @enum {string}
	 * @readonly
	 */
	DuAEF.Duik.PseudoEffectsMatchNames =
	{
		//autorig
		FOOT_ROLL: "Pseudo/DUIK foot roll",
		SHOULDER: "Pseudo/DUIK shoulder",
		//camera
		TWOD_CAMERA: "Pseudo/DUIK 2d camera",
		//ik
		ONELAYER_IK: "Pseudo/DUIK 1layer ik",
		TWOLAYER_IK: "Pseudo/DUIK 2layer ik",
		THREELAYER_IK: "Pseudo/DUIK 3layer ik",
		BEZIER_IK: "Pseudo/DUIK bezier ik",
		BEZIER_IK_CURVE: "Pseudo/DUIK bezier ik curve",
		BEZIER_IK_LAYER: "Pseudo/DUIK bezier ik layer",
		IK: "Pseudo/DUIK ik",
		//connector
		ONED_CONNECTOR: "Pseudo/DUIK 1d connector",
		TWOD_CONNECTOR: "Pseudo/DUIK 2d connector",
		THREED_CONNECTOR: "Pseudo/DUIK 3d connector",
		COLOR_CONNECTOR: "Pseudo/DUIK color connector",
		//bones
		BONE: "Pseudo/DUIK bone",
		BONE_LINKER: "Pseudo/DUIK bone linker",
		//constraints
		ATTACHMENT_OPTIONS: "Pseudo/DUIK attachment options",
		ATTACHMENT: "Pseudo/DUIK attachment",
		PARENT: "Pseudo/DUIK parent",
		PATH: "Pseudo/DUIK path",
		POSITION: "Pseudo/DUIK position",
		ORIENTATION: "Pseudo/DUIK orientation",
		//Controller
		CONTROLLER: "Pseudo/DUIK controller",
		CONTROLLER_SLIDER: "Pseudo/DUIK controller slider",
		CONTROLLER_DOUBLE_SLIDER: "Pseudo/DUIK controller dslider",
		CONTROLLER_ANGLE: "Pseudo/DUIK controller angle",
		//X-Sheet
		X_SHEET: "Pseudo/DUIK x sheet",
		//Motion trail
		MOTION_TRAIL: "Pseudo/DUIK motion trail",
		//Paint Rig
		PAINT_RIG: "Pseudo/DUIK paint rig",
		//Blink
		COLOR_BLINK: "Pseudo/DUIK color blink",
		ONED_BLINK: "Pseudo/DUIK 1d blink",
		TWOD_BLINK: "Pseudo/DUIK 2d blink",
		THREED_BLINK: "Pseudo/DUIK 3d blink",
		//Spring
		ONED_SPRING: "Pseudo/DUIK 1d spring",
		MULTID_SPRING: "Pseudo/DUIK multid spring",
		SPATIAL_SPRING: "Pseudo/DUIK spatial spring",
		//Effector
		EFFECTOR: "Pseudo/DUIK effector",
		//Wheel
		WHEEL: "Pseudo/DUIK wheel",
		//Swing
		ONED_SWING: "Pseudo/DUIK 1d swing",
		SPATIAL_SWING: "Pseudo/DUIK spatial swing",
		TWOD_SWING: "Pseudo/DUIK 2d swing",
		THREED_SWING: "Pseudo/DUIK 3d swing",
		//wiggle
		ONED_WIGGLE: "Pseudo/DUIK 1d wiggle",
		ONED_MULTIWIGGLE: "Pseudo/DUIK 1d multiwiggle",
		TWOD_WIGGLE: "Pseudo/DUIK 2d wiggle",
		THREED_WIGGLE: "Pseudo/DUIK 3d wiggle",
		//list
		ONED_LIST: "Pseudo/DUIK 1d list",
		TWOD_LIST: "Pseudo/DUIK 2d list",
		THREED_LIST: "Pseudo/DUIK 3d list",
		//structures
		STRUCTURE_ELEMENT: "Pseudo/DUIK structure"
	};
})();

/**
 * The different types of layers created by Duik
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.LayerTypes =
{
	MOTION_TRAIL: 'motionTrail',
	STRUCTURE: 'structure',
	X_SHEET: 'xSheet',
	CEL: 'cel',
	EFFECTOR: 'effector',
	CONTROLLER: 'controller',
	TWOD_CAMERA_LAYER: '2dCameraLayer',
	ZERO: 'zero',
	BONE: 'bone',
	NULL: 'null'
}

//undocumented low-level enum used by Duik
DuAEF.Duik.MarkerParameters =
{
	AUTORIG_ELEMENT: "autorigElementType",
	AUTORIG_ANIMAL_TYPE: "autorigAnimalType",
	AUTORIG_ELEMENT_NUMBER: "autorigElementNumber",
	AUTORIG_LIMB: 'autorigLimb',
	AUTORIG_ID: 'autorigId',
	STRUCTURE_ID: "structureId"
}

/**
 * Predefined sizes
 * @enum {int}
 * @readonly
 */
DuAEF.Duik.Sizes =
{
	SMALL: 0,
	MEDIUM: 1,
	LARGE: 2,
	CUSTOM: 3
};

//undocumented low-level function used by Duik
DuAEF.Duik.setDuikMarker = function(layer,displayName,layerType)
{
	if (layerType == undefined) layerType = displayName.toLowerCase();
	var marker = layer.property('ADBE Marker').valueAtTime(0,true);
	marker.comment = displayName;
	var params = marker.getParameters();
	params.duik = layerType;
	marker.setParameters(params);
	layer.property('ADBE Marker').setValueAtTime(0,marker);
}

//undocumented low-level function used by Duik
DuAEF.Duik.getDuikMarker = function(layer)
{
	var markerProp = layer.property('ADBE Marker');
	for (var i = 1, num = markerProp.numKeys; i <= num; i++)
	{
		var marker = markerProp.keyValue(i);
		var params = marker.getParameters();
		if (params.duik) return marker;
	}
	return null;
}

//undocumented low-level function used by Duik
DuAEF.Duik.getDuikMarkerParameters = function(layer)
{
	var marker = DuAEF.Duik.getDuikMarker(layer);
	if (!marker) return null;
	return marker.getParameters();
}

//undocumented low-level function used by Duik
DuAEF.Duik.setDuikMarkerParameter = function(layer,name,key)
{
	var markerProp = layer.property('ADBE Marker');
	for (var i = 1, num = markerProp.numKeys; i <= num; i++)
	{
		var marker = markerProp.keyValue(i);
		var params = marker.getParameters();
		if (params.duik)
		{
			params[name] = key;
			marker.setParameters(params);
			layer.property('ADBE Marker').setValueAtTime(markerProp.keyTime(i),marker);
		}
	}
}

/**
 * Gets layers previously created by Duik
 * @memberof DuAEF.Duik
 * @param {DuAEF.Duik.LayerTypes} [layerType] - The type of the layer.
 * @param {boolean} [selectedOnly=false] - Wether to search only in the layer selection
 * @param {CompItem} [comp] - The composition
 * @return {Layer[]}	The Structure or null if there is no active composition
 */
DuAEF.Duik.getLayers = function(layerType,selectedOnly,comp)
{
	if (layerType == undefined) layerType = '';
	if (comp == undefined) comp = DuAEF.DuAE.Project.getActiveComp();
	if (selectedOnly == undefined) selectedOnly = false;

	var layers = comp.layers;
	if (selectedOnly) layers = comp.selectedLayers;

	if (layers.length == 0) return [];

	var it = new Iterator(layers);
	var found = [];
	it.do(function(layer) {
		var params = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!params) return;
		if (layerType == '' || params.duik == layerType) found.push(layer);
	});

	return found;
}

/**
 * Gets the first layer of a kind previously created by Duik
 * @memberof DuAEF.Duik
 * @param {DuAEF.Duik.LayerTypes} layerType - The type of the layer.
 * @param {boolean} [selectedOnly=false] - Wether to search only in the layer selection
 * @param {CompItem} [comp] - The composition
 * @return {Layer[]}	The Structure or null if there is no active composition
 */
DuAEF.Duik.getLayer = function(layerType,selectedOnly,comp)
{
	if (comp == undefined) comp = DuAEF.DuAE.Project.getActiveComp();
	if (selectedOnly == undefined) selectedOnly = false;

	var layers = comp.layers;
	if (selectedOnly) layers = comp.selectedLayers;

	if (layers.length == 0) return null;

	var it = new Iterator(layers);
	while(layer = it.next())
	{
		var params = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!params) continue;
		if (params.duik == layerType) return layer;
	}
	return null;
}

//low-level undocumented function
DuAEF.Duik.getLayerType = function(layer)
{
	var params = DuAEF.Duik.getDuikMarkerParameters(layer);
	if (!params) return '';
	return params.duik;
}

//low-level undocumented function
DuAEF.Duik.isLayerType = function(layer,layerType)
{
	return DuAEF.Duik.getLayerType(layer) == layerType;
}

//low-level undocumented function
DuAEF.Duik.removeDuikPrefix = function(name)
{
	return name.slice(name.indexOf(' | ') + 3);
}

#include DuikAnimationLib.jsxinc
#include DuikAutomationLib.jsxinc
#include DuikAutorigLib.jsxinc
#include DuikBoneLib.jsxinc
#include DuikCameraLib.jsxinc
#include DuikControllerLib.jsxinc
#include DuikRiggingLib.jsxinc
#include DuikStructuresLib.jsxinc
