function ui_buildConstraints ( ui_constraintsGroup )
{
    debugLog.startTimer( "Loading constraints." );

    //========== FUNCTIONS =========

    function setCurrentConstraintsPanel ( panel )
    {
        if ( panel == undefined ) panel = 0;

        ui_constraintsGeneralGroup.visible = panel == 0;
        ui_pathConstraintGroup.visible = panel == 1;
        ui_bonesGroup.visible = panel == 2;
        ui_connectorGroup.visible = panel == 3;
        ui_parentCompGroup.visible = panel == 6;
        ui_blenderSetupGroup.visible = panel == 7;
    }

    function bonesEditInit ()
    {
        DuAEF.Duik.Bone.size = settings.data.boneSize;
        DuAEF.Duik.Bone.sizeHint = settings.data.boneSizeHint;

        ui_bonesEditSizeEdit.setText( settings.data.boneSize );
        ui_bonesEditSizeList.setCurrentIndex( settings.data.boneSizeHint );
        if ( settings.data.boneSizeHint == 3 )
        {
            ui_bonesEditSizeEdit.enabled = true;
        }
        else
        {
            ui_bonesEditSizeEdit.enabled = false;
        }

        ui_bonesEditColor.setText( settings.data.boneColor );
        var color = DuAEF.DuJS.Color.hexToRGB( ui_bonesEditColor.text );
        DuAEF.Duik.Bone.color = color;
        DuAEF.DuScriptUI.setTextColor( ui_bonesEditColorLabel, color );
    }

    function connectorInit ()
    {
        connector.masterProp = null;
        connector.masterLayer = null;
        connector.type = 1;
        connectorMasterLabel.text = "Choose / create a controlling prop.";
        ui_connectorMaximumEdit.suffix = '';
        ui_connectorMinimumEdit.suffix = '';
        ui_connectorMinimumEdit.setText( "0" );
        ui_connectorMaximumEdit.setText( "100" );
        ui_connectorPropList.removeAll();
        ui_connectorPropList.enabled = false;
        ui_connectorPropLabel.enabled = false;
        ui_connectorAxisList.removeAll();
        ui_connectorAxisList.enabled = false;
        ui_connectorAxisLabel.enabled = false;
        ui_connectorAxisLabel.text = "Axis: ";
        ui_connectorTypeList.selection = 0;
        ui_connectorTypeLabel.enabled = false;
        ui_connectorTypeList.enabled = false;
        ui_connectorMinimumEdit.setSuffix('');
        ui_connectorMaximumEdit.setSuffix('');
        connectorFormReady(false);
        connectorReady(false);
    }

    function connectorLoadMasterProperty()
    {
        //if no property, back to init
        if ( !connector.masterProp )
        {
            connectorInit();
            return;
        }

        //check dimensions and init
        var info = new PropertyInfo( connector.masterProp );
        var dim = info.dimensions;
        if ( dim == 0 )
        {
            alert( "This property cannot be used as a master property with the connector." );
            connectorInit();
            return;
        }
        else if ( dim == 1 )
        {
            ui_connectorAxisList.removeAll();
            ui_connectorAxisList.enabled = false;
            ui_connectorAxisLabel.text = "Axis: ";
        }
        else if ( dim == 2 )
        {
            ui_connectorAxisList.removeAll();
            ui_connectorAxisList.enabled = true;
            ui_connectorAxisList.add( 'item', 'X' );
            ui_connectorAxisList.add( 'item', 'Y' );
            ui_connectorAxisList.selection = 0;
            ui_connectorAxisLabel.text = "Axis: ";
        }
        else if ( dim == 3 )
        {
            ui_connectorAxisList.removeAll();
            ui_connectorAxisList.enabled = true;
            ui_connectorAxisList.add( 'item', 'X' );
            ui_connectorAxisList.add( 'item', 'Y' );
            ui_connectorAxisList.add( 'item', 'Z' );
            ui_connectorAxisList.selection = 0;
            ui_connectorAxisLabel.text = "Axis: ";
        }
        else if ( dim == 4 )
        {
            ui_connectorAxisList.removeAll();
            ui_connectorAxisList.enabled = true;
            ui_connectorAxisList.add( 'item', "Red" );
            ui_connectorAxisList.add( 'item', "Green" );
            ui_connectorAxisList.add( 'item', "Blue" );
            ui_connectorAxisList.add( 'item', "Alpha" );
            ui_connectorAxisList.add( 'item', "Hue" );
            ui_connectorAxisList.add( 'item', "Saturation" );
            ui_connectorAxisList.add( 'item', "Value" );
            ui_connectorAxisList.selection = 4;
            ui_connectorAxisLabel.text = "Channel: ";
            if ( app.project.bitsPerChannel == 8 ) ui_connectorMaximumEdit.setText( '255' );
            else if ( app.project.bitsPerChannel == 16 ) ui_connectorMaximumEdit.setText( '65536' );
            else if ( app.project.bitsPerChannel == 32 ) ui_connectorMaximumEdit.setText( '1.0' );
        }

        ui_connectorMinimumEdit.setSuffix( info.unit );
        ui_connectorMaximumEdit.setSuffix( info.unit );

        //use a percent if this is a 2D Slider
        if (connector.masterProp.matchName.indexOf( DuAEF.Duik.PseudoEffects.CONTROLLER_DOUBLE_SLIDER.matchName ) == 0) 
        {
            ui_connectorMinimumEdit.setSuffix( "%" );
            ui_connectorMaximumEdit.setSuffix( "%" );
        }

        ui_connectorAxisList_changed();
        connectorReady();
    }

    function connectorPick()
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        if (layers.length == 0) return;

        connectorInit();

        var layer = layers[layers.length - 1];

        //get the selected property if any and use it
        var props = DuAEF.DuAE.Comp.getSelectedProps();
        if ( props.length > 0 )
        {
            var propInfo = props[ props.length - 1 ];
            var prop = propInfo.getProperty();
            if ( prop.propertyType == PropertyType.PROPERTY )
            {
                connector.masterProp = propInfo;
                connector.layer = propInfo.layer;
                connectorMasterLabel.text = propInfo.layer.index + " - " + propInfo.layer.name + " # " + prop.name;
                connectorLoadMasterProperty();
                return;
            }
        }

        //look for a Duik controller 

        //slider
        var effect = layer.effect ( DuAEF.Duik.PseudoEffects.CONTROLLER_SLIDER.matchName );
        if ( effect )
        {
            connector.masterLayer = layer;
            connector.masterProp = new PropertyInfo( effect( DuAEF.Duik.PseudoEffects.CONTROLLER_SLIDER.index[ 'Value_Slider' ] ) );
            ui_connectorMinimumEdit.setText( '-100' );
            ui_connectorMaximumEdit.setText( '100' );
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "Slider";
            connectorLoadMasterProperty();
            return;
        }
        
        //2d slider
        effect = layer.effect( DuAEF.Duik.PseudoEffects.CONTROLLER_DOUBLE_SLIDER.matchName );
        if ( effect )
        {
            connector.masterLayer = layer;
            connector.masterProp = new PropertyInfo( effect( DuAEF.Duik.PseudoEffects.CONTROLLER_DOUBLE_SLIDER.index[ '2D Value_Point' ] ) );
            ui_connectorMinimumEdit.setText( '-100' );
            ui_connectorMaximumEdit.setText( '100' );
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "2D Slider";
            connectorLoadMasterProperty();
            return;
        }

        //angle
        effect = layer.effect( DuAEF.Duik.PseudoEffects.CONTROLLER_ANGLE.matchName );
        if ( effect )
        {
            connector.masterLayer = layer;
            connector.masterProp = new PropertyInfo( effect( DuAEF.Duik.PseudoEffects.CONTROLLER_ANGLE.index[ 'Angle_Angle' ] ) );
            connector.masterLayer = layer;
            ui_connectorMinimumEdit.setText( '0' );
            ui_connectorMaximumEdit.setText( '360' );
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "Angle";
            connectorLoadMasterProperty();
            return;
        }

        //effector
        effect = layer.effect( DuAEF.Duik.PseudoEffects.EFFECTOR.matchName );
        if ( effect )
        {
            connector.masterProp = null;
            connector.masterLayer = layer;
            connector.type = 2;
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "Spatial Effector";
            ui_connectorPropList.removeAll();
            ui_connectorPropList.enabled = true;
            ui_connectorPropList.add( 'item', "Circle (transition)" );
            ui_connectorPropList.add( 'item', "Circle (ping pong)" );
            ui_connectorPropList.add( 'item', "Line (transition)" );
            ui_connectorPropList.add( 'item', "Line (ping pong)" );
            ui_connectorPropList.selection = 0;
            ui_connectorMinimumEdit.setText( '100' );
            ui_connectorMaximumEdit.setText( '200' );
            ui_connectorMinimumEdit.setSuffix( DuAEF.DuAE.Units.PIXELS );
            ui_connectorMaximumEdit.setSuffix( DuAEF.DuAE.Units.PIXELS );
            connectorReady();
            return;
        }

        //expose transform
        effect = layer.effect( DuAEF.Duik.PseudoEffects.EXPOSE_TRANSFORM.matchName );
        if ( effect )
        {
            connector.masterLayer = layer;
            connector.masterProp = null;
            connector.type = 4;
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "Expose Transform";
            ui_connectorPropList.removeAll();
            ui_connectorPropList.enabled = true;
            ui_connectorPropList.add( 'item', "Absolute position (2D)" );
            ui_connectorPropList.add( 'item', "Relative position (2D)" );
            ui_connectorPropList.add( 'item', "Distance (2D)" );
            ui_connectorPropList.add( 'item', "Absolute position (3D)" );
            ui_connectorPropList.add( 'item', "Relative position (3D)" );
            ui_connectorPropList.add( 'item', "Distance (3D)" );
            ui_connectorPropList.add( 'item', "Absolute orientation" );
            ui_connectorPropList.add( 'item', "Relative orientation" );
            ui_connectorPropList.add( 'item', "Angle" );
            ui_connectorPropList.selection = 2;
            connector.masterProp = effect( DuAEF.Duik.PseudoEffects.EXPOSE_TRANSFORM.index['2D Position (Comp projection)_2D Distance_Slider'] );
            connectorLoadMasterProperty();
            return;
        }

        //IK
        effect = layer.effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName );
        if ( effect )
        {
            connector.masterLayer = layer;
            connector.masterProp = null;
            connector.type = 5;
            connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "IK";
            ui_connectorPropList.removeAll();
            ui_connectorPropList.enabled = true;
            ui_connectorPropList.add( 'item', "IK Length" );
            ui_connectorPropList.add( 'item', "Upper Stretch" );
            ui_connectorPropList.add( 'item', "Lower Stretch" );
            ui_connectorPropList.selection = 0;
            connector.masterProp = effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikLengthSlider );
            connectorLoadMasterProperty();
            return;
        }
    }

    function connectorFormReady(isReady)
    {
        isReady = def(isReady, true, false);
        
        ui_connectorForm.enabled = isReady;

        if (isReady)
        {
            ui_connectorAxisLabel.enabled = connector.type == 1 || connector.type == 3 || connector.type == 4;
            ui_connectorAxisList.enabled = connector.type == 1 || connector.type == 3 || connector.type == 4;

            ui_connectorTypeLabel.enabled = connector.type == 1 || connector.type == 4 || connector.type == 5;
            ui_connectorTypeList.enabled = connector.type == 1 || connector.type == 4 || connector.type == 5;

            ui_connectorPropLabel.enabled = connector.type == 2 || connector.type == 4 || connector.type == 5;
            ui_connectorPropList.enabled = connector.type == 2 || connector.type == 4 || connector.type == 5;
        }
        else
        {
            ui_connectorAxisLabel.enabled = false;
            ui_connectorAxisList.enabled = false;

            ui_connectorTypeLabel.enabled = false;
            ui_connectorTypeList.enabled = false;

            ui_connectorPropLabel.enabled = false;
            ui_connectorPropList.enabled = false;
        }
        
    }

    function connectorReady(isReady)
    {
        isReady = def(isReady, true, false);

        connectorFormReady(isReady);
        
        if (isReady)
        {
            ui_connectorChildrenGroup.enabled = true;

            ui_connectorPropertiesButton.icon.image = ui_connectorPropertiesButton.standardImage = DuAEF.DuBinary.toFile( w25_allproperties_l );

            if (connector.type == 1 || connector.type == 4  || connector.type == 5) ui_connectorOpacitiesButton.icon.image = ui_connectorOpacitiesButton.standardImage = DuAEF.DuBinary.toFile( w25_opacity_l );
            else ui_connectorOpacitiesButton.enabled = false;

            if ( settings.data.uiMode < 2 )
            {
                ui_connectorSeparator3.enabled = true;
            }


        }
        else 
        {
            ui_connectorChildrenGroup.enabled = false;
            ui_connectorPropertiesButton.icon.image = ui_connectorPropertiesButton.standardImage = DuAEF.DuBinary.toFile( w25_allproperties_m );
            ui_connectorPropertiesButton.enabled = true;
            ui_connectorOpacitiesButton.icon.image = ui_connectorOpacitiesButton.standardImage = DuAEF.DuBinary.toFile( w25_opacity_m );
            ui_connectorOpacitiesButton.enabled = true;

            if ( settings.data.uiMode < 2 )
            {
                ui_connectorSeparator3.enabled = false;
            }
        }

    }

    //====== EVENTS ================

    function ui_connectorButton_clicked ()
    {
        Duik.constraints.quickConnector();
    }

    function ui_connectorPropList_changed ()
    {
        if (connector.type == 4)
        {
            var propid = 0;
            if ( ui_connectorPropList.selection ) propid = ui_connectorPropList.selection.index;
            var effect = connector.masterLayer.effect( DuAEF.Duik.PseudoEffects.EXPOSE_TRANSFORM.matchName );
            var index = DuAEF.Duik.PseudoEffects.EXPOSE_TRANSFORM.index;
            if (propid == 0) connector.masterProp = effect( index['2D Position (Comp projection)_Absolute_Point'] );
            if (propid == 1) connector.masterProp = effect( index['2D Position (Comp projection)_Relative to reference_Point'] );
            if (propid == 2) connector.masterProp = effect( index['2D Position (Comp projection)_2D Distance_Slider'] );
            if (propid == 3) connector.masterProp = effect( index['3D Position (World)_Absolute_Point3D'] );
            if (propid == 4) connector.masterProp = effect( index['3D Position (World)_Relative to reference_Point3D'] );
            if (propid == 5) connector.masterProp = effect( index['3D Position (World)_3D Distance_Slider'] );
            if (propid == 6) connector.masterProp = effect( index['2D Orientation_Absolute_Angle'] );
            if (propid == 7) connector.masterProp = effect( index['2D Orientation_Relative to reference_Angle'] );
            if (propid == 8) connector.masterProp = effect( index['Angle (Layer-This-Reference)_Angle'] );
            connectorLoadMasterProperty();
        }
        else if (connector.type == 5)
        {
            var propid = 0;
            if ( ui_connectorPropList.selection ) propid = ui_connectorPropList.selection.index;
            var effect = connector.masterLayer.effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName );
            if (propid == 0) connector.masterProp = effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikLengthSlider );
            if (propid == 1) connector.masterProp = effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperScaleSlider );
            if (propid == 2) connector.masterProp = effect( DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerScaleSlider );
            connectorLoadMasterProperty();
        }
        else if (connector.type == 2)
        {
            var propid = 0;
            if ( ui_connectorPropList.selection ) propid = ui_connectorPropList.selection.index;
            var effect = connector.masterLayer.effect( DuAEF.Duik.PseudoEffects.EFFECTOR.matchName );
            var index = DuAEF.Duik.PseudoEffects.EFFECTOR.index;
            if (propid == 0 || propid == 1) effect( index['Mode_Popup'] ).setValue(1);
            if (propid == 2 || propid == 3) effect( index['Mode_Popup'] ).setValue(2);
            if (propid == 0 || propid == 2) effect( index['Interpolation_Type_Popup'] ).setValue(1);
            if (propid == 1 || propid == 3) effect( index['Interpolation_Type_Popup'] ).setValue(2);
        }
        
    }

    function ui_connectorAxisList_changed ()
    {
        if (!connector.masterProp) return;

        var axis = 0;
        if ( ui_connectorAxisList.selection ) axis = ui_connectorAxisList.selection.index;
        var preExpression = true;
        if ( connector.masterProp.numKeys < 2 ) preExpression = false;
        var range = DuAEF.DuAE.Property.getRange( connector.masterProp, axis, preExpression, true );

        if ( range.length != 2 ) return;

        if (range[ 0 ] < parseFloat(ui_connectorMinimumEdit.text) ) ui_connectorMinimumEdit.setText( Math.floor( range[ 0 ] ) );
        if (range[ 1 ] > parseFloat(ui_connectorMaximumEdit.text) ) ui_connectorMaximumEdit.setText( Math.floor( range[ 1 ] ) );
        
        if ( range[ 0 ] == range[ 1 ] ) return;
        ui_connectorMinimumEdit.setText( Math.floor( range[ 0 ] ) );
        ui_connectorMaximumEdit.setText( Math.floor( range[ 1 ] ) );
    }

    function ui_connectorTypeList_changed ()
    {
        if ( ui_connectorTypeList.selection.index == 0 )
        {
            ui_connectorAxisList.enabled = true;
            ui_connectorAxisList_changed();
        }
        else if ( ui_connectorTypeList.selection.index == 1 )
        {
            ui_connectorAxisList.enabled = false;
            if ( !connector.masterProp ) return;
            var vel = DuAEF.DuAE.Property.getMaxVelocity( connector.masterProp );
            ui_connectorMinimumEdit.setText( '0' );
            ui_connectorMaximumEdit.setText( Math.floor( vel * 100 ) / 100 );
        }
    }

    function ui_connectorMinimumEdit_changed ()
    {
        var effect = connector.masterLayer.effect( DuAEF.Duik.PseudoEffects.EFFECTOR.matchName );
        var index = DuAEF.Duik.PseudoEffects.EFFECTOR.index;
        effect( index['Inner limit_Slider'] ).setValue( parseFloat(ui_connectorMinimumEdit.text) );
    }

    function ui_connectorMaximumEdit_changed ()
    {
        var effect = connector.masterLayer.effect( DuAEF.Duik.PseudoEffects.EFFECTOR.matchName );
        var index = DuAEF.Duik.PseudoEffects.EFFECTOR.index;
        effect( index['Outter limit_Slider'] ).setValue( parseFloat(ui_connectorMaximumEdit.text) );
    }

    function ui_connectorPropertiesButton_clicked ()
    {
        var props = DuAEF.DuAE.Comp.getSelectedProps();
        if ( props.length == 0 ) return;


        if (connector.type == 1 || connector.type == 4 || connector.type == 5) //Property or expose transform or IK
        {
            var min = parseFloat( ui_connectorMinimumEdit.text );
            var max = parseFloat( ui_connectorMaximumEdit.text );
            var type = DuAEF.DuAE.Types.VALUE;
            if ( ui_connectorTypeList.selection.index == 1 ) type = DuAEF.DuAE.Types.VELOCITY;
            var axis = DuAEF.DuAE.Axis.X;
            if ( connector.masterProp.dimensions == 2 || connector.masterProp.dimensions == 3 )
            {
                if ( ui_connectorAxisList.selection.index == 1 ) axis = DuAEF.DuAE.Axis.Y;
                else if ( ui_connectorAxisList.selection.index == 2 ) axis = DuAEF.DuAE.Axis.Z;
            }
            else if ( connector.masterProp.dimensions == 4 )
            {
                if ( ui_connectorAxisList.selection.index == 0 ) axis = DuAEF.DuAE.Axis.RED;
                else if ( ui_connectorAxisList.selection.index == 1 ) axis = DuAEF.DuAE.Axis.GREEN;
                else if ( ui_connectorAxisList.selection.index == 2 ) axis = DuAEF.DuAE.Axis.BLUE;
                else if ( ui_connectorAxisList.selection.index == 3 ) axis = DuAEF.DuAE.Axis.ALPHA;
                else if ( ui_connectorAxisList.selection.index == 4 ) axis = DuAEF.DuAE.Axis.HUE;
                else if ( ui_connectorAxisList.selection.index == 5 ) axis = DuAEF.DuAE.Axis.SATURATION;
                else if ( ui_connectorAxisList.selection.index == 6 ) axis = DuAEF.DuAE.Axis.VALUE;
            }

            app.beginUndoGroup( 'Duik | ' + "Connector" );

            var effect = null;
            var it = new Iterator( props );
            it.do( function( p )
            {
                effect = DuAEF.Duik.Rigging.connector( p, connector.masterProp, effect, min, max, axis, type );
            } );

            app.endUndoGroup();
        }

        else if (connector.type == 2) //Effector
        {
            Duik.automation.effector(connector.masterLayer);
        }

        else if (connector.type == 3) //Effector Map
        {
            app.beginUndoGroup( 'Duik | ' + "Connector" );

            var effect = null;
            var it = new Iterator( props );
            it.do( function( p )
            {
                effect = DuAEF.Duik.Automation.mapEffector( p, connector.masterLayer, effect );
            } );

            //set values 
            var textureEffect = connector.masterLayer.effect(DuAEF.Duik.PseudoEffects.MAP_EFFECTOR.matchName);
            if (textureEffect)
            {
                textureEffect(DuAEF.Duik.PseudoEffects.MAP_EFFECTOR.index['Minimum_Slider']).setValue(parseFloat( ui_connectorMinimumEdit.text ));
                textureEffect(DuAEF.Duik.PseudoEffects.MAP_EFFECTOR.index['Maximum_Slider']).setValue(parseFloat( ui_connectorMaximumEdit.text ));
                textureEffect(DuAEF.Duik.PseudoEffects.MAP_EFFECTOR.index['Channel_Popup']).setValue(ui_connectorAxisList.selection.index+1);
            }

            app.endUndoGroup();
        }
        
    }

    function ui_connectorOpacitiesButton_clicked ()
    {
        var effect = null;
        var min = parseFloat( ui_connectorMinimumEdit.text );
        var max = parseFloat( ui_connectorMaximumEdit.text );
        var type = DuAEF.DuAE.Types.VALUE;
        if ( ui_connectorTypeList.selection.index == 1 ) type = DuAEF.DuAE.Types.VELOCITY;
        var axis = DuAEF.DuAE.Axis.X;
        if ( connector.masterProp.dimensions == 2 || connector.masterProp.dimensions == 3 )
        {
            if ( ui_connectorAxisList.selection.index == 1 ) axis = DuAEF.DuAE.Axis.Y;
            else if ( ui_connectorAxisList.selection.index == 2 ) axis = DuAEF.DuAE.Axis.Z;
        }
        else if ( connector.masterProp.dimensions == 4 )
        {
            if ( ui_connectorAxisList.selection.index == 0 ) axis = DuAEF.DuAE.Axis.RED;
            else if ( ui_connectorAxisList.selection.index == 1 ) axis = DuAEF.DuAE.Axis.GREEN;
            else if ( ui_connectorAxisList.selection.index == 2 ) axis = DuAEF.DuAE.Axis.BLUE;
            else if ( ui_connectorAxisList.selection.index == 3 ) axis = DuAEF.DuAE.Axis.ALPHA;
            else if ( ui_connectorAxisList.selection.index == 4 ) axis = DuAEF.DuAE.Axis.HUE;
            else if ( ui_connectorAxisList.selection.index == 5 ) axis = DuAEF.DuAE.Axis.SATURATION;
            else if ( ui_connectorAxisList.selection.index == 6 ) axis = DuAEF.DuAE.Axis.VALUE;
        }

        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;
        var layers = comp.selectedLayers;
        if ( layers.length == 0 ) return;

        app.beginUndoGroup( 'Duik | ' + "Connector" );

        DuAEF.DuAE.Layer.sequence( layers );
        var effect = null;
        var it = new Iterator( layers );
        it.do( function( layer )
        {
            effect = DuAEF.Duik.Rigging.connector( layer.transform.opacity, connector.masterProp, effect, min, max, axis, type );
        } );

        app.endUndoGroup();
    }

    function ui_connectorSliderButton_clicked()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if (!comp) return;

        //create controller
        var layer = Duik.controllers.create( DuAEF.Duik.Controller.Types.SLIDER )[0];

        //ready
        connectorPick();
    }

    function ui_connectorDoubleSliderButton_clicked()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if (!comp) return;

        //create controller
        var layer = Duik.controllers.create( DuAEF.Duik.Controller.Types.DOUBLE_SLIDER )[0];

        //ready
        connectorPick();
    }

    function ui_connectorAngleButton_clicked()
    {

        var comp = DuAEF.DuAE.Project.getActiveComp();
        if (!comp) return;

        //create controller
        var layer = Duik.controllers.create( DuAEF.Duik.Controller.Types.ANGLE )[0];

        //ready
        connectorPick();
    }

    function ui_connectorEffectorButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if (!comp) return;

        app.beginUndoGroup('Duik | ' + "Create Effector");
        //create the controller 
        var layer = DuAEF.Duik.Automation.createEffectorController();
        app.endUndoGroup();

        //ready
        connectorPick();
    }

    function ui_connectorMapEffectorButton_clicked ()
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        if (layers.length == 0) return;

        connectorInit();

        var layer = layers[layers.length - 1];

        connector.masterProp = null;
        connector.masterLayer = layer;
        connector.type = 3;
        connectorMasterLabel.text = layer.index + " - " + layer.name + " # " + "Texture";

        ui_connectorAxisList.removeAll();
        ui_connectorAxisList.enabled = true;
        ui_connectorAxisList.add( 'item', "Red" );
        ui_connectorAxisList.add( 'item', "Green" );
        ui_connectorAxisList.add( 'item', "Blue" );
        ui_connectorAxisList.add( 'item', "Hue" );
        ui_connectorAxisList.add( 'item', "Saturation" );
        ui_connectorAxisList.add( 'item', "Luminosity" );
        ui_connectorAxisList.add( 'item', "Alpha" );
        ui_connectorAxisList.selection = 5;
        ui_connectorAxisLabel.text = "Channel: ";
        ui_connectorMaximumEdit.suffix = '%';
        ui_connectorMaximumEdit.setText( '100' );
        ui_connectorMinimumEdit.suffix = '%';
        ui_connectorMinimumEdit.setText('0');
        
        connectorReady();
    }

    function ui_connectorEtmButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
	    if (!comp) return;

        DuAEF.DuAE.App.beginUndoGroup("Expose Transform");

        var layers = DuAEF.DuAE.Comp.unselectLayers();
        var ctrl;
        if (layers.length == 0) ctrl = DuAEF.Duik.Rigging.exposeTransform(comp);
        else ctrl = DuAEF.Duik.Rigging.exposeTransform(comp,layers[0]);

        ctrl.selected = true;

        DuAEF.DuAE.App.endUndoGroup();

        //ready
        connectorPick();
    }

    function ui_bonesEditSizeList_changed ()
    {
        var index = ui_bonesEditSizeList.index;
        if ( index == 3 )
        {
            ui_bonesEditSizeEdit.enabled = true;
        }
        else
        {
            ui_bonesEditSizeEdit.enabled = false;
        }
        DuAEF.Duik.Bone.sizeHint = index;
        settings.data.boneSizeHint = index;
        settings.save();

        ui_bonesEditSizeValidButton_clicked();
    }

    function ui_bonesEditSizeEdit_changed ()
    {
        DuAEF.Duik.Bone.size = parseInt( ui_bonesEditSizeEdit.text );
        settings.data.boneSize = DuAEF.Duik.Bone.size;
        settings.save();
        ui_bonesEditSizeValidButton_clicked();
    }

    function ui_bonesEditColor_changed ()
    {
        settings.data.boneColor = ui_bonesEditColor.text;
        settings.save();

        var color = DuAEF.DuJS.Color.hexToRGB( ui_bonesEditColor.text );
        DuAEF.Duik.Controller.color = color;
        DuAEF.DuScriptUI.setTextColor( ui_bonesEditColorLabel, color );
        DuAEF.Duik.Bone.color = color;

        ui_bonesEditColorValidButton_clicked();
    }

    function ui_bonesEditColor_clicked ()
    {
        var color = colorPicker( ui_bonesEditColor.text );
        ui_bonesEditColor.setText( DuAEF.DuJS.Color.rgbToHex( color ) );
        ui_bonesEditColor_changed();
    }

    function ui_bonesEditSizeValidButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        var bones = DuAEF.Duik.Bone.getBones( comp, true );
        if ( bones.length == 0 ) return;

        app.beginUndoGroup( 'Duik - ' + "Set bone size" );
        for ( var i = 0; i < bones.length; i++ )
        {
            bones[ i ].setSize();
        }
        app.endUndoGroup();
    }

    function ui_bonesEditRandomColorButton_clicked ()
    {
        var color = DuAEF.DuJS.Color.random();
        ui_bonesEditColor.setText( DuAEF.DuJS.Color.rgbToHex( color ) );
        ui_bonesEditColor_changed();
    }

    function ui_bonesEditColorValidButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        var bones = DuAEF.Duik.Bone.getBones( comp, true );
        if ( bones.length == 0 ) return;

        var color = DuAEF.DuJS.Color.hexToRGB( ui_bonesEditColor.text );


        app.beginUndoGroup( 'Duik - ' + "Set bone color" );
        for ( var i = 0, num = bones.length; i < num; i++ )
        {
            bones[ i ].setColor( color );
        }
        app.endUndoGroup();
    }

    function ui_bonesEditSetButton_clicked ()
    {
        ui_bonesEditSizeValidButton_clicked();
        ui_bonesEditColorValidButton_clicked();
    }

    function ui_bonesEditGetButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        //get from first element
        var bones = DuAEF.Duik.Bone.getBones( comp, true );

        if ( bones.length >= 0 )
        {
            var effect = bones[ 0 ].effect;
            var color = effect( 1 ).value;
            var size = effect( 2 ).value;
            settings.data.boneSize = size;
            settings.data.boneSizeHint = DuAEF.Duik.Sizes.CUSTOM;
            settings.data.boneColor = DuAEF.DuJS.Color.rgbToHex( color );
            bonesEditInit();
        }
    }

    function ui_bonesEditBakeButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        var bones = DuAEF.Duik.Bone.getBones( comp, true );
        if ( bones.length == 0 ) return;

        app.beginUndoGroup( 'Duik - ' + "Bake bones appearance" );
        for ( var i = 0, num = bones.length; i < num; i++ )
        {
            bones[ i ].bakeAppearence();
        }
        app.endUndoGroup();
    }

    function ui_bonesSelectButton_clicked ()
    {
        var bones = DuAEF.Duik.Bone.getBones();
        if ( bones.length == 0 ) return;

        app.beginUndoGroup( 'Duik | ' + "Select bones" );
        DuAEF.DuAE.Comp.unselectLayers();
        for ( var i = 0; i < bones.length; i++ )
        {
            bones[ i ].layer.selected = true;
        }
        app.endUndoGroup();
    }

    function ui_bonesShowHideButton_clicked ( invert )
    {
        if ( typeof invert === 'undefined' ) invert = false;
        var bones = DuAEF.Duik.Bone.getBones();

        if ( bones.length == 0 ) return;

        app.beginUndoGroup( 'Duik | ' + "Show/hide bones" );
        var visible = !bones[ 0 ].layer.enabled;
        for ( var i = 0; i < bones.length; i++ )
        {
            if ( invert ) bones[ i ].layer.enabled = !bones[ i ].layer.enabled;
            else bones[ i ].layer.enabled = visible;
        }
        app.endUndoGroup();
    }

    function ui_bonesButton_clicked ( randomColor, tangents )
    {
        Duik.constraints.bones(
            randomColor,
            tangents
        );
    }

    function ui_autoParentButton_clicked ()
    {
        Duik.constraints.autoParent();
    }

    function ui_autoParentButton_altClicked ()
    {
        Duik.constraints.autoParent(true);
    }

    function ui_parentButton_clicked ()
    {
        Duik.constraints.parentConstraint();
    }

    function ui_pathConstraintButton_clicked ()
    {
        ok = Duik.constraints.pathConstraint();
        if (!ok)
        {
            pathConstraintPathProp = null;
            ui_pathConstraintLabel.text = "Select path...";
            ui_pathConstraintValidButton.enabled = false;
            if (settings.data.uiMode < 2) ui_pathConstraintSeparator.enabled = false;
            ui_pathConstraintValidButton.icon.image = ui_pathConstraintValidButton.standardImage = DuAEF.DuBinary.toFile( w25_pathconstraint_m );
            pathConstraintPathProp = null;
            setCurrentConstraintsPanel( 1 );
        }
    }

    function ui_pathConstraintPickButton_clicked ()
    {
        var props = DuAEF.DuAE.Comp.getSelectedProps( PropertyValueType.SHAPE );
        if ( props.length == 0 )
        {
            return;
        }

        pathConstraintPathProp = props.pop();
        var parentProp = pathConstraintPathProp.getProperty().parentProperty;
        ui_pathConstraintLabel.text = pathConstraintPathProp.layer.index + " - " + pathConstraintPathProp.layer.name + " # " + parentProp.name;
        ui_pathConstraintValidButton.enabled = true;
        if (settings.data.uiMode < 2) ui_pathConstraintSeparator.enabled = true;
        ui_pathConstraintValidButton.icon.image = ui_pathConstraintValidButton.standardImage = DuAEF.DuBinary.toFile( w25_pathconstraint_l );
    }

    function ui_pathConstraintValidButton_clicked ()
    {
        Duik.constraints.pathConstraint(
            pathConstraintPathProp
        );
        setCurrentConstraintsPanel( 0 );
    }

    function ui_positionConstraintButton_clicked ()
    {
        Duik.constraints.positionConstraint();
    }

    function ui_orientationConstraintButton_clicked ()
    {
        Duik.constraints.orientationConstraint();
    }

    function ui_listConstaintsButton_clicked ()
    {
        Duik.constraints.list();
    }

    function ui_zeroButton_clicked ()
    {
        Duik.constraints.zero();
    }

    function ui_zeroButton_altClicked ()
    {
        Duik.constraints.resetPRS();
    }

    function ui_lockButton_clicked ()
    {
        Duik.constraints.lockProperty();
    }

    function ui_autorigButton_clicked ()
    {
        Duik.constraints.autorig(
            ui_autorigBakeStructuresButton.checked
        );
        setCurrentConstraintsPanel( 0 );
    }

    function ui_autorigBakeStructuresButton_clicked ()
    {
        settings.data.autorigBakeStructures = ui_autorigBakeStructuresButton.checked;
        settings.save();
    }

    function ui_autorigTailSelector_changed ()
    {
        settings.data.autorigTailIK = ui_autorigTailSelector.index;
        settings.save();
    }

    function ui_ikOptionsSelector_changed ()
    {
        settings.data.ik3Layer = ui_ikOptionsSelector.index == 1;
        settings.save();
    }

    function ui_fkButton_clicked ()
    {
        var layers = DuAEF.DuAE.Comp.unselectLayers();
        if ( layers.length == 0 ) return;

        app.beginUndoGroup( 'Duik | ' + "FK Overlap" );

        var ctrl = DuAEF.Duik.Rigging.fkOverlap( layers );

        app.endUndoGroup();
    }

    function ui_locatorButton_clicked ()
    {
       Duik.constraints.locator();
    }

    function ui_extractLocatorsButton_clicked ()
    {
        Duik.constraints.extractLocators( settings.data.locatorExtractUsingMP );
    }

    function ui_parentCompButton_clicked ()
    {
        //populate the comp selector
        ui_parentCompCompSelector.setComps();

        setCurrentConstraintsPanel( 6 );
    }

    function ui_parentCompCompSelector_changed ()
    {
        var comp = ui_parentCompCompSelector.getComp();
        if ( !comp ) return;
        ui_parentCompLayerSelector.comp = comp;
        ui_parentCompLayerSelector.refresh();
    }

    function ui_parentCompLayerSelector_changed ()
    {
        if ( ui_parentCompLayerSelector.index > 0 ) ui_parentCompValidButton.enabled = true;
        else ui_parentCompValidButton.enabled = false;
    }

    function ui_parentCompValidButton_clicked ()
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        if ( layers.length == 0 ) return;

        //get comp and layer
        var comp = ui_parentCompCompSelector.getComp();
        var layer = comp.layer( ui_parentCompLayerSelector.index );

        app.beginUndoGroup( 'Duik | ' + "Parent" );

        DuAEF.Duik.Rigging.parent( layers, layer, settings.data.locatorExtractUsingMP );

        app.endUndoGroup();

        setCurrentConstraintsPanel( 0 );
    }

    function ui_blenderSetupValidButton_clicked ()
    {
        var animComp = ui_blenderCompSelector.getComp();
        var controlComp = ui_blenderCtrlCompSelector.getComp();
        var selectedProps = ui_blenderPropsSelector.index == 1;

        app.beginUndoGroup( 'Duik | ' + "Animation blender setup" );

        if ( animComp && controlComp ) DuAEF.Duik.AnimationBlender.setup( animComp, controlComp, selectedProps );

        app.endUndoGroup();
    }

    function ui_blenderAnimSetButton_clicked ()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;
        var name = ui_blenderAnimNameEdit.text;
        var markerProp = DuAEF.Duik.AnimationBlender.getAnimMarkers( comp );
        if ( name == '' ) name = DuAEF.DuAE.Property.newUniqueMarkerName( "anim", markerProp );
        else name = DuAEF.DuAE.Property.newUniqueMarkerName( name, comp );
        var marker = new MarkerValue( name );
        marker.duration = comp.workAreaDuration;
        markerProp.setValueAtTime( comp.workAreaStart, marker );
    }

    function ui_separateDimensionsButton_clicked ()
    {
        Duik.constraints.separateDimensions();
    }

    function ui_etmButton_clicked()
    {
        Duik.constraints.exposeTransform();
    }

    function ui_extractLocatorsMPSelector_changed()
    {
        settings.data.locatorExtractUsingMP = ui_extractLocatorsMPSelector.index == 1;
		settings.save();
    }

    //========== UI ==============

    ui_constraintsGroup.orientation = 'stack';

    var ui_constraintsGeneralGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );

    if (!standAlone) {
        if ( settings.data.uiMode < 2 ) DuAEF.DuScriptUI.addSeparator( ui_constraintsGeneralGroup, "Links & constraints" );
        else if (settings.data.uiMode > 2 ) DuAEF.DuScriptUI.addSeparator( ui_constraintsGeneralGroup, "" );
    }

    var ui_constraintsFirstGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGeneralGroup, settings.data.uiMode > 2 ? 'row' : 'column' );
    if ( settings.data.uiMode > 2 ) ui_constraintsFirstGroup.alignment = ['center', 'top'];

    var ui_autorigGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsFirstGroup, settings.data.uiMode > 2 ? 'column' : 'row' );
    var ui_autorigButton = DuAEF.DuScriptUI.addButton( ui_autorigGroup, settings.data.uiMode > 2 ? '' : "Auto-rig & IK", DuAEF.DuBinary.toFile( w25_autorig_l ), "Automatically rig structures", DuAEF.DuBinary.toFile( w25_autorig_r ) );
    ui_autorigButton.setHelp( "Auto-rig", autorigHelp, autorigLink );
    var ui_autorigOptionsButton = DuAEF.DuScriptUI.addButton( ui_autorigGroup, '', DuAEF.DuBinary.toFile( w14_plus_m ), "Autorig options", DuAEF.DuBinary.toFile( w14_plus_r ) );
    ui_autorigOptionsButton.alignment = settings.data.uiMode > 2 ? ['center','top'] : [ 'right', 'center' ];

    var ui_connectorButtonsGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsFirstGroup, settings.data.uiMode > 2 ? 'column' : 'row' );
    var ui_connectorButton = DuAEF.DuScriptUI.addButton( ui_connectorButtonsGroup, settings.data.uiMode > 2 ? '' : "Connector", DuAEF.DuBinary.toFile( w25_constraint_l ), "Connect any property to any master property", DuAEF.DuBinary.toFile( w25_constraint_r ) );
    ui_connectorButton.setHelp( "Connector", connectorHelp, connectorLink );
    var ui_connectorOptionsButton = DuAEF.DuScriptUI.addButton( ui_connectorButtonsGroup, '', DuAEF.DuBinary.toFile( w14_plus_m ), "Advanced Connector", DuAEF.DuBinary.toFile( w14_plus_r ) );
    ui_connectorOptionsButton.alignment = settings.data.uiMode > 2 ? ['center','top'] : [ 'right', 'center' ];

    var ui_blenderSetupButton = DuAEF.DuScriptUI.addButton( ui_constraintsFirstGroup, settings.data.uiMode > 2 ? '' : "Animation blender...", DuAEF.DuBinary.toFile( w25_blenderedit_l ), "Setup a composition with the animation blender, to trigger animations with markers, and blend them together.", DuAEF.DuBinary.toFile( w25_blenderedit_r ) );
    ui_blenderSetupButton.setHelp( "Animation Blender", animationblendersetupHelp, animationblendersetupLink );

    var ui_bonesGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsFirstGroup, settings.data.uiMode > 2 ? 'column' : 'row' );
    //ui_bonesGroup.alignment = ['fill','top'];
    var ui_bonesButton = DuAEF.DuScriptUI.addButton( ui_bonesGroup, settings.data.uiMode > 2 ? '' : "Add bones", DuAEF.DuBinary.toFile( w25_pin_l ), "Connect any spatial property to a control layer", DuAEF.DuBinary.toFile( w25_pin_r ) );
    ui_bonesButton.setHelp( "Bones", bonesHelp, bonesLink );
    if ( settings.data.uiMode > 0 )
    {
        var ui_bonesOptionsButton = DuAEF.DuScriptUI.addButton( ui_bonesGroup, '', DuAEF.DuBinary.toFile( w14_plus_m ), "Bones options", DuAEF.DuBinary.toFile( w14_plus_r ) );
        ui_bonesOptionsButton.group.alignment = settings.data.uiMode > 2 ? ['center','top'] : [ 'right', 'center' ];
    }

    if ( settings.data.uiMode < 2 ) DuAEF.DuScriptUI.addSeparator( ui_constraintsGeneralGroup );

    var ui_constraintsMainGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGeneralGroup, settings.data.uiMode >= 2 ? 'row' : 'column' );
    if ( settings.data.uiMode >= 2 ) ui_constraintsMainGroup.alignment = [ 'center', 'top' ];
    if ( settings.data.uiMode > 0 )
    {
        var ui_autoParentButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Auto-Parent", DuAEF.DuBinary.toFile( w25_autoparent_l ), "Parent layers to the last selected one.\nAlt+Click: parent only the orphans.", DuAEF.DuBinary.toFile( w25_autoparent_r ) );
        ui_autoParentButton.setHelp( "Auto-Parent", '', 'https://duik-docs.rainboxlab.org/auto-parent.html' );
    }
    var ui_parentButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Parent constraint", DuAEF.DuBinary.toFile( w25_parent_l ), "Link layers together (animatable)", DuAEF.DuBinary.toFile( w25_parent_r ) );
    ui_parentButton.setHelp( "Parent Constraint", parentconstraintHelp, parentconstraintLink );
    var ui_parentCompButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Parent accross comps...", DuAEF.DuBinary.toFile( w25_parentcomp_l ), "Parent layers between compositions", DuAEF.DuBinary.toFile( w25_parentcomp_r ) );
    ui_parentCompButton.setHelp( "Parent Accross Compositions", parentaccrosscompositionsHelp, parentaccrosscompositionsLink );

    if ( settings.data.uiMode > 0 )
    {
        var ui_pathConstraintButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Path constraint...", DuAEF.DuBinary.toFile( w25_pathconstraint_l ), "Attach a layer to a bezier path", DuAEF.DuBinary.toFile( w25_pathconstraint_r ) );
        ui_pathConstraintButton.setHelp( "Path Constraint", pathconstraintHelp, pathconstraintLink );
        //path constraint: only on CC2018+ (15+)
        if ( DuAEF.DuAE.App.version.version < 15 )
        {
            if ( settings.data.uiMode < 2 ) ui_pathConstraintButton.label.text = 'CC2018';
            ui_pathConstraintButton.group.enabled = false;
        }

        var ui_positionConstraintButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Position constraint", DuAEF.DuBinary.toFile( w25_positionconstraint_l ), "Constraint a layer to the position of other layers", DuAEF.DuBinary.toFile( w25_positionconstraint_r ) );
        ui_positionConstraintButton.setHelp( "Position Constraint", positionconstraintHelp, positionconstraintLink );
        var ui_orientationConstraintButton = DuAEF.DuScriptUI.addButton( ui_constraintsMainGroup, settings.data.uiMode >= 2 ? '' : "Orientation constraint", DuAEF.DuBinary.toFile( w25_orientationconstraint_l ), "Constrain the rotation of a layer to the orientation of other layers", DuAEF.DuBinary.toFile( w25_orientationconstraint_r ) );
        ui_orientationConstraintButton.setHelp( "Orientation Constraint", orientationconstraintHelp, orientationconstraintLink );

        DuAEF.DuScriptUI.addSeparator( ui_constraintsGeneralGroup );

        var ui_constraintsToolsGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGeneralGroup, settings.data.uiMode >= 2 ? 'row' : 'column' );
        if ( settings.data.uiMode >= 2 ) ui_constraintsToolsGroup.alignment = [ 'center', 'top' ];
        var ui_listConstaintsButton = DuAEF.DuScriptUI.addButton( ui_constraintsToolsGroup, settings.data.uiMode >= 2 ? '' : "Add list", DuAEF.DuBinary.toFile( w18_list_l ), "Add a list to the property", DuAEF.DuBinary.toFile( w18_list_r ) );
        ui_listConstaintsButton.setHelp( "List", listHelp, listLink );
        var ui_etmButton = DuAEF.DuScriptUI.addButton( ui_constraintsToolsGroup, settings.data.uiMode >= 2 ? '' : "Expose transform", DuAEF.DuBinary.toFile( w18_ruler_l ), "Creates an 'Expose Transform' controller", DuAEF.DuBinary.toFile( w18_ruler_r ) );
        ui_etmButton.setHelp( "Expose Transform", exposetransformHelp, exposetransformLink );
        var ui_zeroButton = DuAEF.DuScriptUI.addButton( ui_constraintsToolsGroup, settings.data.uiMode >= 2 ? '' : "Zero", DuAEF.DuBinary.toFile( w18_zero_l ), "Add a \"zero\" to a layer.\nAlt + Click: Resets the PRS of the layer", DuAEF.DuBinary.toFile( w18_zero_r ) );
        ui_zeroButton.setHelp( "Zero", zeroHelp, zeroLink );
        var ui_lockButton = DuAEF.DuScriptUI.addButton( ui_constraintsToolsGroup, settings.data.uiMode >= 2 ? '' : "Lock property", DuAEF.DuBinary.toFile( w18_lock_l ), "Locks the property so its value can not be changed nor keyframed", DuAEF.DuBinary.toFile( w18_lock_r ) );
        ui_lockButton.setHelp( "Lock property", lockpropertyHelp, lockpropertyLink );
        var ui_separateDimensionsButton = DuAEF.DuScriptUI.addButton( ui_constraintsToolsGroup, settings.data.uiMode >= 2 ? '' : "Separate Dimensions", DuAEF.DuBinary.toFile( w18_separatedimensions_l ), "Separates the dimensions of the property in an effect", DuAEF.DuBinary.toFile( w18_separatedimensions_r ) );
        ui_separateDimensionsButton.setHelp( "Separate Dimensions", separatedimensionsHelp, separatedimensionsLink );
    }

    //blender
    var ui_blenderSetupGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );
    DuAEF.DuScriptUI.addSeparator( ui_blenderSetupGroup, settings.data.uiMode < 2 ? "Blender animations" : "" );
    var ui_blenderAnimSetupGroup = DuAEF.DuScriptUI.addGroup( ui_blenderSetupGroup );
    var ui_blenderAnimNameEdit = DuAEF.DuScriptUI.addEditText( ui_blenderAnimSetupGroup, '', '', '', "Animation name" );
    ui_blenderAnimNameEdit.alignment = [ 'fill', 'fill' ];
    var ui_blenderAnimSetButton = DuAEF.DuScriptUI.addButton( ui_blenderAnimSetupGroup, "Set", DuAEF.DuBinary.toFile( w25_check_g ), "Sets the animation, using the workarea.", DuAEF.DuBinary.toFile( w25_check_r ) );
    ui_blenderAnimSetButton.alignment = [ 'left', 'fill' ];
    DuAEF.DuScriptUI.addSeparator( ui_blenderSetupGroup, settings.data.uiMode < 2 ? "Blender setup" : "" );
    ui_blenderSetupGroup.add( 'statictext', undefined, "Composition to set up:" );
    var ui_blenderCompSelector = DuAEF.DuScriptUI.addCompSelector( ui_blenderSetupGroup );
    ui_blenderSetupGroup.add( 'statictext', undefined, "Control from:" );
    var ui_blenderCtrlCompSelector = DuAEF.DuScriptUI.addCompSelector( ui_blenderSetupGroup );
    var ui_blenderPropsSelector = DuAEF.DuScriptUI.addSelector( ui_blenderSetupGroup );
    ui_blenderPropsSelector.addButton( "All animated properties", DuAEF.DuBinary.toFile( w14_allprops_l ), "Sets all the animated properties of the composition up.", DuAEF.DuBinary.toFile( w14_allprops_r ) );
    ui_blenderPropsSelector.addButton( "Selected properties", DuAEF.DuBinary.toFile( w14_selectedprops_l ), "Sets all the selected properties of the composition up.", DuAEF.DuBinary.toFile( w14_selectedprops_r ) );
    var ui_blenderSetupValidGroup = DuAEF.DuScriptUI.addGroup( ui_blenderSetupGroup );
    ui_blenderSetupValidGroup.alignment = [ 'fill', 'center' ];
    var ui_blenderSetupCancelButton = DuAEF.DuScriptUI.addButton( ui_blenderSetupValidGroup, "Back", DuAEF.DuBinary.toFile( w25_back_m ), "Back", DuAEF.DuBinary.toFile( w25_back_r ) );
    var ui_blenderSetupValidButton = DuAEF.DuScriptUI.addButton( ui_blenderSetupValidGroup, "Blend!", DuAEF.DuBinary.toFile( w25_check_g ), "Sets the properties and the blender up.", DuAEF.DuBinary.toFile( w25_check_r ) );

    // Locators use MPs
    if (DuAEF.DuAE.App.version.version >= 15.1 && settings.data.uiMode > 1)
	{
        var ui_extractLocatorsOptionsWindow = DuAEF.DuScriptUI.createPopup( "Extract Locators" );
        var ui_extractLocatorsOptionsGroup = ui_extractLocatorsOptionsWindow.contents;
        var ui_extractLocatorsMPSelector = DuAEF.DuScriptUI.addSelector(ui_extractLocatorsOptionsGroup);
        ui_extractLocatorsMPSelector.addButton("Use expressions",DuAEF.DuBinary.toFile(w25_js_l),"Use expressions to link the controllers to the precomp",DuAEF.DuBinary.toFile(w25_js_r));
        ui_extractLocatorsMPSelector.addButton("Use master properties",DuAEF.DuBinary.toFile(w25_masterprops_l),"Use master properties to link the controllers to the precomp",DuAEF.DuBinary.toFile(w25_masterprops_r));
        var ui_extractLocatorsValidButton = DuAEF.DuScriptUI.addButton(ui_extractLocatorsOptionsGroup,"Extract!",DuAEF.DuBinary.toFile(w25_check_g),"Extract controllers from the precomposition",DuAEF.DuBinary.toFile(w25_check_r));
    }

    //parent between comps
    var ui_parentCompGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );
    DuAEF.DuScriptUI.addSeparator( ui_parentCompGroup, settings.data.uiMode < 2 ? "Parent accross comps" : '' );
    ui_parentCompGroup.add( 'statictext', undefined, "Composition:" )
    var ui_parentCompCompSelector = DuAEF.DuScriptUI.addCompSelector( ui_parentCompGroup );
    ui_parentCompCompSelector.filterComps = DuAEF.DuAE.Comp.getRelatives;
    ui_parentCompGroup.add( 'statictext', undefined, "Layer:" )
    var ui_parentCompLayerSelector = DuAEF.DuScriptUI.addLayerSelector( ui_parentCompGroup );
    var ui_parentCompValidButton = DuAEF.DuScriptUI.addButton( ui_parentCompGroup, "Parent", DuAEF.DuBinary.toFile( w25_check_g ), "Parent the selected layers to the chosen layer.", DuAEF.DuBinary.toFile( w25_check_r ) );
    ui_parentCompValidButton.setHelp( "Parent Accross Compositions", parentaccrosscompositionsHelp, parentaccrosscompositionsLink );
    ui_parentCompValidButton.enabled = false;
    if ( settings.data.uiMode > 1 )
    {
        DuAEF.DuScriptUI.addSeparator( ui_parentCompGroup, settings.data.uiMode >= 3 ? '' : "Tools" );
        var ui_parentCompToolsGroup = DuAEF.DuScriptUI.addGroup( ui_parentCompGroup, settings.data.uiMode >= 2 ? 'row' : 'column' );
        var ui_locatorButton = DuAEF.DuScriptUI.addButton( ui_parentCompToolsGroup, "Add locator", DuAEF.DuBinary.toFile( w18_target_l ), "Add a \"locator\" in the composition", DuAEF.DuBinary.toFile( w18_target_r ) );
        var ui_extractLocatorsButton = DuAEF.DuScriptUI.addButton( ui_parentCompToolsGroup, "Extract locators", DuAEF.DuBinary.toFile( w18_extractloc_l ), "Extract \"locators\" from the precomposition", DuAEF.DuBinary.toFile( w18_extractloc_r ) );
        if (DuAEF.DuAE.App.version.version >= 15.1)
	    {
            ui_extractLocatorsOptionsButton = DuAEF.DuScriptUI.addButton( ui_parentCompToolsGroup, '', DuAEF.DuBinary.toFile( w14_plus_m ), "Extract locators options", DuAEF.DuBinary.toFile( w14_plus_r ) );
            ui_extractLocatorsOptionsButton.alignment = [ 'right', 'center' ];
            ui_extractLocatorsOptionsWindow.tieTo( ui_extractLocatorsOptionsButton );
        }
    }
    var ui_parentCompCancelButton = DuAEF.DuScriptUI.addButton( ui_parentCompGroup, "Back", DuAEF.DuBinary.toFile( w25_back_m ), "Back", DuAEF.DuBinary.toFile( w25_back_r ) );

    //autorig options
    var ui_autorigWindow = DuAEF.DuScriptUI.createPopup( "Auto-Rig & IK" );
    var ui_autorigOptionsGroup = ui_autorigWindow.contents;
    var ui_autorigBakeStructuresButton = DuAEF.DuScriptUI.addCheckBox( ui_autorigOptionsGroup, "Bake Structures", DuAEF.DuBinary.toFile( w14_oven_l ), "Bake the appearance of the Structures, to improve performance", DuAEF.DuBinary.toFile( w14_oven_r ) );
    var ui_autorigTailSelector = DuAEF.DuScriptUI.addSelector( ui_autorigOptionsGroup );
    ui_autorigTailSelector.addButton( "Prefer standard IK", DuAEF.DuBinary.toFile( w14_ik_l ), "Use standard IK whenever possible", DuAEF.DuBinary.toFile( w14_ik_r ) );
    ui_autorigTailSelector.addButton( "Prefer FK Overlap", DuAEF.DuBinary.toFile( w14_fk_l ), "Use FK whenever possible", DuAEF.DuBinary.toFile( w14_fk_r ) );
    ui_autorigTailSelector.addButton( "Prefer Bezier IK", DuAEF.DuBinary.toFile( w14_fk_l ), "Use Bezier IK whenever possible", DuAEF.DuBinary.toFile( w14_fk_r ) );
    var ui_autorigValidButton = DuAEF.DuScriptUI.addButton( ui_autorigOptionsGroup, "Auto-rig", DuAEF.DuBinary.toFile( w25_check_g ), "Automatically rig structures", DuAEF.DuBinary.toFile( w25_check_r ) );

    if ( settings.data.uiMode > 0 )
    {
        DuAEF.DuScriptUI.addSeparator( ui_autorigOptionsGroup, settings.data.uiMode >= 2 ? '' : "IK & FK" );
        var ui_autorigOptionsIKGroup = DuAEF.DuScriptUI.addGroup( ui_autorigOptionsGroup, settings.data.uiMode >= 2 ? 'row' : 'column' );
        ui_autorigOptionsIKGroup.alignChildren = settings.data.uiMode >= 2 ? [ 'center', 'top' ] : [ 'fill', 'top' ];

        var ui_IKGroup = DuAEF.DuScriptUI.addGroup( ui_autorigOptionsIKGroup, settings.data.uiMode >= 2 ? 'column' : 'row' );
        var ui_IKButton = DuAEF.DuScriptUI.addButton( ui_IKGroup, settings.data.uiMode >= 2 ? '' : "IK", DuAEF.DuBinary.toFile( w25_ik_l ), "Add an IK to the selected structure", DuAEF.DuBinary.toFile( w25_ik_r ) );
        var ui_IKOptionsButton = DuAEF.DuScriptUI.addButton( ui_IKGroup, '', DuAEF.DuBinary.toFile( w14_plus_m ), "IK options", DuAEF.DuBinary.toFile( w14_plus_r ) );
        ui_IKOptionsButton.alignment = settings.data.uiMode >= 2 ? [ 'center', 'center' ] : [ 'right', 'center' ];

        var ui_bezierIKGroup = DuAEF.DuScriptUI.addGroup( ui_autorigOptionsIKGroup, settings.data.uiMode >= 2 ? 'column' : 'row' );
        var ui_bezierIKButton = DuAEF.DuScriptUI.addButton( ui_bezierIKGroup, settings.data.uiMode >= 2 ? '' : "Bezier IK", DuAEF.DuBinary.toFile( w25_bezierik_l ), "Add a Beizer IK to the selected structure", DuAEF.DuBinary.toFile( w25_bezierik_r ) );
        //var ui_bezierIKOptionsButton = DuAEF.DuScriptUI.addButton(ui_bezierIKGroup,'',DuAEF.DuBinary.toFile(w14_plus_m),"Bezier IK options",DuAEF.DuBinary.toFile(w14_plus_r));
        //ui_bezierIKOptionsButton.enabled = false;
        //ui_bezierIKOptionsButton.alignment = settings.data.uiMode >= 2 ? ['center','center'] : ['right','center'];

        var ui_fkButton = DuAEF.DuScriptUI.addButton( ui_autorigOptionsIKGroup, settings.data.uiMode >= 2 ? '' : "FK Overlap", DuAEF.DuBinary.toFile( w25_fk_l ), "FK with auto-overlap", DuAEF.DuBinary.toFile( w25_fk_r ) );
    }

    var ui_IKOptionsWindow = DuAEF.DuScriptUI.createPopup( "IK" );
    var ui_IKOptionsGroup = ui_IKOptionsWindow.contents;
    var ui_ikOptionsSelector = DuAEF.DuScriptUI.addSelector( ui_IKOptionsGroup );
    ui_ikOptionsSelector.addButton( "1 and 2-Layer IK", DuAEF.DuBinary.toFile( w14_12layerik_l ), "Rig long limbs combining 1-layer and 2-layer IKs", DuAEF.DuBinary.toFile( w14_12layerik_r ) );
    ui_ikOptionsSelector.addButton( "3-Layer IK", DuAEF.DuBinary.toFile( w14_3layerik_l ), "Rig long limbs using 3-layer IK", DuAEF.DuBinary.toFile( w14_3layerik_r ) );
    var ui_IKOptionsValidButton = DuAEF.DuScriptUI.addButton( ui_IKOptionsGroup, "Create", DuAEF.DuBinary.toFile( w25_check_g ), "Create IK", DuAEF.DuBinary.toFile( w25_check_r ) );

    //path constraint options
    var ui_pathConstraintGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );
    if ( settings.data.uiMode < 2 ) DuAEF.DuScriptUI.addSeparator( ui_pathConstraintGroup, "Path constraint" );
    ui_pathConstraintGroup.alignChildren = [ 'center', 'top' ];
    if ( settings.data.uiMode < 2 ) DuAEF.DuScriptUI.addSeparator( ui_pathConstraintGroup, "1 - Select path" );
    var ui_pathConstraintPickButton = DuAEF.DuScriptUI.addButton( ui_pathConstraintGroup, "Pick path", DuAEF.DuBinary.toFile( w25_pickpath_l ), "Select the path for the constraint", DuAEF.DuBinary.toFile( w25_pickpath_r ) );
    var ui_pathConstraintLabel = DuAEF.DuScriptUI.addStaticText( ui_pathConstraintGroup, "Select path", DuAEF.DuJS.Color.Colors.DARK_GREY );
    ui_pathConstraintLabel.characters = 20;
    ui_pathConstraintLabel.justify = 'center';
    if ( settings.data.uiMode < 2 ) var ui_pathConstraintSeparator = DuAEF.DuScriptUI.addSeparator( ui_pathConstraintGroup, "2 - Select layer" );
    var ui_pathConstraintValidButton = DuAEF.DuScriptUI.addButton( ui_pathConstraintGroup,
        "Constrain layer",
        DuAEF.DuBinary.toFile( w25_pathconstraint_m ),
        "Path constraint",
        DuAEF.DuBinary.toFile( w25_pathconstraint_r )
    );
    DuAEF.DuScriptUI.addSeparator( ui_pathConstraintGroup, "" );
    var ui_pathConstraintCancelButton = DuAEF.DuScriptUI.addButton( ui_pathConstraintGroup, "Cancel", DuAEF.DuBinary.toFile( w25_back_m ), "Cancel", DuAEF.DuBinary.toFile( w25_back_r ) );

    //bones options
    var ui_bonesGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );
    if ( settings.data.uiMode < 2 ) DuAEF.DuScriptUI.addSeparator( ui_bonesGroup, "Edit bones" );
    var ui_bonesEditSizeGroup = DuAEF.DuScriptUI.addGroup( ui_bonesGroup, 'row' );
    ui_bonesEditSizeGroup.add( 'statictext', undefined, "Size" );
    var ui_bonesEditSizeList = DuAEF.DuScriptUI.addSelector( ui_bonesEditSizeGroup );
    ui_bonesEditSizeList.alignment = [ 'fill', 'fill' ];
    ui_bonesEditSizeList.addButton( "Small" );
    ui_bonesEditSizeList.addButton( "Medium" );
    ui_bonesEditSizeList.addButton( "Large" );
    ui_bonesEditSizeList.addButton( "Custom" );
    var ui_bonesEditSizeEdit = DuAEF.DuScriptUI.addEditText( ui_bonesEditSizeGroup, '100' );
    ui_bonesEditSizeEdit.alignment = [ 'fill', 'fill' ];
    ui_bonesEditSizeEdit.helpTip = "Set the display size of the controllers.";
    var ui_bonesEditSizeValidButton = DuAEF.DuScriptUI.addButton( ui_bonesEditSizeGroup, '', DuAEF.DuBinary.toFile( w18_check_m ), "Set size", DuAEF.DuBinary.toFile( w18_check_g ) );
    ui_bonesEditSizeValidButton.alignment = [ 'right', 'fill' ];
    var ui_bonesEditColorGroup = DuAEF.DuScriptUI.addGroup( ui_bonesGroup, 'row' );
    var ui_bonesEditColorLabel = ui_bonesEditColorGroup.add( 'statictext', undefined, "Color #" );
    var ui_bonesEditColor = DuAEF.DuScriptUI.addEditText( ui_bonesEditColorGroup, 'EC1818' );
    ui_bonesEditColor.alignment = [ 'fill', 'fill' ];
    ui_bonesEditColor.helpTip = "Set the display color of the controllers.";
    ui_bonesEditColorLabel.helpTip = "Set the display color of the controllers.";
    var ui_bonesEditRandomColorButton = DuAEF.DuScriptUI.addButton( ui_bonesEditColorGroup, '', DuAEF.DuBinary.toFile( w18_random_l ), "Generates a random color", DuAEF.DuBinary.toFile( w18_random_r ) );
    ui_bonesEditRandomColorButton.alignment = [ 'right', 'fill' ];
    var ui_bonesEditColorValidButton = DuAEF.DuScriptUI.addButton( ui_bonesEditColorGroup, '', DuAEF.DuBinary.toFile( w18_check_m ), "Set color", DuAEF.DuBinary.toFile( w18_check_g ) );
    ui_bonesEditColorValidButton.alignment = [ 'right', 'fill' ];

    var ui_bonesEditGetSetGroup = DuAEF.DuScriptUI.addGroup( ui_bonesGroup );
    ui_bonesEditGetSetGroup.alignment = [ 'fill', 'top' ];
    var ui_bonesEditGetButton = DuAEF.DuScriptUI.addButton( ui_bonesEditGetSetGroup, 'Get', DuAEF.DuBinary.toFile( w25_handeyedropper_l ), "Get size and color", DuAEF.DuBinary.toFile( w25_handeyedropper_r ) );
    var ui_bonesEditSetButton = DuAEF.DuScriptUI.addButton( ui_bonesEditGetSetGroup, 'Set', DuAEF.DuBinary.toFile( w25_check_l ), "Set size and color", DuAEF.DuBinary.toFile( w25_check_g ) );

    DuAEF.DuScriptUI.addSeparator( ui_bonesGroup );

    var ui_bonesEditBakeButton = DuAEF.DuScriptUI.addButton( ui_bonesGroup, "Bake appearance", DuAEF.DuBinary.toFile( w25_oven_l ), "Removes expressions and effect for controlling the appearance of the Bone.\nThis will improve performance a little bit.", DuAEF.DuBinary.toFile( w25_oven_r ) );
    var ui_bonesToolsGroup = DuAEF.DuScriptUI.addGroup( ui_bonesGroup );
    ui_bonesToolsGroup.orientation = settings.data.uiMode >= 2 ? 'row' : 'column';
    var ui_bonesSelectButton = DuAEF.DuScriptUI.addButton( ui_bonesToolsGroup, settings.data.uiMode >= 2 ? '' : "Select bones", DuAEF.DuBinary.toFile( w25_selectcontroller_l ), "Select all bones", DuAEF.DuBinary.toFile( w25_selectcontroller_r ) );
    if ( settings.data.uiMode >= 2 ) ui_bonesSelectButton.alignment = [ 'center', 'top' ];
    var ui_bonesShowHideButton = DuAEF.DuScriptUI.addButton( ui_bonesToolsGroup, settings.data.uiMode >= 2 ? '' : "Show/hide", DuAEF.DuBinary.toFile( w25_showhand_l ), "Show or hide bones", DuAEF.DuBinary.toFile( w25_hidehand_r ) );
    if ( settings.data.uiMode >= 2 ) ui_bonesShowHideButton.alignment = [ 'center', 'top' ];

    DuAEF.DuScriptUI.addSeparator( ui_bonesGroup );

    var ui_bonesValidGroup = DuAEF.DuScriptUI.addGroup( ui_bonesGroup );
    ui_bonesValidGroup.alignment = [ 'fill', 'top' ];
    var ui_bonesCancelButton = DuAEF.DuScriptUI.addButton( ui_bonesValidGroup, "Back", DuAEF.DuBinary.toFile( w25_back_m ), "Back", DuAEF.DuBinary.toFile( w25_back_r ) );
    var ui_bonesValidButton = DuAEF.DuScriptUI.addButton( ui_bonesValidGroup, "Create", DuAEF.DuBinary.toFile( w25_check_g ), "Create bones", DuAEF.DuBinary.toFile( w25_check_r ) );

    //connector options
    var ui_connectorGroup = DuAEF.DuScriptUI.addGroup( ui_constraintsGroup, 'column' );
    DuAEF.DuScriptUI.addSeparator( ui_connectorGroup, settings.data.uiMode < 2 ? "Connector" : '' );
    ui_connectorGroup.alignChildren = [ 'center', 'top' ];

    var ui_connectorCreateGroup = DuAEF.DuScriptUI.addGroup( ui_connectorGroup, 'row' );

    if ( settings.data.uiMode < 2 )
    {
        DuAEF.DuScriptUI.addStaticText(ui_connectorCreateGroup, "Create: ");
    }

    var ui_connectorSliderButton = DuAEF.DuScriptUI.addButton( ui_connectorCreateGroup, '', DuAEF.DuBinary.toFile( w25_slider_l ), 'Create a slider controller', DuAEF.DuBinary.toFile( w25_slider_r ) );
    var ui_connectorDoubleSliderButton = DuAEF.DuScriptUI.addButton( ui_connectorCreateGroup, '', DuAEF.DuBinary.toFile( w25_doubleslider_l ), 'Create a 2D slider controller', DuAEF.DuBinary.toFile( w25_doubleslider_r ) );
    var ui_connectorAngleButton = DuAEF.DuScriptUI.addButton( ui_connectorCreateGroup, '', DuAEF.DuBinary.toFile( w25_angle_l ), 'Create an angle controller', DuAEF.DuBinary.toFile( w25_angle_r ) );
    var ui_connectorEffectorButton = DuAEF.DuScriptUI.addButton( ui_connectorCreateGroup, '', DuAEF.DuBinary.toFile( w25_effector_l ), 'Create a spatial effector', DuAEF.DuBinary.toFile( w25_effector_r ) );
    var ui_connectorEtmButton = DuAEF.DuScriptUI.addButton( ui_connectorCreateGroup, "", DuAEF.DuBinary.toFile( w25_ruler_l ), "Create an 'Expose Transform' controller", DuAEF.DuBinary.toFile( w25_ruler_r ) );

    var ui_connectorPickGroup = ui_connectorCreateGroup;

    if ( settings.data.uiMode < 2 )
    {
        ui_connectorPickGroup = DuAEF.DuScriptUI.addGroup( ui_connectorGroup, 'row' );
        ui_connectorPickGroup.alignment = ['fill','top'];
        DuAEF.DuScriptUI.addStaticText(ui_connectorPickGroup, "Or pick:").alignment = ['left','center'];
    }

    var ui_connectorMapEffectorButton = DuAEF.DuScriptUI.addButton( ui_connectorPickGroup, settings.data.uiMode < 2 ? "Texture" : "", DuAEF.DuBinary.toFile( w25_picktexture_l ), 'Select a texture layer (map)', DuAEF.DuBinary.toFile( w25_picktexture_r ) );
	var ui_connectorPickButton = DuAEF.DuScriptUI.addButton( ui_connectorPickGroup, settings.data.uiMode < 2 ? "Property" : "", DuAEF.DuBinary.toFile( w25_pickproperty_l ), "Select a master property", DuAEF.DuBinary.toFile( w25_pickproperty_r ) );

    var connectorMasterLabel = DuAEF.DuScriptUI.addStaticText( ui_connectorGroup, "Choose / create a controlling prop.", DuAEF.DuJS.Color.Colors.DARK_GREY );
	connectorMasterLabel.characters = 20;
	connectorMasterLabel.justify = 'center';

    var ui_connectorForm = DuAEF.DuScriptUI.addForm( ui_connectorGroup );
    DuAEF.DuScriptUI.setBackgroundColor( ui_connectorForm, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
    ui_connectorForm.alignment = [ 'fill', 'top' ];
    var ui_connectorPropLabel = ui_connectorForm.labels.add( 'statictext', undefined, "Property: " );
    var ui_connectorAxisLabel = ui_connectorForm.labels.add( 'statictext', undefined, "Placeholder: " );
    var ui_connectorTypeLabel = ui_connectorForm.labels.add( 'statictext', undefined, "Type: " );
    var ui_connectorMinLabel = ui_connectorForm.labels.add( 'statictext', undefined, "Minimum: " );
    var ui_connectorMaxLabel = ui_connectorForm.labels.add( 'statictext', undefined, "Maximum: " );
    var ui_connectorPropList = ui_connectorForm.buttons.add( 'dropdownlist', undefined, [ '                      ' ] );
    var ui_connectorAxisList = ui_connectorForm.buttons.add( 'dropdownlist', undefined, [ '            ' ] );
    var ui_connectorTypeList = ui_connectorForm.buttons.add( 'dropdownlist', undefined, [ "Value", "Velocity" ] );
    var ui_connectorMinimumEdit = DuAEF.DuScriptUI.addEditText( ui_connectorForm.buttons, '0' );
    var ui_connectorMaximumEdit = DuAEF.DuScriptUI.addEditText( ui_connectorForm.buttons, '10000' );
    ui_connectorMinLabel.minimumSize.height = ui_connectorMinLabel.maximumSize.height = ui_connectorMinimumEdit.edit.preferredSize[ 1 ];
    ui_connectorMaxLabel.minimumSize.height = ui_connectorMaxLabel.maximumSize.height = ui_connectorMaximumEdit.edit.preferredSize[ 1 ];
    ui_connectorAxisLabel.minimumSize.height = ui_connectorAxisLabel.maximumSize.height = ui_connectorPropList.preferredSize[ 1 ];
    ui_connectorAxisLabel.minimumSize.height = ui_connectorAxisLabel.maximumSize.height = ui_connectorAxisList.preferredSize[ 1 ];
    ui_connectorTypeLabel.minimumSize.height = ui_connectorTypeLabel.maximumSize.height = ui_connectorTypeList.preferredSize[ 1 ];

    if ( settings.data.uiMode < 2 ) var ui_connectorSeparator3 = DuAEF.DuScriptUI.addSeparator( ui_connectorGroup, "Children connection" );
    var ui_connectorChildrenGroup = DuAEF.DuScriptUI.addGroup( ui_connectorGroup, settings.data.uiMode >= 2 ? 'row' : 'column' );
    ui_connectorChildrenGroup.alignment = settings.data.uiMode >= 2 ? [ 'center', 'top' ] : [ 'fill', 'top' ];
    var ui_connectorPropertiesButton = DuAEF.DuScriptUI.addButton(
        ui_connectorChildrenGroup,
        settings.data.uiMode >= 2 ? '' : 'Connect to properties',
        DuAEF.DuBinary.toFile( w25_allproperties_m ),
        "Connect selected properties",
        DuAEF.DuBinary.toFile( w25_allproperties_r )
    );
    var ui_connectorOpacitiesButton = DuAEF.DuScriptUI.addButton(
        ui_connectorChildrenGroup,
        settings.data.uiMode >= 2 ? '' : 'Connect to opacities',
        DuAEF.DuBinary.toFile( w25_opacity_m ),
        "Connect selected layers opacity",
        DuAEF.DuBinary.toFile( w25_opacity_r )
    );

    DuAEF.DuScriptUI.addSeparator( ui_connectorGroup );
    var ui_connectorCancelButton = DuAEF.DuScriptUI.addButton( ui_connectorGroup, "Cancel", DuAEF.DuBinary.toFile( w25_back_m ), "Back", DuAEF.DuBinary.toFile( w25_back_r ) );

    //=========== INIT =============

    bonesEditInit();
    var pathConstraintPathProp = null;
    var connector = {};
    connector.masterProp = null;
    connector.masterLayer = null;
    connector.type = 1; // 1: standard, 2: effector, 3: texture

    ui_autorigBakeStructuresButton.setChecked( settings.data.autorigBakeStructures );
    ui_autorigTailSelector.setCurrentIndex( settings.data.autorigTailIK );
    if ( settings.data.ik3Layer ) ui_ikOptionsSelector.setCurrentIndex( 1 );
    else ui_ikOptionsSelector.setCurrentIndex( 0 );

    ui_constraintsGroup.tabActivated = setCurrentConstraintsPanel;
    if (standAlone) setCurrentConstraintsPanel();

    if (DuAEF.DuAE.App.version.version >= 15.1 && settings.data.uiMode > 1)
	{
        if ( settings.data.locatorExtractUsingMP ) ui_extractLocatorsMPSelector.setCurrentIndex( 1 );
        else ui_extractLocatorsMPSelector.setCurrentIndex( 0 );
    }

    //=========== CONNECT EVENTS ===========

    ui_autorigButton.onClick = ui_autorigValidButton.onClick = ui_autorigButton_clicked;
    
    ui_autorigWindow.tieTo(ui_autorigOptionsButton);
    ui_autorigBakeStructuresButton.onClick = ui_autorigBakeStructuresButton_clicked;
    ui_autorigTailSelector.onChange = ui_autorigTailSelector_changed;

    if ( settings.data.uiMode > 0 )
    {
        ui_IKOptionsValidButton.onClick = ui_IKButton.onClick = Duik.constraints.ik;
        ui_IKOptionsWindow.tieTo(ui_IKOptionsButton);

        ui_ikOptionsSelector.onChange = ui_ikOptionsSelector_changed;
        if ( settings.data.uiMode > 0 ) ui_bezierIKButton.onClick = Duik.constraints.bezierIk;
        ui_fkButton.onClick = ui_fkButton_clicked;
    }


    ui_blenderAnimSetButton.onClick = ui_blenderAnimSetButton_clicked;
    ui_blenderSetupButton.onClick = function()
    {
        ui_blenderCompSelector.setComps();
        ui_blenderCtrlCompSelector.setComps();
        setCurrentConstraintsPanel( 7 );
    };
    ui_blenderSetupCancelButton.onClick = function()
    {
        setCurrentConstraintsPanel( 0 );
    };
    ui_blenderSetupValidButton.onClick = ui_blenderSetupValidButton_clicked;

    ui_connectorButton.onClick = ui_connectorButton_clicked;
    ui_connectorSliderButton.onClick = ui_connectorSliderButton_clicked;
    ui_connectorDoubleSliderButton.onClick = ui_connectorDoubleSliderButton_clicked;
    ui_connectorAngleButton.onClick = ui_connectorAngleButton_clicked;
    ui_connectorEffectorButton.onClick = ui_connectorEffectorButton_clicked;
    ui_connectorMapEffectorButton.onClick = ui_connectorMapEffectorButton_clicked;
    ui_connectorEtmButton.onClick = ui_connectorEtmButton_clicked;
    ui_connectorPropList.onChange = ui_connectorPropList_changed;
    ui_connectorTypeList.onChange = ui_connectorTypeList_changed;
    ui_connectorAxisList.onChange = ui_connectorAxisList_changed;
    ui_connectorPropertiesButton.onClick = ui_connectorPropertiesButton_clicked;
    ui_connectorOpacitiesButton.onClick = ui_connectorOpacitiesButton_clicked;
    ui_connectorMinimumEdit.onChange = ui_connectorMinimumEdit_changed;
    ui_connectorMaximumEdit.onChange = ui_connectorMaximumEdit_changed;

    ui_connectorOptionsButton.onClick = function()
    {
        connectorInit();
        setCurrentConstraintsPanel( 3 );
    };
    ui_connectorCancelButton.onClick = function()
    {
        setCurrentConstraintsPanel( 0 );
    };
    ui_connectorPickButton.onClick = connectorPick;
    ui_connectorPropertiesButton.onClick = ui_connectorPropertiesButton_clicked;
    ui_connectorOpacitiesButton.onClick = ui_connectorOpacitiesButton_clicked;

    ui_bonesButton.onClick = ui_bonesValidButton.onClick = function () { ui_bonesButton_clicked( false, true ) };
    ui_bonesButton.onAltClick = ui_bonesValidButton.onAltClick = function () { ui_bonesButton_clicked( true, true ) };
    ui_bonesButton.onCtrlClick = ui_bonesValidButton.onCtrlClick = function () { ui_bonesButton_clicked( false, false ) };
    ui_bonesButton.onCtrlAltClick = ui_bonesValidButton.onCtrlAltClick = function () { ui_bonesButton_clicked( true, false ) };

    if ( settings.data.uiMode > 0 ) ui_bonesOptionsButton.onClick = function()
    {
        setCurrentConstraintsPanel( 2 );
    };
    ui_bonesCancelButton.onClick = function()
    {
        setCurrentConstraintsPanel( 0 );
    };

    ui_bonesEditSizeList.onChange = ui_bonesEditSizeList_changed;
    ui_bonesEditSizeEdit.onChange = ui_bonesEditSizeEdit_changed;
    ui_bonesEditColor.onChange = ui_bonesEditColor_changed;
    ui_bonesEditColorLabel.addEventListener( "mousedown", ui_bonesEditColor_clicked, false );

    ui_bonesEditSizeValidButton.onClick = ui_bonesEditSizeValidButton_clicked;
    ui_bonesEditRandomColorButton.onClick = ui_bonesEditRandomColorButton_clicked;
    ui_bonesEditColorValidButton.onClick = ui_bonesEditColorValidButton_clicked;
    ui_bonesEditSetButton.onClick = ui_bonesEditSetButton_clicked;
    ui_bonesEditGetButton.onClick = ui_bonesEditGetButton_clicked;

    ui_bonesEditBakeButton.onClick = ui_bonesEditBakeButton_clicked;
    ui_bonesSelectButton.onClick = ui_bonesSelectButton_clicked;
    ui_bonesShowHideButton.onClick = function()
    {
        ui_bonesShowHideButton_clicked( false );
    };
    ui_bonesShowHideButton.onAltClick = function()
    {
        ui_bonesShowHideButton_clicked( true );
    };

    ui_parentButton.onClick = ui_parentButton_clicked;

    ui_parentCompButton.onClick = ui_parentCompButton_clicked;
    ui_parentCompCancelButton.onClick = function()
    {
        setCurrentConstraintsPanel( 0 );
    };
    ui_parentCompCompSelector.onChange = ui_parentCompCompSelector_changed;
    ui_parentCompLayerSelector.onChange = ui_parentCompLayerSelector_changed;
    ui_parentCompValidButton.onClick = ui_parentCompValidButton_clicked;

    if ( settings.data.uiMode > 0 )
    {
        ui_pathConstraintButton.onClick = ui_pathConstraintButton_clicked;
        ui_pathConstraintCancelButton.onClick = function()
        {
            setCurrentConstraintsPanel( 0 );
        };
        ui_pathConstraintPickButton.onClick = ui_pathConstraintPickButton_clicked;
        ui_pathConstraintValidButton.onClick = ui_pathConstraintValidButton_clicked;

        ui_positionConstraintButton.onClick = ui_positionConstraintButton_clicked;
        ui_orientationConstraintButton.onClick = ui_orientationConstraintButton_clicked;
        ui_listConstaintsButton.onClick = ui_listConstaintsButton_clicked;
        ui_zeroButton.onClick = ui_zeroButton_clicked;
        ui_zeroButton.onAltClick = ui_zeroButton_altClicked;

        ui_etmButton.onClick = ui_etmButton_clicked;

        ui_autoParentButton.onClick = ui_autoParentButton_clicked;
        ui_autoParentButton.onAltClick = ui_autoParentButton_altClicked;

        ui_lockButton.onClick = ui_lockButton_clicked;
        ui_separateDimensionsButton.onClick = ui_separateDimensionsButton_clicked;
    }

    if ( settings.data.uiMode > 1 )
    {
        ui_locatorButton.onClick = ui_locatorButton_clicked;
        ui_extractLocatorsButton.onClick = ui_extractLocatorsValidButton.onClick = ui_extractLocatorsButton_clicked;
        ui_extractLocatorsMPSelector.onChange = ui_extractLocatorsMPSelector_changed;
    }

    debugLog.stopTimer( "Constraints ready." );
}
