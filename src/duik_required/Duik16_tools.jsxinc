function ui_buildTools(ui_toolsGroup)
{
	debugLog.startTimer("Loading misc. tools.");

	var copiedExp = '';

	// ====== FUNCTIONS ==============

	function setCurrentToolsPanel(panel)
	{
		if (panel == undefined) panel = 0;

		ui_toolsMainGroup.visible = panel == 0;
		ui_renameGroup.visible = panel == 1;
		uiSRGroup.visible = panel == 2;
		ui_measureGroup.visible = panel == 3;
		ui_propInfoGroup.visible = panel == 5;
		ui_scriptifyExpressionGroup.visible = panel == 6;
		ui_expressionLinksGroup.visible = panel == 7;
	}

	function initToolsUI()
	{
		setCurrentToolsPanel(0);
	}

	function setCurrentSRPanel(panel)
	{
		if (panel == undefined) panel = 0;

		ui_SRSelectGroup2.visible = panel == 0;
		ui_SRSelectGroup3.visible = panel == 1;
	}

	function generateNewName(oldName,i)
	{
		var prefix = ui_renamePrefixEdit.text;
		var suffix = ui_renameSuffixEdit.text;

		var newName = ui_renameNameEdit.text;
		if (newName == '')
		{
			newName = oldName;
			var removeFirst = parseInt(ui_renameRemoveFirstEdit.text);
			var removeLast = parseInt(ui_renameRemoveLastEdit.text);
			if (removeFirst > 0)
			{
				newName = newName.substr(removeFirst);
			}
			if (removeLast > 0)
			{
				newName = newName.substring(0,newName.length-removeLast);
			}
		}
		var newName = prefix + newName + suffix;

		var num = parseInt(ui_renameNumberEdit.text);
		if (! isNaN(num) && ui_renameNumberButton.value)
		{
			newName += (num + i);
		}

		return newName;
	}

	// ========= EVENTS ===========

	function ui_renameValidButton_clicked()
	{
		if (ui_renameTypeSelector.index == 0)
		{
			var comp = DuAEF.DuAE.Project.getActiveComp();
			if (!comp) return;
			var layers = comp.selectedLayers;
			if (layers.length == 0) return;

			app.beginUndoGroup('Duik | ' + "Rename");
			app.beginSuppressDialogs();

			var it = new Iterator(layers);
			it.do(function (layer)
			{
				var oldName = layer.name;
				var newName = generateNewName(oldName,it.current);
				
				layer.name = newName;
				if (ui_renameExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,newName);
			});
		}
		else if (ui_renameTypeSelector.index == 1)
		{
			var props = DuAEF.DuAE.Comp.getSelectedProps('ADBE FreePin3 PosPin Atom');
			if (props.length == 0) return;

			app.beginUndoGroup('Duik | ' + "Rename");
			app.beginSuppressDialogs();

			var num = parseInt(ui_renameNumberEdit.text);

			var it = new Iterator(props);
			it.do(function (prop)
			{
				var oldName = prop.getProperty().name;
				var newName = generateNewName(oldName,it.current);
				prop.getProperty().name = newName;
				if (ui_renameExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,newName);
			});
		}
		else
		{
			var items = app.project.selection;
			if (items.length == 0) return;

			app.beginUndoGroup('Duik | ' + "Rename");
			app.beginSuppressDialogs();

			var it = new Iterator(items);
			it.do(function (item)
			{
				var oldName = item.name;
				var newName = generateNewName(oldName,it.current);
				item.name = newName;
				if (ui_renameExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,newName);
			});
		}


		ui_renameRemoveFirstEdit.setText('0');
		ui_renameRemoveLastEdit.setText('0');

		app.endSuppressDialogs(false);
		app.endUndoGroup();
	}

	function ui_SRTypeSelector_changed()
	{
		if (ui_SRTypeSelector.index == 0)
		{
			ui_SRExpressionsSelector.visible = false;
			setCurrentSRPanel(0);
		}
		else if (ui_SRTypeSelector.index == 1)
		{
			ui_SRExpressionsSelector.visible = false;
			setCurrentSRPanel(0);
		}
		else if (ui_SRTypeSelector.index == 2)
		{
			ui_SRExpressionsSelector.visible = true;
			setCurrentSRPanel(0);
		}
		else if (ui_SRTypeSelector.index == 3)
		{
			ui_SRExpressionsSelector.visible = true;
			setCurrentSRPanel(1);
		}
	}

	function ui_SRCompSelector_changed()
	{
		if (ui_SRCompSelector.index == 1) ui_SRLayersSelector.visible = false;
		else ui_SRLayersSelector.visible = true;
	}

	function ui_SRValidButton_clicked()
	{
		if (ui_SRSearchEdit.text == ui_SRReplaceEdit.text) return;

		DuAEF.DuAE.App.beginUndoGroup("Search and replace");
		app.beginSuppressDialogs();

		//expressions
		if (ui_SRTypeSelector.index == 0)
		{
			//all comps
			if (ui_SRCompSelector.index == 1)
			{
				DuAEF.DuAE.Project.replaceInExpressions ( ui_SRSearchEdit.text, ui_SRReplaceEdit.text, ui_SRCaseSelector.index == 0 );
			}
			//active comp
			else
			{
				DuAEF.DuAE.Comp.replaceInExpressions( ui_SRSearchEdit.text, ui_SRReplaceEdit.text, undefined, ui_SRCaseSelector.index == 0, ui_SRLayersSelector.index == 1 )
			}
		}
		//texts
		else if (ui_SRTypeSelector.index == 1)
		{
			if (ui_SRCompSelector.index == 1)
			{
				var itItems = new Iterator(app.project.items);
				itItems.do(function (item)
				{
					if (item instanceof CompItem)
					{
						if (layer.locked) return;
						
						var itLayers = new Iterator(item.layers);
						itLayers.do(function (layer)
						{
							if(layer instanceof TextLayer)
							{
								var source = layer.sourceText.value;
								source.text = DuAEF.DuJS.String.replace(source.text,ui_SRSearchEdit.text,ui_SRReplaceEdit.text,ui_SRCaseSelector.index == 0);
								layer.sourceText.setValue(source);
							}
						});
					}
				});
			}
			else
			{
				var comp = DuAEF.DuAE.Project.getActiveComp();
				if (!comp) return;

				var layers = [];
				if (ui_SRLayersSelector.index == 1) layers = comp.selectedLayers;
				else layers = comp.layers;
				if (layers.length == 0) return;

				var it = new Iterator(layers);
				it.do(function (layer)
				{
					if(layer instanceof TextLayer)
					{
						if (layer.locked) return;

						var source = layer.sourceText.value;
						source.text = DuAEF.DuJS.String.replace(source.text,ui_SRSearchEdit.text,ui_SRReplaceEdit.text,ui_SRCaseSelector.index == 0);
						layer.sourceText.setValue(source);
					}
				});
			}
		}
		//layers
		else if (ui_SRTypeSelector.index == 2)
		{
			if (ui_SRCompSelector.index == 1)
			{
				var itItems = new Iterator(app.project.items);
				itItems.do(function (item)
				{
					if (item instanceof CompItem)
					{
						var itLayers = new Iterator(item.layers);
						itLayers.do(function (layer)
						{
							if (layer.locked) return;

							var oldName = layer.name;
							layer.name = DuAEF.DuJS.String.replace(oldName,ui_SRSearchEdit.text,ui_SRReplaceEdit.text,ui_SRCaseSelector.index == 0);
							if (ui_SRExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,layer.name);
						});
					}
				});
			}
			else
			{
				var comp = DuAEF.DuAE.Project.getActiveComp();
				if (!comp) return;

				var layers = [];
				if (ui_SRLayersSelector.index == 1) layers = comp.selectedLayers;
				else layers = comp.layers;
				if (layers.length == 0) return;

				var it = new Iterator(layers);
				it.do(function (layer)
				{
					if (layer.locked) return;

					var oldName = layer.name;
					layer.name = DuAEF.DuJS.String.replace(oldName,ui_SRSearchEdit.text,ui_SRReplaceEdit.text,ui_SRCaseSelector.index == 0);
					if (ui_SRExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,layer.name);
				});
			}
		}
		//items
		else if (ui_SRTypeSelector.index == 3)
		{
			if (ui_SRItemsSelector.index == 1) items = app.project.selection;
			else items = DuAEF.DuAE.convertCollectionToArray(app.project.items);

			if (items.length == 0) return;

			var it = new Iterator(items);
			it.do(function (item)
			{
				if ((ui_SRCompItemSelectButton.checked && item instanceof CompItem) || (ui_SRFootageItemSelectButton.checked && item instanceof FootageItem) || (ui_SRFolderItemSelectButton.checked && item instanceof FolderItem))
				{
					var oldName = item.name;
					item.name = DuAEF.DuJS.String.replace(oldName,ui_SRSearchEdit.text,ui_SRReplaceEdit.text,ui_SRCaseSelector.index == 0);
					if (ui_SRExpressionsSelector.index == 1) app.project.autoFixExpressions(oldName,item.name);
				}
			});

		}

		app.endSuppressDialogs(false);
		DuAEF.DuAE.App.endUndoGroup();
	}

	function ui_ELCompSelector_changed()
	{
		if (ui_ELCompSelector.index == 0) ui_ELLayersSelector.visible = true;
		else ui_ELLayersSelector.visible = false;
	}

	function ui_ELThisCompButton_clicked()
	{
		Duik.tools.removeThisComp(
			ui_ELCompSelector.index == 0,
			ui_ELCompSelector.index == 2,
			ui_ELLayersSelector.index == 1
			);
	}

	function ui_ELCompButton_clicked()
	{
		Duik.tools.removeComp(
			ui_ELCompSelector.index == 0,
			ui_ELCompSelector.index == 2,
			ui_ELLayersSelector.index == 1
			);
	}

	function ui_measureButton_clicked()
	{
		ui_measureValidButton_clicked();
		setCurrentToolsPanel(3);
	}

	function ui_measureValidButton_clicked()
	{
		var defaultStr = "Select two layers to measure the distance between them.";
		var comp = DuAEF.DuAE.Project.getActiveComp();
		if (!comp)
		{
			ui_measureLabel.text = defaultStr;
			DuAEF.DuScriptUI.setTextColor(ui_measureLabel, DuAEF.DuJS.Color.Colors.DARK_GREY );
			return;
		}
		var layers = comp.selectedLayers;
		if (layers.length < 2)
		{
			ui_measureLabel.text = defaultStr;
			DuAEF.DuScriptUI.setTextColor(ui_measureLabel, DuAEF.DuJS.Color.Colors.DARK_GREY );
			return;
		}

		var distance = DuAEF.DuAE.Layer.getDistance(layers[0], layers[1]);
		distance = Math.round(distance);
		ui_measureLabel.text = "The distance is " + distance + "px";
		DuAEF.DuScriptUI.setTextColor(ui_measureLabel, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
	}

	function ui_alignButton_clicked()
	{
		Duik.tools.align(
			ui_alignPositionButton.checked,
			ui_alignRotationButton.checked,
			ui_alignScaleButton.checked,
			ui_alignOpacityButton.checked
		);
	}

	function ui_removeExpressionsButton_clicked()
	{
		Duik.tools.removeExpressions( true );
	}

	function ui_removeExpressionsButton_altClicked()
	{
		Duik.tools.removeExpressions( false );
	}

	function ui_editModeButton_clicked()
	{
		Duik.tools.editMode();
	}

	function ui_propInfoButton_clicked()
	{
		//get property
		var props = DuAEF.DuAE.Comp.getSelectedProps();
		if (props.length == 0) return;
		var prop = props[props.length-1];
		ui_propInfoIndex.text = prop.index;
		ui_propInfoName.text = prop.name;
		ui_propInfoMatchName.text = prop.matchName;
		ui_propInfoDimensions.text = prop.dimensions;
		ui_propInfoLink.text = DuAEF.DuAE.Property.getExpressionLink(prop, true, true);
		//values
		var preExpression = ui_propPreExp.value;
		var fastMode = !ui_propPrecision.value;
		//Min and max val per axis
		var minVal = "";
		var maxVal = "";
		if (prop.dimensions == 1)
		{
			var range = DuAEF.DuAE.Property.getRange(prop, 0, preExpression, fastMode);
			minVal = Math.round(range[0]*100)/100;
			maxVal = Math.round(range[1]*100)/100;
		}
		else
		{
			for (var i = 0; i < prop.dimensions ; i++)
			{
				var range = DuAEF.DuAE.Property.getRange(prop, i, preExpression);
				if (i == 0)
				{
					minVal += "[ ";
					maxVal += "[ ";
				}

				minVal += Math.round(range[0]*100)/100;
				maxVal += Math.round(range[1]*100)/100;

				if (i == prop.dimensions - 1)
				{
					minVal += " ]";
					maxVal += " ]";
				}
				else
				{
					minVal += " , ";
					maxVal += " , ";
				}
			}
		}
		
		ui_propMinVal.text = minVal;
		ui_propMaxVal.text = maxVal;
		var maxSpeed = Math.round(DuAEF.DuAE.Property.getMaxVelocity(prop, preExpression, fastMode)*100)/100;
		ui_propVelocity.text = maxSpeed;
		if (maxSpeed == 0) ui_propAverageVelocity.text = 0;
		else ui_propAverageVelocity.text = Math.round(DuAEF.DuAE.Property.getAverageSpeed([prop], preExpression, fastMode)*100)/100;

		setCurrentToolsPanel(5);
	}

	function ui_scriptifyExpressionButton_clicked()
	{
		var props = DuAEF.DuAE.Comp.getSelectedProps();
		if (props.length == 0) return;
		prop = props.pop();
		setCurrentToolsPanel(6);
		ui_stringifiedExpressionEdit.text = DuAEF.DuAE.Property.scriptifyExpression(prop);
	}

	function ui_copyExpButton_clicked()
	{
		Duik.tools.copyExpression();
	}

	function ui_pasteExpButton_clicked()
	{
		Duik.tools.pasteExpression();
	}

	function ui_importAnimButton_clicked()
	{
		var comp = DuAEF.DuAE.Project.getActiveComp();
		if (!comp) return;
		var layers = DuAEF.DuAE.Comp.getSelectedLayers();
		if (layers.length == 0) layers = comp.layers;
		if (layers.length == 0) return;

		//Ask for the file
		var openFile = File.openDialog("Please select the animation file.","JSON: *.DuAEF;*.json,All: *.*");
		if (!openFile) return;

		//white lists
		var whiteList;
		if (!ui_importAnimationKeysAllButton.checked)
		{
			whiteList = [];
			if (ui_importAnimationKeysPosButton.checked)
			{
				whiteList.push('ADBE Position');
				whiteList.push('ADBE Position_0');
				whiteList.push('ADBE Position_1');
				whiteList.push('ADBE Position_2');
			}
			if (ui_importAnimationKeysRotButton.checked)
			{
				whiteList.push('ADBE Orientation');
				whiteList.push('ADBE Rotate X');
				whiteList.push('ADBE Rotate Y');
				whiteList.push('ADBE Rotate Z');
			}
			if (ui_importAnimationKeysScaleButton.checked)
			{
				whiteList.push('ADBE Scale');
			}
			if (ui_importAnimationKeysOpacityButton.checked)
			{
				whiteList.push('ADBE Opacity');
			}
			if (ui_importAnimationKeysMaskButton.checked)
			{
				whiteList.push('ADBE Mask Shape');
				whiteList.push('ADBE Vector Shape');
			}
			if (ui_importAnimationKeysFXButton.checked)
			{
				whiteList.push('ADBE Effect Parade');
			}
		}

		//options
		var onlyKeyframes = ui_keyframesSelector.index == 0;
		var replace = ui_importAnimationReplaceButton.checked;
		var offset =  ui_importAnimationOffsetSelector.index == 0;

		app.beginUndoGroup('Duik | ' + "Import Animation");

		var data = DuAEF.Interchange.animation.loadAnimFromJson(openFile);
		var remaining = DuAEF.DuAE.Layer.setAnims(layers, data, undefined, undefined, undefined, onlyKeyframes, replace , whiteList, offset);

		if (remaining.length > 0)
		{
			var ui_importLayerPicker = DuAEF.DuScriptUI.createLayerPickerDialog("Missing layers");
			for (var i = 0, num = remaining.length; i < num; i++)
			{
				ui_importLayerPicker.addSelector(remaining[i]._index + ' | ' + remaining[i]._name);
				//try to preselect by name
				var ok = false;
				for (var j = 1, numLayers = comp.numLayers; j <= numLayers; j++)
				{
					var l = comp.layer(j);
					if (l.name == remaining[i]._name)
					{
						ui_importLayerPicker.layerPicker.selectors[i].setCurrentIndex(j);
						ok = true;
						break;
					}
				}
				if (!ok && remaining[i]._index > 0 && remaining[i]._index <= comp.numLayers) ui_importLayerPicker.layerPicker.selectors[i].setCurrentIndex(remaining[i]._index);
			}

			ui_importLayerPicker.onAccept = function () {app.beginUndoGroup('Duik | ' + "Import Animation"); DuAEF.DuAE.Layer.setAllAnims( ui_importLayerPicker.getLayers(), remaining, undefined, undefined, undefined, onlyKeyframes, replace , whiteList, offset); app.endUndoGroup();};

			DuAEF.DuScriptUI.showUI(ui_importLayerPicker);
		}

		app.endUndoGroup();
	}

	function ui_importAnimationKeysAllButton_clicked()
	{
		var checked = ui_importAnimationKeysAllButton.checked;
		ui_importAnimationKeysPosButton.setChecked(checked);
		ui_importAnimationKeysRotButton.setChecked(checked);
		ui_importAnimationKeysScaleButton.setChecked(checked);
		ui_importAnimationKeysOpacityButton.setChecked(checked);
		ui_importAnimationKeysMaskButton.setChecked(checked);
		ui_importAnimationKeysFXButton.setChecked(checked);
	}

	function ui_exportAnimButton_clicked()
	{
		var layers = DuAEF.DuAE.Comp.getSelectedLayers();
		if (layers.length == 0) return;
		var comp = layers[0].containingComp;

		//Asks for a save file
		var saveFile = DuAEF.DuJS.Fs.saveFileDialog("Where do you want to export the animation?", "DuAEF JSON: *.DuAEF;*.json", "DuAEF");
		if (!saveFile) return;

		//wether to store only selected keys if there are any
		var selected = DuAEF.DuAE.Layer.haveSelectedKeys(layers);
		//start time of the animation to store
		var startTime = 86339;
		//end time of the animation to store
		var endTime = comp.workAreaDuration + comp.workAreaStart;

		// If there are selected keys, look for the time of the first one
		if (selected)
		{
			var testTime = DuAEF.DuAE.Layer.firstKeyFrameTime(layers,true);
			if (testTime < startTime) startTime = testTime;
		}
		//or the work area
		else
		{
			startTime = app.project.activeItem.workAreaStart;
		}

		DuAEF.Interchange.animation.exportAnimToJson(saveFile,layers,selected,[startTime,endTime]);
	}


	// ========== UI ==================

	ui_toolsGroup.orientation = 'stack';

	//tools
	var ui_toolsMainGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2 && !standAlone) DuAEF.DuScriptUI.addSeparator(ui_toolsMainGroup,"Tools");

	var ui_textGroup;
	if ( settings.data.uiMode > 2 ) ui_textGroup = DuAEF.DuScriptUI.addGroup(ui_toolsMainGroup,'row');
	
	var ui_renameButton = DuAEF.DuScriptUI.addButton(
		settings.data.uiMode > 2 ? ui_textGroup : ui_toolsMainGroup,
		settings.data.uiMode > 2 ? '' : "Rename...",
		DuAEF.DuBinary.toFile(w25_rename_l),
		"Rename stuff",
		DuAEF.DuBinary.toFile(w25_rename_r)
		);
	if (settings.data.uiMode > 2) ui_renameButton.alignment = ['center','top'];
	ui_renameButton.setHelp("Rename", riggingtoolsHelp, riggingtoolsLink);
	var ui_searchReplaceButton = DuAEF.DuScriptUI.addButton(
		settings.data.uiMode > 2 ? ui_textGroup : ui_toolsMainGroup,
		settings.data.uiMode > 2 ? '' : "Search and replace...",
		DuAEF.DuBinary.toFile(w25_searchreplace_l),
		"Search and replace text",
		DuAEF.DuBinary.toFile(w25_searchreplace_r)
		);
	if (settings.data.uiMode > 2) ui_searchReplaceButton.alignment = ['center','top'];
	ui_searchReplaceButton.setHelp("Search and Replace", riggingtoolsHelp, riggingtoolsLink);
	
	var ui_moveLayersGroup;
	if (settings.data.uiMode > 2) ui_moveLayersGroup = DuAEF.DuScriptUI.addGroup(ui_toolsMainGroup,'row');
	else if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_toolsMainGroup);
	
	var ui_measureButton = DuAEF.DuScriptUI.addButton(
		settings.data.uiMode > 2 ? ui_moveLayersGroup : ui_toolsMainGroup,
		settings.data.uiMode > 2 ? '' : "Measure distance...",
		DuAEF.DuBinary.toFile(w25_measure_l),
		"Measure the distance between two layers",
		DuAEF.DuBinary.toFile(w25_measure_r)
		);
	if (settings.data.uiMode > 2) ui_measureButton.alignment = ['center','top'];
	ui_measureButton.setHelp("Measure Distance", riggingtoolsHelp, riggingtoolsLink);

	var ui_alignButtonsGroup = DuAEF.DuScriptUI.addGroup(settings.data.uiMode > 2 ? ui_moveLayersGroup : ui_toolsMainGroup,'row');
	var ui_alignButton = DuAEF.DuScriptUI.addButton(ui_alignButtonsGroup,settings.data.uiMode > 2 ? '' : "Align layers",DuAEF.DuBinary.toFile(w25_align_l),"Align two (or more) layers together.\nAll selected layers will be aligned to the last selected one.",DuAEF.DuBinary.toFile(w25_align_r));
	ui_alignButton.setHelp("Align Layers", riggingtoolsHelp, riggingtoolsLink);
	var ui_alignOptionsButton = DuAEF.DuScriptUI.addButton(ui_alignButtonsGroup,'',DuAEF.DuBinary.toFile(w14_plus_m),"Alignment options",DuAEF.DuBinary.toFile(w14_plus_r));
	ui_alignOptionsButton.alignment = ['right','center'];
	if (settings.data.uiMode > 2) ui_alignButtonsGroup.alignment = ['center','top'];

	var ui_expressionsGroup;
	if (settings.data.uiMode > 2) ui_expressionsGroup = DuAEF.DuScriptUI.addGroup(ui_toolsMainGroup,'row');
	else if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_toolsMainGroup);

	var ui_editModeButton = DuAEF.DuScriptUI.addButton(
		settings.data.uiMode > 2 ? ui_expressionsGroup : ui_toolsMainGroup,
		settings.data.uiMode > 2 ? '' : "Toggle edit mode",
		DuAEF.DuBinary.toFile(w25_unparent_l),
		"(Un)parent the children of the layer(s) to be able to adjust the transformation of the layer(s) without affecting the children.",
		DuAEF.DuBinary.toFile(w25_unparent_r)
		);
	if (settings.data.uiMode > 2) ui_editModeButton.alignment = ['center','top'];
	ui_editModeButton.setHelp("Edit Mode", riggingtoolsHelp, riggingtoolsLink);

	if (settings.data.uiMode > 0)
	{
		var ui_expressionLinksButton = DuAEF.DuScriptUI.addButton(
			settings.data.uiMode > 2 ? ui_expressionsGroup : ui_toolsMainGroup,
			settings.data.uiMode > 2 ? '' : "Expression links tools",
			DuAEF.DuBinary.toFile(w25_ae_pickwhip_l),
			"Tools to adjust how expression links are made.",
			DuAEF.DuBinary.toFile(w25_ae_pickwhip_r)
			);
		if (settings.data.uiMode > 2) ui_expressionLinksButton.alignment = ['center','top'];
		ui_expressionLinksButton.setHelp("Remove Expressions", riggingtoolsHelp, riggingtoolsLink);

		var ui_removeExpressionsButton = DuAEF.DuScriptUI.addButton(
			settings.data.uiMode > 2 ? ui_expressionsGroup : ui_toolsMainGroup,
			settings.data.uiMode > 2 ? '' : "Remove expressions",
			DuAEF.DuBinary.toFile(w25_removeexpression_l),
			"Removes the expressions of the selected properties/layers, keeping the post-expression value.",
			DuAEF.DuBinary.toFile(w25_removeexpression_r)
			);
		if (settings.data.uiMode > 2) ui_removeExpressionsButton.alignment = ['center','top'];
		ui_removeExpressionsButton.setHelp("Remove Expressions", riggingtoolsHelp, riggingtoolsLink);
		
		var ui_pasteExpGroup = DuAEF.DuScriptUI.addGroup(settings.data.uiMode > 2 ? ui_expressionsGroup : ui_toolsMainGroup,'row');
		ui_copyExpButton = DuAEF.DuScriptUI.addButton(ui_pasteExpGroup,settings.data.uiMode > 2 ? '' : "Copy Expression",DuAEF.DuBinary.toFile(w25_copy_l),"Copy selected expression",DuAEF.DuBinary.toFile(w25_copy_r));
		ui_copyExpButton.setHelp("Copy and Paste Expressions", riggingtoolsHelp, riggingtoolsLink);
		var ui_pasteExpButton = DuAEF.DuScriptUI.addButton(ui_pasteExpGroup,settings.data.uiMode >= 2 ? '' : "Paste",DuAEF.DuBinary.toFile(w25_paste_l),"Paste expressions",DuAEF.DuBinary.toFile(w25_paste_r));
		ui_pasteExpButton.setHelp("Copy and Paste Expressions", riggingtoolsHelp, riggingtoolsLink);
		if (settings.data.uiMode > 2) ui_pasteExpGroup.alignment = ['center','top'];

		var ui_ioAnimationGroup = DuAEF.DuScriptUI.addGroup(ui_toolsMainGroup,'row');
		var ui_exportAnimButton = DuAEF.DuScriptUI.addButton(ui_ioAnimationGroup,settings.data.uiMode > 2 ? '' : "Export Animation",DuAEF.DuBinary.toFile(w25_exportanim_l),"Export animation",DuAEF.DuBinary.toFile(w25_exportanim_r));
		ui_exportAnimButton.setHelp('Export Animation',exportHelp, exportLink)
		var ui_importAnimButtonGroup = DuAEF.DuScriptUI.addGroup(ui_ioAnimationGroup);
		var ui_importAnimButton = DuAEF.DuScriptUI.addButton(ui_importAnimButtonGroup,settings.data.uiMode >= 2 ? '' : "Import",DuAEF.DuBinary.toFile(w25_importanim_l),"Import animation",DuAEF.DuBinary.toFile(w25_importanim_r));
		var ui_importAnimOptionsButton = DuAEF.DuScriptUI.addButton(ui_importAnimButtonGroup,'',DuAEF.DuBinary.toFile(w14_plus_m),"Animation import options",DuAEF.DuBinary.toFile(w14_plus_r));
		ui_importAnimOptionsButton.alignment = ['right','center'];
		ui_importAnimButton.setHelp("Import Animation",importHelp,importLink);
		ui_importAnimOptionsButton.setHelp("Import Animation",importHelp,importLink);
		if (settings.data.uiMode > 2) ui_ioAnimationGroup.alignment = ['center','top'];

		if (settings.data.uiMode >= 2)
		{
			var ui_propsGroup;
			if (settings.data.uiMode > 2) ui_propsGroup = DuAEF.DuScriptUI.addGroup(ui_toolsMainGroup,'row');

			var ui_propInfoButton = DuAEF.DuScriptUI.addButton(
				settings.data.uiMode > 2 ? ui_propsGroup : ui_toolsMainGroup, 
				settings.data.uiMode > 2 ? '' : "Get prop info...",
				DuAEF.DuBinary.toFile(w25_propinfo_l),
				"Gets some useful information about the selected property",
				DuAEF.DuBinary.toFile(w25_propinfo_r)
				);
			if (settings.data.uiMode > 2) ui_propInfoButton.alignment = ['center','top'];
			ui_propInfoButton.setHelp("Get property info", riggingtoolsHelp, riggingtoolsLink);
			var ui_scriptifyExpressionButton = DuAEF.DuScriptUI.addButton(
				settings.data.uiMode > 2 ? ui_propsGroup : ui_toolsMainGroup, 
				settings.data.uiMode > 2 ? '' : "Scriptify expression...",
				DuAEF.DuBinary.toFile(w25_jsstr_l),
				"Converts the expression as a string which can be used in a script.",
				DuAEF.DuBinary.toFile(w25_jsstr_r)
				);
			if (settings.data.uiMode > 2) ui_scriptifyExpressionButton.alignment = ['center','top'];
			ui_scriptifyExpressionButton.setHelp("Scriptify expression", riggingtoolsHelp, riggingtoolsLink);
		}
	}

	//Align
	var ui_alignWindow = DuAEF.DuScriptUI.createPopup("Align layers");
	var ui_alignGroup = ui_alignWindow.contents;
	var ui_alignPositionButton = DuAEF.DuScriptUI.addCheckBox(ui_alignGroup,"Position",DuAEF.DuBinary.toFile(w14_pos_l),"Align the positions of the layers",DuAEF.DuBinary.toFile(w14_pos_r));
	var ui_alignRotationButton = DuAEF.DuScriptUI.addCheckBox(ui_alignGroup,"Rotation",DuAEF.DuBinary.toFile(w14_rotation_l),"Align the orientations of the layers",DuAEF.DuBinary.toFile(w14_rotation_r));
	var ui_alignScaleButton = DuAEF.DuScriptUI.addCheckBox(ui_alignGroup,"Scale",DuAEF.DuBinary.toFile(w14_scale_l),"Align the scales of the layers",DuAEF.DuBinary.toFile(w14_scale_r));
	var ui_alignOpacityButton = DuAEF.DuScriptUI.addCheckBox(ui_alignGroup,"Opacity",DuAEF.DuBinary.toFile(w14_opacity_l),"Align the opacities of the layers",DuAEF.DuBinary.toFile(w14_opacity_r));
	DuAEF.DuScriptUI.addStaticText(ui_alignGroup,"All selected layers will be aligned\nto the last selected one.")
	var ui_alignValidButton = DuAEF.DuScriptUI.addButton(ui_alignGroup,'Align',DuAEF.DuBinary.toFile(w25_check_g),"Align the layers",DuAEF.DuBinary.toFile(w25_check_r));

	//Rename
	var ui_renameGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_renameGroup,"Rename");

	var ui_renameTypeSelector = DuAEF.DuScriptUI.addSelector(ui_renameGroup);
	ui_renameTypeSelector.addButton("Layers",DuAEF.DuBinary.toFile(w14_aelayers_l),"Rename layers",DuAEF.DuBinary.toFile(w14_aelayers_r));
	ui_renameTypeSelector.addButton("Pins",DuAEF.DuBinary.toFile(w14_pin_l),"Rename puppet pins",DuAEF.DuBinary.toFile(w14_pin_r));
	ui_renameTypeSelector.addButton("Project items",DuAEF.DuBinary.toFile(w14_items_l),"Rename items in the project panel",DuAEF.DuBinary.toFile(w14_items_r));
	ui_renameTypeSelector.setCurrentIndex(0);

	var ui_renameExpressionsSelector = DuAEF.DuScriptUI.addSelector(ui_renameGroup);
	ui_renameExpressionsSelector.addButton("Don't update Expressions",DuAEF.DuBinary.toFile(w14_code_l),"Do not update expressions after renaming",DuAEF.DuBinary.toFile(w14_code_r));
	ui_renameExpressionsSelector.addButton("Update Expressions",DuAEF.DuBinary.toFile(w14_updatecode_l),"Update expressions after renaming",DuAEF.DuBinary.toFile(w14_updatecode_r));
	ui_renameExpressionsSelector.setCurrentIndex(1);

	var ui_renameForm =  DuAEF.DuScriptUI.addGroup(ui_renameGroup,'column');
	DuAEF.DuScriptUI.setBackgroundColor(ui_renameForm,DuAEF.DuJS.Color.Colors.ABYSS_GREY);
	ui_renameForm.alignment = ['fill','top'];
	ui_renameForm.alignChildren = ['center','top'];
	var ui_renameRemoveFirstEdit = DuAEF.DuScriptUI.addEditText(ui_renameForm,'',"Remove the first "," digits.",'0');
	var ui_renameRemoveLastEdit = DuAEF.DuScriptUI.addEditText(ui_renameForm,'',"Remove the last "," digits.",'0');
	var ui_renamNumberGroup = DuAEF.DuScriptUI.addGroup(ui_renameForm,'row');
	var ui_renameNumberButton = ui_renamNumberGroup.add('checkbox',undefined,'');
	var ui_renameNumberEdit = DuAEF.DuScriptUI.addEditText(ui_renamNumberGroup,'1',"Number from ");

	var ui_renamNameGroup = DuAEF.DuScriptUI.addGroup(ui_renameGroup,'row');
	DuAEF.DuScriptUI.setBackgroundColor(ui_renamNameGroup,DuAEF.DuJS.Color.Colors.ABYSS_GREY);
	ui_renamNameGroup.alignment = ['fill','top'];
	ui_renamNameGroup.alignChildren = ['fill','top'];
	var ui_renamePrefixEdit = DuAEF.DuScriptUI.addEditText(ui_renamNameGroup,'','','',"Prefix" + '_');
	var ui_renameNameEdit = DuAEF.DuScriptUI.addEditText(ui_renamNameGroup,'','','',"Name");
	var ui_renameSuffixEdit = DuAEF.DuScriptUI.addEditText(ui_renamNameGroup,'','','','_' + "Suffix");

	var ui_renameValidGroup = DuAEF.DuScriptUI.addGroup(ui_renameGroup);
	ui_renameValidGroup.alignment = ['fill','top'];
	var ui_renameCancelButton = DuAEF.DuScriptUI.addButton(ui_renameValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
	var ui_renameValidButton = DuAEF.DuScriptUI.addButton(ui_renameValidGroup,'Rename',DuAEF.DuBinary.toFile(w25_check_g),"Rename selection",DuAEF.DuBinary.toFile(w25_check_r));

	//Search and replace

	var uiSRGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(uiSRGroup,"Search and replace");

	var ui_SRTypeSelector = DuAEF.DuScriptUI.addSelector(uiSRGroup);
	ui_SRTypeSelector.addButton("Expressions",DuAEF.DuBinary.toFile(w14_code_l),"Search and replace text in expressions",DuAEF.DuBinary.toFile(w14_code_r));
	ui_SRTypeSelector.addButton("Texts",DuAEF.DuBinary.toFile(w14_text_l),"Search and replace text in sources of text layers",DuAEF.DuBinary.toFile(w14_text_r));
	ui_SRTypeSelector.addButton("Layers",DuAEF.DuBinary.toFile(w14_aelayers_l),"Search and replace text in layer names",DuAEF.DuBinary.toFile(w14_aelayers_r));
	ui_SRTypeSelector.addButton("Project items",DuAEF.DuBinary.toFile(w14_items_l),"Search and replace text in project item names",DuAEF.DuBinary.toFile(w14_items_r));
	ui_SRTypeSelector.setCurrentIndex(0);

	var ui_SRSubSelectGroup = DuAEF.DuScriptUI.addGroup(uiSRGroup,'stack');
	var ui_SRSelectGroup2 = DuAEF.DuScriptUI.addGroup(ui_SRSubSelectGroup,'column');
	var ui_SRCompSelector = DuAEF.DuScriptUI.addSelector(ui_SRSelectGroup2);
	ui_SRCompSelector.addButton("Active comp.",DuAEF.DuBinary.toFile(w14_comp_l),"Search and replace text in the active composition",DuAEF.DuBinary.toFile(w14_comp_r));
	ui_SRCompSelector.addButton("All comps.",DuAEF.DuBinary.toFile(w14_project_l),"Search and replace text in the whole project",DuAEF.DuBinary.toFile(w14_project_r));
	ui_SRCompSelector.setCurrentIndex(0);

	var ui_SRLayersSelector = DuAEF.DuScriptUI.addSelector(ui_SRSelectGroup2);
	ui_SRLayersSelector.addButton("All layers",DuAEF.DuBinary.toFile(w14_alllayers_l),"Search and replace text in the selected layers only",DuAEF.DuBinary.toFile(w14_alllayers_r));
	ui_SRLayersSelector.addButton("Selected layers",DuAEF.DuBinary.toFile(w14_selectedlayers_l),"Search and replace text in all layers",DuAEF.DuBinary.toFile(w14_selectedlayers_r));
	ui_SRLayersSelector.setCurrentIndex(0);

	var ui_SRSelectGroup3 = DuAEF.DuScriptUI.addGroup(ui_SRSubSelectGroup,settings.data.uiMode >= 2 ? 'row' : 'column');
	ui_SRSelectGroup3.alignment = ['fill','top'];
	ui_SRSelectGroup3.alignChildren = ['left','top'];
	var ui_SRItemsTypeGroup = DuAEF.DuScriptUI.addGroup(ui_SRSelectGroup3,'row');
	var ui_SRCompItemSelectButton = DuAEF.DuScriptUI.addCheckBox(ui_SRItemsTypeGroup,'',DuAEF.DuBinary.toFile(w25_comp_l),"Search and replace text in compositions",DuAEF.DuBinary.toFile(w25_comp_r));
	var ui_SRFootageItemSelectButton = DuAEF.DuScriptUI.addCheckBox(ui_SRItemsTypeGroup,'',DuAEF.DuBinary.toFile(w25_footage_l),"Search and replace text in footages",DuAEF.DuBinary.toFile(w25_footage_r));
	var ui_SRFolderItemSelectButton = DuAEF.DuScriptUI.addCheckBox(ui_SRItemsTypeGroup,'',DuAEF.DuBinary.toFile(w25_folder_l),"Search and replace text in folders",DuAEF.DuBinary.toFile(w25_folder_r));
	var ui_SRItemsSelector = DuAEF.DuScriptUI.addSelector(ui_SRSelectGroup3);
	ui_SRItemsSelector.addButton("All items",DuAEF.DuBinary.toFile(w14_allitems_l),"Search and replace text in all items",DuAEF.DuBinary.toFile(w14_allitems_r));
	ui_SRItemsSelector.addButton("Selected items",DuAEF.DuBinary.toFile(w14_selecteditems_l),"Search and replace text in the selected items only",DuAEF.DuBinary.toFile(w14_selecteditems_r));
	ui_SRItemsSelector.setCurrentIndex(0);

	var ui_SRCaseSelector = DuAEF.DuScriptUI.addSelector(uiSRGroup);
	ui_SRCaseSelector.addButton("Case sensitive",DuAEF.DuBinary.toFile(w14_casesensitive_l),"Case sensitive search",DuAEF.DuBinary.toFile(w14_casesensitive_r));
	ui_SRCaseSelector.addButton("Case insensitive",DuAEF.DuBinary.toFile(w14_caseinsensitive_l),"Case insensitive search",DuAEF.DuBinary.toFile(w14_caseinsensitive_r));
	ui_SRCaseSelector.setCurrentIndex(0);

	var ui_SRExpressionsSelector = DuAEF.DuScriptUI.addSelector(uiSRGroup);
	ui_SRExpressionsSelector.addButton("Don't update Expressions",DuAEF.DuBinary.toFile(w14_code_l),"Do not update expressions after renaming",DuAEF.DuBinary.toFile(w14_code_r));
	ui_SRExpressionsSelector.addButton("Update Expressions",DuAEF.DuBinary.toFile(w14_updatecode_l),"Update expressions after renaming",DuAEF.DuBinary.toFile(w14_updatecode_r));
	ui_SRExpressionsSelector.setCurrentIndex(1);

	var ui_SRSearchEdit = DuAEF.DuScriptUI.addEditText(uiSRGroup,'','','',"Search");
	DuAEF.DuScriptUI.setBackgroundColor(ui_SRSearchEdit,DuAEF.DuJS.Color.Colors.ABYSS_GREY);

	var ui_SRReplaceEdit = DuAEF.DuScriptUI.addEditText(uiSRGroup,'','','',"Replace");
	DuAEF.DuScriptUI.setBackgroundColor(ui_SRReplaceEdit,DuAEF.DuJS.Color.Colors.ABYSS_GREY);

	var ui_SRValidGroup = DuAEF.DuScriptUI.addGroup(uiSRGroup);
	ui_SRValidGroup.alignment = ['fill','top'];
	var ui_SRCancelButton = DuAEF.DuScriptUI.addButton(ui_SRValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
	var ui_SRValidButton = DuAEF.DuScriptUI.addButton(ui_SRValidGroup,'Replace',DuAEF.DuBinary.toFile(w25_check_g),"Search and replace text",DuAEF.DuBinary.toFile(w25_check_r));

	// Expression links
	var ui_expressionLinksGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_expressionLinksGroup,"Expression links tools");

	var ui_ELSubSelectGroup = DuAEF.DuScriptUI.addGroup(ui_expressionLinksGroup,'stack');
	var ui_ELSelectGroup2 = DuAEF.DuScriptUI.addGroup(ui_ELSubSelectGroup,'column');
	var ui_ELCompSelector = DuAEF.DuScriptUI.addSelector(ui_ELSelectGroup2);
	ui_ELCompSelector.addButton("Active comp.",DuAEF.DuBinary.toFile(w14_comp_l),"Search and replace expressions in the active composition",DuAEF.DuBinary.toFile(w14_comp_r));
	ui_ELCompSelector.addButton("All comps.",DuAEF.DuBinary.toFile(w14_project_l),"Search and replace expressions in the whole project",DuAEF.DuBinary.toFile(w14_project_r));
	ui_ELCompSelector.addButton("Selected comps.",DuAEF.DuBinary.toFile(w14_project_l),"Search and replace expressions in the selected compositions",DuAEF.DuBinary.toFile(w14_project_r));
	ui_ELCompSelector.setCurrentIndex(0);

	var ui_ELLayersSelector = DuAEF.DuScriptUI.addSelector(ui_ELSelectGroup2);
	ui_ELLayersSelector.addButton("All layers",DuAEF.DuBinary.toFile(w14_alllayers_l),"Search and replace expressions in the selected layers only",DuAEF.DuBinary.toFile(w14_alllayers_r));
	ui_ELLayersSelector.addButton("Selected layers",DuAEF.DuBinary.toFile(w14_selectedlayers_l),"Search and replace expressions in all layers",DuAEF.DuBinary.toFile(w14_selectedlayers_r));
	ui_ELLayersSelector.setCurrentIndex(0);

	var ui_ELCompGroup = DuAEF.DuScriptUI.addGroup(ui_expressionLinksGroup, 'row');
	var ui_ELThisCompButton = DuAEF.DuScriptUI.addButton(
		ui_ELCompGroup,
		"Remove 'thisComp'",
		undefined,
		"Replaces all 'thisComp' occurences by 'comp(\"name\")'"
	)
	var ui_ELCompButton = DuAEF.DuScriptUI.addButton(
		ui_ELCompGroup,
		"Remove 'comp(\"name\")'",
		undefined,
		"Replaces all 'comp(\"name\")' occurences by 'thisComp'"
	)

	var ui_ELCancelButton = DuAEF.DuScriptUI.addButton(ui_expressionLinksGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));

	// Measure
	var ui_measureGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_measureGroup,"Measure");
	var ui_measureLabel = DuAEF.DuScriptUI.addStaticText(ui_measureGroup,"Select two layers to measure the distance between them.",undefined,undefined,true,true);
	ui_measureLabel.maximumSize.width = 150;
	DuAEF.DuScriptUI.setTextColor(ui_measureLabel, DuAEF.DuJS.Color.Colors.DARK_GREY );
	var ui_measureValidGroup = DuAEF.DuScriptUI.addGroup(ui_measureGroup);
	ui_measureValidGroup.alignment = ['fill','top'];
	var ui_measureCancelButton = DuAEF.DuScriptUI.addButton(ui_measureValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
	var ui_measureValidButton = DuAEF.DuScriptUI.addButton(ui_measureValidGroup,'Measure',DuAEF.DuBinary.toFile(w25_check_g),"Measure distance",DuAEF.DuBinary.toFile(w25_check_r));

	// Prop Info

	var ui_propInfoGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_propInfoGroup,"Property Info");
	var ui_propInfoForm = DuAEF.DuScriptUI.addForm(ui_propInfoGroup);
	var ui_propInfoIndex = ui_propInfoForm.addField("Index","statictext","0","The index of the property")[1];
	var ui_propInfoName = ui_propInfoForm.addField("Name","edittext","","The name of the property")[1];
	var ui_propInfoMatchName = ui_propInfoForm.addField("Match Name","edittext","","The matchName of the property")[1];
	var ui_propInfoDimensions = ui_propInfoForm.addField("Num Dimensions","statictext","0","The number of dimensions of the property")[1];
	var ui_propInfoLink = ui_propInfoForm.addField("Expression link","edittext","","The expression link to the property (from the layer)")[1];
	var ui_propMinVal = ui_propInfoForm.addField("Minimum value","edittext","","The minimum value during the animation.")[1];
	var ui_propMaxVal = ui_propInfoForm.addField("Maximum value","edittext","","The maximum value during the animation.")[1];
	var ui_propVelocity = ui_propInfoForm.addField("Maximum velocity","edittext","","The maximum velocity during the animation.")[1];
	var ui_propAverageVelocity = ui_propInfoForm.addField("Average velocity","edittext","","The average velocity during the animation.")[1];
	var ui_propPreExp = ui_propInfoForm.addField("Pre-expression val.","checkbox","","Display pre-expression values.")[1];
	var ui_propPrecision = ui_propInfoForm.addField("Hi-precision","checkbox","","Samples the values and velocity with a higher precision.\nWarning: this can be quite slong if the composition is very long.")[1];
	var ui_propInfoValidGroup = DuAEF.DuScriptUI.addGroup(ui_propInfoGroup);
	ui_propInfoValidGroup.alignment = ['fill','top'];
	var ui_propInfoCancelButton = DuAEF.DuScriptUI.addButton(ui_propInfoValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
	var ui_propInfoValidButton = DuAEF.DuScriptUI.addButton(ui_propInfoValidGroup,'Get prop info',DuAEF.DuBinary.toFile(w25_check_g),"Get property info",DuAEF.DuBinary.toFile(w25_check_r));

	// Scriptify expression

	var ui_scriptifyExpressionGroup = DuAEF.DuScriptUI.addGroup(ui_toolsGroup,'column');
	if (settings.data.uiMode < 2) DuAEF.DuScriptUI.addSeparator(ui_scriptifyExpressionGroup,"Scriptify expression");
	var ui_stringifiedExpressionEdit = ui_scriptifyExpressionGroup.add('edittext', undefined, "", {multiline:true});
	ui_stringifiedExpressionEdit.alignment = ['fill', 'fill'];
	var ui_scriptifyExpressionValidGroup = DuAEF.DuScriptUI.addGroup(ui_scriptifyExpressionGroup);
	ui_scriptifyExpressionValidGroup.alignment = ['fill','top'];
	var ui_scriptifyExpressionCancelButton = DuAEF.DuScriptUI.addButton(ui_scriptifyExpressionValidGroup,'Back',DuAEF.DuBinary.toFile(w25_back_m),"Back",DuAEF.DuBinary.toFile(w25_back_r));
	var ui_scriptifyExpressionValidButton = DuAEF.DuScriptUI.addButton(ui_scriptifyExpressionValidGroup,'Scriptify!',DuAEF.DuBinary.toFile(w25_check_g),"Scriptify the expression",DuAEF.DuBinary.toFile(w25_check_r));

	//Import Animation
	var ui_importAnimationWindow = DuAEF.DuScriptUI.createPopup("Import animation");
	var ui_importAnimationGroup = ui_importAnimationWindow.contents;
	var ui_keyframesSelector = DuAEF.DuScriptUI.addSelector(ui_importAnimationGroup);
	ui_keyframesSelector.addButton("Only keyframes",DuAEF.DuBinary.toFile(w14_keyframesonly_l),"Imports only the keyframes.",DuAEF.DuBinary.toFile(w14_keyframesonly_r));
	ui_keyframesSelector.addButton("All properties",DuAEF.DuBinary.toFile(w14_allproperties_l),"Sets values on all properties.",DuAEF.DuBinary.toFile(w14_allproperties_r));
	ui_keyframesSelector.setCurrentIndex(0);
	var ui_importAnimationKeysTypeGroup = DuAEF.DuScriptUI.addGroup(ui_importAnimationGroup,'row');
	ui_importAnimationKeysTypeGroup.alignment = ['center','top'];
	var ui_importAnimationKeysPosButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_pos_l),"Position",DuAEF.DuBinary.toFile(w18_pos_r));
	var ui_importAnimationKeysRotButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_rotation_l),"Rotation",DuAEF.DuBinary.toFile(w18_rotation_r));
	var ui_importAnimationKeysScaleButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_scale_l),"Scale",DuAEF.DuBinary.toFile(w18_scale_r));
	var ui_importAnimationKeysOpacityButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_opacity_l),"Opacity",DuAEF.DuBinary.toFile(w18_opacity_r));
	var ui_importAnimationKeysMaskButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_mask_l),"Masks",DuAEF.DuBinary.toFile(w18_mask_r));
	var ui_importAnimationKeysFXButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_fx_l),"FX",DuAEF.DuBinary.toFile(w18_fx_r));
	var ui_importAnimationKeysAllButton = DuAEF.DuScriptUI.addCheckBox( ui_importAnimationKeysTypeGroup,'' ,DuAEF.DuBinary.toFile(w18_allproperties_l),"All",DuAEF.DuBinary.toFile(w18_allproperties_r));
	var ui_importAnimationOffsetSelector = DuAEF.DuScriptUI.addSelector(ui_importAnimationGroup);
	ui_importAnimationOffsetSelector.addButton("Offset",DuAEF.DuBinary.toFile(w14_moveaway_l),"Offset current values",DuAEF.DuBinary.toFile(w14_moveaway_r));
	ui_importAnimationOffsetSelector.addButton("Absolute",DuAEF.DuBinary.toFile(w14_absolute_l),"Replaces current values",DuAEF.DuBinary.toFile(w14_absolute_r));
	var ui_importAnimationReplaceButton = DuAEF.DuScriptUI.addCheckBox(ui_importAnimationGroup,'Replace existing keyframes',undefined,"Replaces any existing keyframe on the properties before loading the new animation",undefined);
	var ui_importAnimationValidButton = DuAEF.DuScriptUI.addButton(ui_importAnimationGroup,"Import",DuAEF.DuBinary.toFile(w25_check_g),"Imports an animation",DuAEF.DuBinary.toFile(w25_check_r));
	ui_importAnimationValidButton.setHelp("Import Animation",importHelp,importLink);


	//========== INIT =============
	ui_SRCompItemSelectButton.setChecked(true);
	ui_SRFootageItemSelectButton.setChecked(true);
	ui_SRFolderItemSelectButton.setChecked(true);
	ui_SRExpressionsSelector.visible = false;

	ui_alignPositionButton.setChecked(true);
	ui_alignRotationButton.setChecked(true);
	ui_alignScaleButton.setChecked(true);

	ui_importAnimationOffsetSelector.setCurrentIndex(1);
	ui_importAnimationKeysPosButton.setChecked(true);
	ui_importAnimationKeysRotButton.setChecked(true);
	ui_importAnimationKeysScaleButton.setChecked(true);
	ui_importAnimationKeysOpacityButton.setChecked(true);
	ui_importAnimationKeysMaskButton.setChecked(true);
	ui_importAnimationKeysFXButton.setChecked(true);
	ui_importAnimationKeysAllButton.setChecked(true);

	setCurrentSRPanel();

	ui_toolsGroup.tabActivated = setCurrentToolsPanel;
	if (standAlone) setCurrentToolsPanel();

	//======= CONNECT EVENTS ===========

	ui_renameButton.onClick = function () { setCurrentToolsPanel(1); };
	ui_renameCancelButton.onClick = function () { setCurrentToolsPanel(0); };
	ui_renameValidButton.onClick = ui_renameValidButton_clicked;

	ui_SRTypeSelector.onChange = ui_SRTypeSelector_changed;
	ui_SRCompSelector.onChange = ui_SRCompSelector_changed;
	ui_SRValidButton.onClick = ui_SRValidButton_clicked;
	ui_searchReplaceButton.onClick = function () { setCurrentToolsPanel(2); };
	ui_SRCancelButton.onClick = function () { setCurrentToolsPanel(0); };

	ui_measureButton.onClick = ui_measureButton_clicked;
	ui_measureCancelButton.onClick = function () { setCurrentToolsPanel(0); };
	ui_measureValidButton.onClick = ui_measureValidButton_clicked;

	ui_alignButton.onClick = ui_alignValidButton.onClick = ui_alignButton_clicked;
	ui_alignWindow.tieTo(ui_alignOptionsButton);

	ui_editModeButton.onClick = ui_editModeButton_clicked;

	if (settings.data.uiMode > 0)
	{
		ui_expressionLinksButton.onClick = function () { setCurrentToolsPanel(7); };
		ui_ELCompSelector.onChange = ui_ELCompSelector_changed;
		ui_ELCancelButton.onClick = function () { setCurrentToolsPanel(0); };
		ui_ELThisCompButton.onClick = ui_ELThisCompButton_clicked;
		ui_ELCompButton.onClick = ui_ELCompButton_clicked;

		ui_removeExpressionsButton.onClick = ui_removeExpressionsButton_clicked;
		ui_removeExpressionsButton.onAltClick = ui_removeExpressionsButton_altClicked;

		ui_copyExpButton.onClick = ui_copyExpButton_clicked;
		ui_pasteExpButton.onClick = ui_pasteExpButton_clicked;

		ui_importAnimButton.onClick = ui_importAnimationValidButton.onClick = ui_importAnimButton_clicked;
		ui_importAnimationWindow.tieTo(ui_importAnimOptionsButton);
		ui_importAnimationKeysAllButton.onClick = ui_importAnimationKeysAllButton_clicked;

		ui_exportAnimButton.onClick = ui_exportAnimButton_clicked;
	}

	if (settings.data.uiMode >= 2)
	{
		ui_propInfoButton.onClick = ui_propInfoValidButton.onClick = ui_propPreExp.onClick = ui_propPrecision.onClick = ui_propInfoButton_clicked;
		ui_propInfoCancelButton.onClick = function () { setCurrentToolsPanel(0); };

		ui_scriptifyExpressionButton.onClick = ui_scriptifyExpressionValidButton.onClick = ui_scriptifyExpressionButton_clicked;
		ui_scriptifyExpressionCancelButton.onClick = function () { setCurrentToolsPanel(0); };
	}

	debugLog.stopTimer("Misc. tools ready.");
}
