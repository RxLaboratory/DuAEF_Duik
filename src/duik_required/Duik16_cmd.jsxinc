// BUILT-IN SCRIPTS
var namespaces = {
    _type: 'namespace',
    'Duik':
    {
        _type: 'namespace',
        _readonly: true,
        'Structures':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Constraints':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Automations':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Ctrls':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Tools':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Animation':
        {
            _type: 'namespace',
            _readonly: true
        },
        'Camera':
        {
            _type: 'namespace',
            _readonly: true
        }
    }
}

//function loader
function getFunctions( ns, fnList )
{
    for (var i = 0, num = fnList.length; i<num; i++)
    {
        ns[ fnList[i].name ] = {};
        ns[ fnList[i].name ]._src = fnList[i].fn;
        ns[ fnList[i].name ]._type = 'script';
        ns[ fnList[i].name ]._readonly = true;
    }
}

getFunctions( namespaces['Duik']['Structures'], Duik.structures.functions )
getFunctions( namespaces['Duik']['Constraints'], Duik.constraints.functions )
getFunctions( namespaces['Duik']['Automations'], Duik.automation.functions )
getFunctions( namespaces['Duik']['Ctrls'], Duik.controllers.functions )
getFunctions( namespaces['Duik']['Tools'], Duik.tools.functions )
getFunctions( namespaces['Duik']['Animation'], Duik.animation.functions )
getFunctions( namespaces['Duik']['Camera'], Duik.camera.functions )

if (settings.data.uiMode >= 2)
{
    namespaces['Dev'] = {
        _readonly: false,
        _type: 'namespace',
        'Stringify_Script':
        {
            _type: 'script',
            _readonly: false,
            _src: '(function ()\n{\n    var file = File.openDialog ("Select Script", "ExtendScript:*.jsx,*.jsxinc;JavaScript:*.js;All Files:*.*");\n    if (!file) return;\n    var saveFile = DuAEF.DuJS.Fs.saveFileDialog( "Save string...", "Text:*.txt;All Files:*.*", ".txt" );\n    if (!saveFile) return;\n    var scriptAsString = DuAEF.DuJS.Fs.readFile(file);\n    scriptAsString = DuAEF.DuJS.String.replace(scriptAsString, "\\\\", "\\\\\\\\");\n    scriptAsString = DuAEF.DuJS.String.replace(scriptAsString, "\\n", "\\\\n");\n    scriptAsString = DuAEF.DuJS.String.replace(scriptAsString, "\\r", "\\\\r");\n    scriptAsString = DuAEF.DuJS.String.replace(scriptAsString, "\\t", "\\\\t");\n    scriptAsString = DuAEF.DuJS.String.replace(scriptAsString, "\\"", "\\\\\\"");\n    scriptAsString = "\\"" + scriptAsString + "\\"";\n   DuAEF.DuJS.Fs.writeTextFile(saveFile, scriptAsString);\n})();'
        }
    }
}

var separators = /[\s,\.\/;:]+/;

// FUNCTIONS

function getCurrentNamespace()
{
    if (ui_cmdEdit.text == '') return namespaces;
    var cmd = DuAEF.DuJS.String.trim(ui_infoText.text)
    var cmdArray = cmd.split( ' > ' );
    var ns = namespaces;
    for (var i =0, num = cmdArray.length; i < num; i++)
    {
        var item = ns[cmdArray[i]];
        if (!isNamespace(item)) return ns;
        ns = item;
    }
    return ns;
}

function getCurrentScript()
{
    if (ui_cmdEdit.text == '') return null;
    var cmd = DuAEF.DuJS.String.trim(ui_infoText.text)
    var cmdArray = cmd.split( ' > ' );
    var scriptCmd = cmdArray[cmdArray.length-1];
    var ns = getCurrentNamespace();
    var item = ns[scriptCmd];
    if (item)
    {
        if (isScript(item)) return item;
    }
    return null;
}

function populateList( ns )
{
    ui_listSourceButton.enabled = false;
    if (!isNamespace(ns)) return;
    //populate list
    ui_list.removeAll();
    for (name in ns)
    {
        if ( name.indexOf('_') == 0 ) continue;
        var text = name;
        if (typeof ns[name]._type !== undefined)
        {
            if (ns[name]._type == 'namespace') text += ' > ...';
        }
        ui_list.add('item',text);
    }
}

function isScript(item)
{
    if (!DuAEF.DuJS.typeof(item)) return false;
    if (DuAEF.DuJS.typeof(item._type) == 'undefined') return true;
    else
    {
        return item._type == 'script';
    }
}

function isNamespace(item)
{
    if (!DuAEF.DuJS.typeof(item)) return false;
    if (DuAEF.DuJS.typeof(item._type) != 'undefined')
    {
        return item._type == 'namespace';
    }
    else return false;
}

// EVENTS
function showList (e)
{
    if(!ui_listWindow.visible)
    {
        var x = e.screenX - e.clientX;
        var y = e.screenY - e.clientY;
        ui_listWindow.location = [ x-210, y ];
        DuAEF.DuScriptUI.showUI(ui_listWindow);
    }
    else ui_listWindow.hide();
}

function showSourceTab()
{
    ui_listGroup.visible = false;
    ui_sourceGroup.visible = true;
}

function showListTab()
{
    ui_listGroup.visible = true;
    ui_sourceGroup.visible = false;
}

function loadItem()
{
    if (!ui_list.selection) return;
    var text = ui_list.selection.text.replace(' > ...','');
    var item = getCurrentNamespace()[text];
    if (!DuAEF.DuJS.typeof(item)) return;
    if (isScript(item))
    {
        ui_source.text = item._src;
        ui_listSourceButton.enabled = isScript(item);
    }
}

function selectItem()
{
    if (!ui_list.selection) return;
    // the current selection text
    var text = ui_list.selection.text.replace(' > ...','');

    //if we're already at a script level, remove it
    if (getCurrentScript())
    {
        back();
    }

    var item = getCurrentNamespace()[text];

    ui_cmdEdit.text += text
    if (isNamespace(item)) ui_cmdEdit.text += ' ';
    buildCmd();

    if (isScript(item)) processCmd();
}

function clearCommand()
{
    ui_cmdEdit.text = '';
    buildCmd ();
}

function back()
{
    var text = DuAEF.DuJS.String.trim(ui_cmdEdit.text)
    text = text.split(' ');
    text.pop();
    text = text.join(' ');
    if (text != '') text += ' ';
    ui_cmdEdit.text = text;
    buildCmd ()
}

function buildCmd ()
{
    var userInput = ui_cmdEdit.text.toLowerCase();

    if ( userInput.length == 0 )
    {
        ui_infoText.text = 'Start typing a command...';
        populateList( namespaces );
        return;
    }

    ui_infoText.text = '';

    userInputArray = userInput.split( separators );

    currentNamespace = namespaces;
    var start = true;

    for ( var i = 0, num = userInputArray.length; i < num; i++ )
    {
        var input = userInputArray[ i ];
        for ( name in currentNamespace )
        {
            if ( name.indexOf('_') == 0 ) continue;
            if ( name.toLowerCase().indexOf( input ) == 0 )
            {
                if ( !start ) ui_infoText.text += " > ";
                start = false;
                ui_infoText.text += name;
                currentNamespace = currentNamespace[ name ];
                break;
            }
        }
    }

    populateList( currentNamespace )
}

function processCmd ()
{
    var item = getCurrentScript();
    if (!item) return;

    if (DuAEF.DuJS.typeof(item._src) != 'string') return;
    DuAEF.Debug.safeRun( item._src );
}


// List Window
var ui_listWindow = DuAEF.DuScriptUI.createUI(null, "Duik Cmd List", ['fill','fill']);
ui_listWindow.minimumSize.height = 300;
ui_listWindow.minimumSize.width = 200;
// a stacked group for the list or source
var ui_listStack = DuAEF.DuScriptUI.addGroup( ui_listWindow.contents,'stack');
ui_listStack.alignment = ['fill','fill'];
// add list
var ui_listGroup = DuAEF.DuScriptUI.addGroup( ui_listStack,'column');
ui_listGroup.alignment = ['fill','fill'];
var ui_listNavButtonsGroup = DuAEF.DuScriptUI.addGroup( ui_listGroup);
ui_listNavButtonsGroup.alignment = ['fill','top'];
var ui_listClearButton = DuAEF.DuScriptUI.addButton(ui_listNavButtonsGroup, 'Clear', DuAEF.DuBinary.toFile(w14_cancel_m), 'Clear command', DuAEF.DuBinary.toFile(w14_cancel_l));
var ui_listPreviousButton = DuAEF.DuScriptUI.addButton(ui_listNavButtonsGroup, 'Previous', DuAEF.DuBinary.toFile(w14_previousframe_m), 'Get back', DuAEF.DuBinary.toFile(w14_previousframe_l));
var ui_list = ui_listGroup.add('listbox');
ui_list.alignment = ['fill','fill'];
var ui_listButtonsGroup = DuAEF.DuScriptUI.addGroup(ui_listGroup);
ui_listButtonsGroup.alignment = ['fill','bottom'];
var ui_listSourceButton = DuAEF.DuScriptUI.addButton(ui_listButtonsGroup, 'View Source', DuAEF.DuBinary.toFile(w14_js_l), 'View source code', DuAEF.DuBinary.toFile(w14_js_r));
ui_listSourceButton.enabled = false;
var ui_listSelectButton = DuAEF.DuScriptUI.addButton(ui_listButtonsGroup, 'Select', DuAEF.DuBinary.toFile(w14_check_l), 'Select item', DuAEF.DuBinary.toFile(w14_check_r));
// source
var ui_sourceGroup = DuAEF.DuScriptUI.addGroup( ui_listStack,'column');
ui_sourceGroup.alignment = ['fill','fill'];
var ui_source = ui_sourceGroup.add('edittext', undefined, '', {multiline:true, readonly:true});
ui_source.alignment = ['fill','fill'];
var ui_sourceBackButton = DuAEF.DuScriptUI.addButton(ui_sourceGroup, 'Back', DuAEF.DuBinary.toFile(w14_back_l), 'Back to the list', DuAEF.DuBinary.toFile(w14_back_r));
ui_sourceBackButton.alignment = ['fill','bottom'];
ui_sourceGroup.visible = false;
//close button
var ui_listCloseButton = DuAEF.DuScriptUI.addButton(ui_listWindow.contents, 'Close', DuAEF.DuBinary.toFile(w14_cancel_m), 'Select item', DuAEF.DuBinary.toFile(w14_cancel_l));
ui_listCloseButton.alignment = ['fill', 'bottom'];

// UI
ui_palette.mainGroup.alignChildren = [ 'fill', 'top' ];

var ui_cmdGroup = DuAEF.DuScriptUI.addGroup(ui_palette.mainGroup, 'row');
var ui_clearButton = DuAEF.DuScriptUI.addButton(ui_cmdGroup, '', DuAEF.DuBinary.toFile(w14_cancel_m), 'Clear command', DuAEF.DuBinary.toFile(w14_cancel_l));
ui_clearButton.alignment = ['left','center'];
var ui_backButton = DuAEF.DuScriptUI.addButton(ui_cmdGroup, '', DuAEF.DuBinary.toFile(w14_previousframe_m), 'Get back', DuAEF.DuBinary.toFile(w14_previousframe_l));
ui_backButton.alignment = ['left','center'];
var ui_cmdEdit = ui_cmdGroup.add( 'edittext' );
ui_cmdEdit.alignment = ['fill','fill'];
var ui_cmdButton = DuAEF.DuScriptUI.addButton(ui_cmdGroup, '', DuAEF.DuBinary.toFile(w18_play_l), 'Run command', DuAEF.DuBinary.toFile(w18_play_r));
ui_cmdButton.alignment = ['right','center'];

var ui_infoGroup = DuAEF.DuScriptUI.addGroup(ui_palette.mainGroup, 'row');
var ui_infoButton = DuAEF.DuScriptUI.addButton(ui_infoGroup, '', DuAEF.DuBinary.toFile(w18_list_l), 'Show all commands...', DuAEF.DuBinary.toFile(w18_list_r));
ui_infoButton.alignment = ['left','center'];
var ui_infoText = ui_infoGroup.add( 'statictext', undefined, 'Start typing a command...' );
ui_infoText.alignment = ['fill','fill'];

//populate list
populateList( namespaces );

var process = false;

ui_infoButton.addEventListener( "click", showList, true );
ui_listCloseButton.onClick = showList;
ui_listSourceButton.onClick = showSourceTab;
ui_sourceBackButton.onClick = showListTab;
ui_list.onChange = loadItem;
ui_clearButton.onClick = ui_listClearButton.onClick = clearCommand;
ui_backButton.onClick = ui_listPreviousButton.onClick = back;
ui_cmdEdit.onChanging = buildCmd;
ui_cmdEdit.addEventListener('keydown', function(e){ if (e.keyName == 'Enter') processCmd(); } );
ui_cmdButton.onClick = processCmd;
ui_listSelectButton.onClick = ui_list.onDoubleClick = selectItem;


