/**
 * Duik {@link http://duaef-docs.rainboxlab.org/Guides/Duik/constraints.html Animation}<br />
 * Read the {@link http://duik-docs.rainboxlab.org Duik User Guide} > {@link http://duaef-docs.rainboxlab.org/Guides/Duik/constraints.html Animation} for more information about each method.<br />
 * @namespace
 */
Duik.animation = {}

/**
 * All the animation methods stored as objects which can be parsed easily, for example to automatically build a ui with a button for each method.
 * @property {string} name - A display name for the method
 * @property {string} fn - The source script to eval
 */
Duik.animation.functions = []

//The functions

Duik.animation.functions.push( { name:"Klean", fn:"Duik.animation.klean()" } );
/**
 * Automatically clean the animation of the selected properties.
 * @param {boolean} [separateDimensions=true] - Wether to separate the dimensions of the property before kleaning it.
 * @param {boolean} [spatialInterpolation=true] - Wether to fix spatial interpolation (when dimensions are not separated).
 * @param {boolean} [smoothCurves=true] - Wether to apply a smart algorithm to smooth the curves.
 * @param {boolean} [smoothUsingExpression=true] - Wether to smooth the curves using expressions. Set to false to adjust directly the interpolation of the keyframes.
 * @param {boolean} [removeUnnecessaryKeys=true] - Wether to remove all redundants keyframes.
 * @param {boolean} [smoothIn=true] - Wether to smooth the incoming curve if smoothCurves is set to true
 * @param {boolean} [smoothOut=true] - Wether to smooth the outgoing curve if smoothCurves is set to true
 * @return {Property[]} The effects created to control the kleaner.
 */
Duik.animation.klean = function ( separateDimensions, spatialInterpolation, smoothCurves, smoothUsingExpression, removeUnnecessaryKeys, smoothIn, smoothOut )
{
    separateDimensions = def (separateDimensions, true);
    spatialInterpolation = def (spatialInterpolation, true);
    smoothCurves = def (smoothCurves, true);
    removeUnnecessaryKeys = def (removeUnnecessaryKeys, true);
    smoothIn = def (smoothIn, true);
    smoothOut = def (smoothOut, true);
    smoothUsingExpression = def (smoothUsingExpression, true);

    DuAEF.DuAE.App.beginUndoGroup("Kleaner");

    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if (props.length == 0)
    {
        DuAEF.DuAE.App.endUndoGroup();
        return null;
    }

    if (separateDimensions)
    {
        var newProps = [];
        for (var i = 0, num = props.length ; i < num ; i++)
        {
            newProps = newProps.concat(DuAEF.Duik.Rigging.separateDimensions(props[i]));
        }
        props = newProps;
    }

    var effect = null;
    var effects = [];
    for (var i = 0, num = props.length ; i < num ; i++)
    {
        //SPATIAL AUTO
        if (!separateDimensions && spatialInterpolation ) DuAEF.DuAE.Property.fixSpatialInterpolation(props[i]);
        //SMART SMOOTH
        if ( smoothCurves ) effect = DuAEF.Duik.Animation.kleaner(props[i], smoothUsingExpression, smoothIn , smoothOut, effect);

        if (effect != null) effects.push(effect);
    }

    for (var i = 0, num = props.length; i < num; i++)
    {
        //CLEAN
        if ( removeUnnecessaryKeys ) DuAEF.DuAE.Property.cleanKeyframes(props[i]);
    }

    DuAEF.DuAE.Comp.selectLayers( layers );

    DuAEF.DuAE.App.endUndoGroup();

    return effects;
}

/**
 * The animation copied by {@link Duik.animation.copy} which can be pasted with {@link Duik.animation.paste}. 
 */
Duik.animation.copied = {}

Duik.animation.functions.push( { name:"Copy Animation", fn:"Duik.animation.copy()" } );
/**
 * Copies the animation from the selected properties. Use {@link Duik.animation.paste} to paste it.
 */
Duik.animation.copy = function ( )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    var layers = comp.selectedLayers;
    if (layers.length == 0) return;

    copiedAnim = [];

    for (var i = 0 ; i < layers.length ; i++)
    {
        copiedAnim.push(DuAEF.DuAE.Layer.getAnim(layers[i],true));
    }
    //get the first keyframe time to offset when pasting
    copiedAnim.firstKeyFrameTime = DuAEF.DuAE.Layer.firstKeyFrameTime(layers,true);

    Duik.animation.copied = copiedAnim;
}

Duik.animation.functions.push( { name:"Paste", fn:"Duik.animation.paste()" } );
Duik.animation.functions.push( { name:"Paste_Reverse", fn:"Duik.animation.paste( false, false, true )" } );
Duik.animation.functions.push( { name:"Paste_Offset", fn:"Duik.animation.paste( false, true )" } );
Duik.animation.functions.push( { name:"Paste_Replace", fn:"Duik.animation.paste( true )" } );
/**
 * Pastes the animation previously copied by {@link Duik.animation.copy} to the selected properties.
 * @param {boolean} replace - Wether to completely erase and replace the current animation
 * @param {boolean} offset - Wether to offset the animation from the current value
 * @param {boolean} reverse - Wether to reverse the animation
 */
Duik.animation.paste = function ( replace, offset, reverse )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    if (layers.length == 0) layers = comp.layers;
    if (layers.length == 0) return;

    //options
    var time = comp.time-copiedAnim.firstKeyFrameTime;
    replace = def( replace, false );
    offset = def( offset, false );
    reverse = def( reverse, false );

    DuAEF.DuAE.App.beginUndoGroup("Paste animation");

    var remaining = DuAEF.DuAE.Layer.setAnims(layers, Duik.animation.copied, time, undefined, undefined, undefined, replace, undefined, offset, reverse);

    if (remaining.length > 0)
    {
        var ui_pasteLayerPicker = DuAEF.DuScriptUI.createLayerPickerDialog("Missing layers");

        for (var i = 0, num = remaining.length; i < num; i++)
        {
            ui_pasteLayerPicker.addSelector(remaining[i]._index + ' | ' + remaining[i]._name);
            //try to preselect by name
            var ok = false;
            for (var j = 1, numLayers = comp.numLayers; j <= numLayers; j++)
            {
                var l = comp.layer(j);
                if (l.name == remaining[i]._name)
                {
                    ui_pasteLayerPicker.layerPicker.selectors[i].setCurrentIndex(j);
                    ok = true;
                    break;
                }
            }
            if (!ok && remaining[i]._index > 0 && remaining[i]._index <= comp.numLayers) ui_pasteLayerPicker.layerPicker.selectors[i].setCurrentIndex(remaining[i]._index);
        }

        ui_pasteLayerPicker.onAccept = function () {DuAEF.DuAE.App.beginUndoGroup("Paste animation"); DuAEF.DuAE.Layer.setAllAnims(ui_pasteLayerPicker.getLayers(), Duik.animation.copied, time, undefined, undefined, undefined, replace, undefined, offset, false); DuAEF.DuAE.App.endUndoGroup();};

        DuAEF.DuScriptUI.showUI(ui_pasteLayerPicker);
    }

    DuAEF.DuAE.App.endUndoGroup();

}

Duik.animation.functions.push( { name:"IK/FK Switch", fn:"Duik.animation.switchIkFk( )" } );
/**
 * Switches the selected controller between IK and FK
 */
Duik.animation.switchIkFk = function ( )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("FK/IK Switch");

    var it = new Iterator(comp.selectedLayers);
    it.do(function (layer) {
        DuAEF.Duik.Animation.switchIkFk(layer);
    });

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.animation.functions.push( { name:"Motion Trail", fn:"Duik.animation.motionTrail( )" } );
/**
 * Draws the trajectory of the selected layers
 * @param {float[]|null} [color=DuAEF.DuJS.Color.random()] - The [R,G,B,A] color of the trails. Random color if null.
 * @param {boolean} [useExisting=true] - Wether to use the existing motion trail layer, if any
 */
Duik.animation.motionTrail = function ( color, useExisting )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    if (color == null) color = DuAEF.DuJS.Color.random();

    DuAEF.DuAE.App.beginUndoGroup("Motion trail");

    useExisting = def(useExisting, true);

    //trail layer
    var trailLayer = null;
    if (useExisting) trailLayer = DuAEF.Duik.getLayer( DuAEF.Duik.LayerTypes.MOTION_TRAIL );

    var layers = DuAEF.DuAE.Comp.unselectLayers();

    if (layers.length > 0)
    {
        for (var i = 0 ; i < layers.length ; i++)
        {
            trailLayer = DuAEF.Duik.Animation.motionTrail(comp,layers[i],trailLayer,color);
        }
    }
    else
    {
        DuAEF.Duik.Animation.motionTrail(comp,undefined,trailLayer, color);
    }

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.animation.functions.push( { name:"X-Sheet", fn:"Duik.animation.xSheet( )" } );
/**
 * Adds an Exposure Sheet (X-Sheet) effect on the selected layers or composition
 * @param {boolean} [autoDetect=false] - If true, will try to detect and animate the best exposure values for a nice traditionnal look.
 */
Duik.animation.xSheet = function ( autoDetect )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    autoDetect = def (autoDetect, false);

    var props = DuAEF.DuAE.Comp.getSelectedProps();
    DuAEF.DuAE.App.beginUndoGroup("X-Sheet");

    var ok = false;
    if (props.length > 0)
    {
        var effect = null;
        for (var i = 0 ; i < props.length ; i++)
        {
            effect = DuAEF.Duik.Animation.xSheet(comp,props[i],effect);
            if (effect != null) ok = true;
        }
    }
    if (!ok)
    {
        effect = DuAEF.Duik.Animation.xSheet(comp);
    }

    if ( autoDetect && props.length > 0)
    {
        //detect limit
        var averageSpeed = DuAEF.DuAE.Property.getAverageSpeed(props);
        if (averageSpeed > 0)
        {
            var precision = averageSpeed*2.5;
            var frames = comp.duration / comp.frameDuration;
            //set Keyframes
            var step = 0;
            effect(19).addKey(0);
            for (var frame = 0 ; frame < frames ; frame++)
            {
                var time = frame * comp.frameDuration;

                var maxSpeed = 0;
                for (var j = 0 ; j < props.length ; j++)
                {
                    var prop = props[j].getProperty();
                    var speedTest = DuAEF.DuAE.Property.getSpeed(prop,time);
                    if (speedTest > maxSpeed) maxSpeed = speedTest;
                }

                step += maxSpeed;

                if (step >= precision && averageSpeed > 0)
                {
                    step = 0;
                    effect(19).addKey(time);
                }
            }
            effect(7).setValue(2);
        }

    }

    DuAEF.DuAE.App.endUndoGroup();

}

Duik.animation.functions.push( { name:"Time Remapping", fn:"Duik.animation.timeRemap( )" } );
/**
 * Activates time remapping on the selected layers, and add the looper {@link Duik.constraints.loop} to it.
 */
Duik.animation.timeRemap = function ( )
{
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    DuAEF.DuAE.App.beginUndoGroup("Time Remap");
    DuAEF.Duik.Animation.timeRemap(layers);
    DuAEF.DuAE.App.endUndoGroup();
}