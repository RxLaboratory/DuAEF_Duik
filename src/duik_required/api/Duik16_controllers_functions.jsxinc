/**
 * Duik {@link http://duaef-docs.rainboxlab.org/Guides/Duik/automations.html Controllers}<br />
 * Read the {@link http://duik-docs.rainboxlab.org | Duik User Guide} > {@link http://duaef-docs.rainboxlab.org/Guides/Duik/automations.html Controllers} for more information about each method.<br />
 * <code>#include 'Duik16_controllers_functions.jsxinc'</code>
 * @namespace
 */
Duik.controllers = {}

/**
 * All the controller methods stored as objects which can be parsed easily, for example to automatically build a ui with a button for each method.
 * @property {string} name - A display name for the method
 * @property {string} fn - The source script to eval
 */
Duik.controllers.functions = []

//The functions

Duik.controllers.functions.push( { name:"Rotation", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.ROTATION)" } );
Duik.controllers.functions.push( { name:"X_Position", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.X_POSITION)" } );
Duik.controllers.functions.push( { name:"Y_Position", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.Y_POSITION)" } );
Duik.controllers.functions.push( { name:"Position", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.POSITION)" } );
Duik.controllers.functions.push( { name:"Transform", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.TRANSFORM)" } );
Duik.controllers.functions.push( { name:"Eye", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.EYE)" } );
Duik.controllers.functions.push( { name:"Camera", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.CAMERA)" } );
Duik.controllers.functions.push( { name:"Slider", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.SLIDER)" } );
Duik.controllers.functions.push( { name:"2D_Slider", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.DOUBLE_SLIDER)" } );
Duik.controllers.functions.push( { name:"Angle", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.ANGLE)" } );
Duik.controllers.functions.push( { name:"Head", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.HEAD)" } );
Duik.controllers.functions.push( { name:"Foot", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.FOOT)" } );
Duik.controllers.functions.push( { name:"Claws", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.CLAWS)" } );
Duik.controllers.functions.push( { name:"Hoof", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.HOOF)" } );
Duik.controllers.functions.push( { name:"Hand", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.HAND)" } );
Duik.controllers.functions.push( { name:"Hips", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.HIPS)" } );
Duik.controllers.functions.push( { name:"Spine", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.BODY)" } );
Duik.controllers.functions.push( { name:"Shoulders", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.SHOULDERS)" } );
Duik.controllers.functions.push( { name:"Tail", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.TAIL)" } );
Duik.controllers.functions.push( { name:"Null", fn:"Duik.controllers.create(DuAEF.Duik.Controller.Types.NULL)" } );
/**
 * Creates an controller
 * @param {DuAEF.Duik.Controller.Types} [type = DuAEF.Duik.Controller.Types.TRANSFORM] - The type of the controller. See the {@link http://duaef-reference.rainboxlab.org DuAEF} reference for more information.
 * @param {boolean} [parent = false] - Wether to parent the selected layers to the controllers
 * @param {boolean} [single = false] - Wether to create a single controller for all the layers
 * @return {Controller[]} the controllers created. See the {@link http://duaef-reference.rainboxlab.org DuAEF} reference for more information about the <code>Controller</code> object.
 */
Duik.controllers.create = function ( type, parent, single )
{
    type = def( type, DuAEF.Duik.Controller.Types.TRANSFORM);
    parent = def (parent, false);
    single = def (single, false);

    var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return null;

	DuAEF.DuAE.App.beginUndoGroup( "Create controller");

	var layers = DuAEF.DuAE.Comp.unselectLayers();
	var ctrls = [];
	if (layers.length == 0) ctrls.push(DuAEF.Duik.Controller.create(comp,type));
	else if (single)
	{
		var ctrl = DuAEF.Duik.Controller.create(comp,type,layers, undefined, undefined, parent);
		ctrls.push(ctrl.layer);
	}
    else
	{
		for (var  i = 0 ; i < layers.length ; i++)
		{
			var ctrl = DuAEF.Duik.Controller.create(comp,type,layers[i], undefined, undefined, parent);
			ctrls.push(ctrl.layer);
		}
	}

	DuAEF.DuAE.Comp.selectLayers(ctrls);

	DuAEF.DuAE.App.endUndoGroup();

	return ctrls;
}

Duik.controllers.functions.push( { name:"PE_Eye", fn:"Duik.controllers.pseudoEffect(DuAEF.Duik.PseudoEffects.EYES)" } );
Duik.controllers.functions.push( { name:"PE_Fingers", fn:"Duik.controllers.pseudoEffect(DuAEF.Duik.PseudoEffects.FINGERS)" } );
Duik.controllers.functions.push( { name:"PE_Hand", fn:"Duik.controllers.pseudoEffect(DuAEF.Duik.PseudoEffects.HAND)" } );
Duik.controllers.functions.push( { name:"PE_Head", fn:"Duik.controllers.pseudoEffect(DuAEF.Duik.PseudoEffects.HEAD)" } );
/**
 * Adds a controller pseudo effect on the selected layers
 * @param {DuAEF.Duik.Controller.Types} type - The type of pseudo effect, one of: EYES, FINGERS, HAND, HEAD. See the {@link http://duaef-reference.rainboxlab.org DuAEF} reference for more information.
 */
Duik.controllers.pseudoEffect = function ( type )
{
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();

    DuAEF.DuAE.App.beginUndoGroup("Add Pseudo-Effect");

    for (var i = 0, num = layers.length; i < num; i++)
    {
        //add effect
        DuAEF.DuAE.Layer.applyPreset(layers[i],type);
    }
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.controllers.functions.push( { name:"Select all", fn:"Duik.controllers.select()" } );
/**
 * Selects all controllers in the composition
 */
Duik.controllers.select = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    var ctrls = DuAEF.Duik.Controller.getControllers(comp,false);
    if (ctrls.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Select controllers");
    DuAEF.DuAE.Comp.unselectLayers(comp);
    for (var i = 0 ; i < ctrls.length ; i++)
    {
        ctrls[i].layer.selected = true;
    }
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.controllers.functions.push( { name:"Show / Hide", fn:"Duik.controllers.show()" } );
/**
 * Shows or hides all controllers in the composition
 * @param {boolean} [invert=false] - If true, inverts the controller visibilities
 */
Duik.controllers.show = function ( invert )
{
    invert = def (invert, false);

    var ctrls = DuAEF.Duik.Controller.getControllers();

    if (ctrls.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Show/hide controllers");
    var visible = !ctrls[0].layer.enabled;
    for (var i = 0 ; i < ctrls.length ; i++)
    {
        if (invert) ctrls[i].layer.enabled = !ctrls[i].layer.enabled;
        else ctrls[i].layer.enabled = visible;
    }
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.controllers.functions.push( { name:"Extract", fn:"Duik.controllers.extract()" } );
/**
 * Extracts the controllers from the selected precomposition
 * @param {boolean} [useMasterProperties=true] - Wether to use master properties instead of expressions to extract the controllers. True by default if Ae >= 17.0
 */
Duik.controllers.extract = function ( useMasterProperties )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;
	var layers = comp.selectedLayers;
	if (layers.length == 0) return;
	var precomp = layers[0];

	DuAEF.DuAE.App.beginUndoGroup("Extract Controllers");

	var result = DuAEF.Duik.Animation.extractControllersFromComp(precomp,useMasterProperties);

	DuAEF.DuAE.App.endUndoGroup();
}

Duik.controllers.functions.push( { name:"Un-Extract", fn:"Duik.controllers.unExtract()" } );
/**
 * Un-Extracts the controllers from the selected precomposition
 */
Duik.controllers.unExtract = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;
	var layers = comp.selectedLayers;
	if (layers.length == 0) return;
	var precomp = layers[0];

	DuAEF.DuAE.App.beginUndoGroup("Un-Extract Controllers");

	var result = DuAEF.Duik.Animation.unExtractControllersFromComp(precomp);

	DuAEF.DuAE.App.endUndoGroup();
}


Duik.controllers.functions.push( { name:"Tag", fn:"Duik.controllers.tag()" } );
/**
 * Tags the layers as controllers
 */
Duik.controllers.tag = function ( )
{
    DuAEF.DuAE.App.beginUndoGroup("Tag controllers");
    DuAEF.Duik.Controller.tag();
    DuAEF.DuAE.App.endUndoGroup();
}