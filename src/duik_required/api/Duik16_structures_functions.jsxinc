/**
 * Duik {@link http://duaef-docs.rainboxlab.org/Guides/Duik/structures.html | Structures}<br />
 * Read the {@link http://duik-docs.rainboxlab.org | Duik User Guide} > {@link http://duaef-docs.rainboxlab.org/Guides/Duik/structures.html | Structures} for more information about each method.<br />
 * <code>#include 'Duik16_structures_functions.jsxinc'</code>
 * @namespace
 */
Duik.structures = {}

/**
 * All the structure methods stored as objects which can be parsed easily, for example to automatically build a ui with a button for each method.
 * @property {string} name - A display name for the method
 * @property {string} fn - The source script to eval
 */
Duik.structures.functions = []

//The functions

//TODO adjust autorig for animals/quadrupeds
Duik.structures.functions.push( { name:"Hominoid", fn:"Duik.structures.mammal()" } );
Duik.structures.functions.push( { name:"Digitigrade", fn:"Duik.structures.mammal( DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE )" } );
Duik.structures.functions.push( { name:"Ungulate", fn:"Duik.structures.mammal( DuAEF.Duik.Autorig.AnimalTypes.Ungulate )" } );
Duik.structures.functions.push( { name:"Plantigrade", fn:"Duik.structures.mammal( DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE , 2, 1, true, true, true, true, true, true, true)" } );
/**
 * Creates a structure for a mammal
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - One of DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE, DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE, DuAEF.Duik.Autorig.AnimalTypes.UNGULATE. See the {@link http://duaef-reference.rainboxlab.org/ | DuAEF Reference}
 * @param {int} [numSpine=2] - The number of structure elements for the spine
 * @param {int} [numNeck=1] - The number of structure elements for the neck
 * @param {boolean} [head=true] - Wether to add a structure element for a head
 * @param {boolean} [shoulder=true] - Wether to add a structure element for shouders
 * @param {boolean} [humerus=true] - Wether to add a structure element for humerus
 * @param {boolean} [radius=true] - Wether to add a structure element for radius
 * @param {boolean} [hand=true] - Wether to add a structure element for hands
 * @param {boolean} [frontClaws=false] - Wether to add a structure element for frontClaws. True by default if the structure is not for a Plantigrade.
 * @param {boolean} [femur=true] - Wether to add a structure element for femurs
 * @param {boolean} [tibia=true] - Wether to add a structure element for tibias
 * @param {boolean} [foot=true] - Wether to add a structure element for feet
 * @param {boolean} [backClaws=false] - Wether to add a structure element for backClaws. True by default if the structure is not for a Plantigrade.
 * @return {Array} An array containing two arrays: the first one is the list of Structure objects created (see the {@link http://duaef-reference.rainboxlab.org/ | DuAEF Reference}), the second one is the list of the new layers.
 */
Duik.structures.mammal = function (type, numSpine, numNeck, hips, head, shoulder, humerus, radius, hand, frontClaws, femur, tibia, foot, backClaws)
{
    //defaults
    type = def( type, DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE );
    numSpine = def( numSpine, 2);
    numNeck = def( numNeck, 1);
    hips = def( hips, true);
    head = def( head, true);

    shoulder = def( shoulder, true );
    humerus = def( humerus, true );
    radius = def( radius, true );
    hand = def( hand, true );
    if ( type == def( type, DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE ) )
    {
        frontClaws = def( frontClaws, false);
    }
    else
    {
        frontClaws = def( frontClaws, true);
    }
    

    femur = def( femur, true );
    tibia = def( tibia, true );
    foot = def( foot, true );
    backClaws = def( backClaws, true );


    var comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return [];

    var sizeUnit = comp.height / 12;

    DuAEF.DuAE.App.beginUndoGroup( "Create hominoid structure" );
    DuAEF.DuAE.Project.setProgressMode( true );

    var structureLayers = [];
    var structures = [];

    //SPINE
    var originPos = [ comp.width / 2, comp.height / 2 + sizeUnit ];
    var structure = DuAEF.Duik.Structure.createSpine( hips, numSpine, numNeck, head, comp, originPos );
    structure = structure[ 0 ];
    structureLayers = structureLayers.concat( structure.elements );
    structures.push( structure );
    DuAEF.DuAE.Comp.unselectLayers( comp );
    //LEFT ARM
    originPos = [ comp.width / 2 - sizeUnit, 4 * sizeUnit ];
    if ( shoulder ) originPos = [ comp.width / 2 - sizeUnit / 2, 4 * sizeUnit ];
    structure = DuAEF.Duik.Structure.createArm( shoulder, humerus, radius, hand, false, undefined, type, comp, originPos );
    structure = structure[ 0 ];
    structureLayers = structureLayers.concat( structure.elements );
    structures.push( structure );
    DuAEF.DuAE.Comp.unselectLayers( comp );
    //RIGHT ARM
    originPos = [ comp.width / 2 + sizeUnit, 4 * sizeUnit ];
    if ( shoulder ) originPos = [ comp.width / 2 + sizeUnit / 2, 4 * sizeUnit ];
    structure = DuAEF.Duik.Structure.createArm( shoulder, humerus, radius, hand, false, undefined, type, comp, originPos, true );
    structure = structure[ 0 ];
    structureLayers = structureLayers.concat( structure.elements );
    structures.push( structure );
    DuAEF.DuAE.Comp.unselectLayers( comp );
    //LEFT LEG
    originPos = [ comp.width / 2 - sizeUnit / 2, comp.height / 2 + sizeUnit ];
    structure = DuAEF.Duik.Structure.createLeg( femur, tibia, foot, backClaws, undefined, type, comp, originPos );
    structure = structure[ 0 ];
    structureLayers = structureLayers.concat( structure.elements );
    structures.push( structure );
    DuAEF.DuAE.Comp.unselectLayers( comp );
    //RIGHT LEG
    originPos = [ comp.width / 2 + sizeUnit / 2, comp.height / 2 + sizeUnit ];
    structure = DuAEF.Duik.Structure.createLeg( femur, tibia, foot, backClaws, undefined, type, comp, originPos );
    structure = structure[ 0 ];
    structureLayers = structureLayers.concat( structure.elements );
    structures.push( structure );

    DuAEF.DuAE.App.endUndoGroup( );
    DuAEF.DuAE.Project.setProgressMode(false);

    return [structures, structureLayers];
}

Duik.structures.functions.push( { name:"Arm", fn:"Duik.structures.arm()" } );
Duik.structures.functions.push( { name:"Arm_Digitigrade", fn:"Duik.structures.arm(DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE)" } );
Duik.structures.functions.push( { name:"Arm_Ungulate", fn:"Duik.structures.arm(DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)" } );
Duik.structures.functions.push( { name:"Arm_Plantigrade", fn:"Duik.structures.arm(DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE, true, true, true, true, true)" } );
/**
 * Creates a structure for an arm/front leg.
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - One of DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE, DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE, DuAEF.Duik.Autorig.AnimalTypes.UNGULATE. See the {@link http://duaef-reference.rainboxlab.org/ | DuAEF Reference}
 * @param {boolean} [shoulder=true] - Wether to add a structure element for the shouder
 * @param {boolean} [humerus=true] - Wether to add a structure element for the humerus
 * @param {boolean} [radius=true] - Wether to add a structure element for the radius
 * @param {boolean} [hand=true] - Wether to add a structure element for the hand
 * @param {boolean} [frontClaws=false] - Wether to add a structure element for the front claws. True by default if the structure is not for a Plantigrade.
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new structures
 */
Duik.structures.arm = function ( type, shoulder, humerus, radius, hand, claws, forceLink)
{
    forceLink = def( forceLink, false);
    type = def( type, DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE);
    shoulder = def( shoulder, true);
    humerus = def( humerus, true);
    radius = def( radius, true);
    hand = def( hand, true);
    if (type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) claws = def( claws, false);
    else claws = def( claws, true);

    DuAEF.DuAE.App.beginUndoGroup("Create arm structure");

    DuAEF.DuAE.Project.setProgressMode(true);

    //if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var layerToRemove = null;
    var linkPath = false;
    if (typeof settings.data.structureLinkPaths !== 'undefined')
    {
        linkPath = settings.data.structureLinkPaths;
        if (forceLink) linkPath = !settings.data.structureLinkPaths;
    }
    
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEF.DuAE.Shape.isSingleShape(l)) layerToRemove = l;
    }

    DuAEF.Duik.Structure.createArm(shoulder, humerus, radius, hand, claws,undefined,type,undefined, undefined, undefined, forceLink);

    if (layerToRemove != null) layerToRemove.remove();

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Leg", fn:"Duik.structures.leg()" } );
Duik.structures.functions.push( { name:"Leg_Digitigrade", fn:"Duik.structures.leg(DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE)" } );
Duik.structures.functions.push( { name:"Leg_Ungulate", fn:"Duik.structures.leg(DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)" } );
Duik.structures.functions.push( { name:"Leg_Plantigrade", fn:"Duik.structures.leg(DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE, true, true, true, true)" } );
/**
 * Creates a structure for an arm/back leg.
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - One of DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE, DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE, DuAEF.Duik.Autorig.AnimalTypes.UNGULATE. See the {@link http://duaef-reference.rainboxlab.org/ | DuAEF Reference}
 * @param {boolean} [femur=true] - Wether to add a structure element for the femur
 * @param {boolean} [tibia=true] - Wether to add a structure element for the tibia
 * @param {boolean} [foot=true] - Wether to add a structure element for the foot
 * @param {boolean} [frontClaws=false] - Wether to add a structure element for the back claws. True by default if the structure is not for a Plantigrade.
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new structures
 */
Duik.structures.leg = function ( type, femur, tibia, foot, claws, forceLink)
{
    forceLink = def( forceLink, false);
    type = def( type, DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE);
    femur = def( femur, true);
    tibia = def( tibia, true);
    foot = def( foot, true);
    if (type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) claws = def( claws, false);
    else claws = def( claws, true);
    
    DuAEF.DuAE.App.beginUndoGroup("Create leg structure");

    DuAEF.DuAE.Project.setProgressMode(true);

    //if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var layerToRemove = null;
    var linkPath = false;
    if (typeof settings.data.structureLinkPaths !== 'undefined')
    {
        linkPath = settings.data.structureLinkPaths;
        if (forceLink) linkPath = !settings.data.structureLinkPaths;
    }
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEF.DuAE.Shape.isSingleShape(l)) layerToRemove = l;
    }

    DuAEF.Duik.Structure.createLeg( femur, tibia, foot, claws,undefined,type, undefined, undefined, forceLink);

    if (layerToRemove != null) layerToRemove.remove();

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Spine", fn:"Duik.structures.spine()" } );
/**
 * Creates a structure for a spine, neck and head.
 * @param {int} [numSpine=2] - The number of structure elements for the spine
 * @param {int} [numNeck=1] - The number of structure elements for the neck
 * @param {boolean} [head=true] - Wether to add a structure element for a head
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new structures
 */
Duik.structures.spine = function ( numSpine, numNeck, hips, head, forceLink )
{
    forceLink = def( forceLink, false);
    numSpine = def( numSpine, 2);
    numNeck = def( numNeck, 1);
    hips = def( hips, true);
    head = def( head, true);

    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;
    
    DuAEF.DuAE.App.beginUndoGroup("Create spine structure");

    DuAEF.DuAE.Project.setProgressMode(true);

    //if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var layerToRemove = null;
    var linkPath = false;
    if (typeof settings.data.structureLinkPaths !== 'undefined')
    {
        linkPath = settings.data.structureLinkPaths;
        if (forceLink) linkPath = !settings.data.structureLinkPaths;
    }
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEF.DuAE.Shape.isSingleShape(l)) layerToRemove = l;
    }

    DuAEF.Duik.Structure.createSpine(hips ,numSpine,numNeck, head, undefined, undefined, forceLink);

    if (layerToRemove != null) layerToRemove.remove();

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Tail", fn:"Duik.structures.tail()" } );
/**
 * Creates a structure for a tail.
 * @param {int} [numTail=3] - The number of structure elements for the tail
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new structures
 */
Duik.structures.tail = function ( numTail, forceLink )
{
    forceLink = def( forceLink, false);
    numTail = def( numTail, 3);

    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("Create tail structure");

    DuAEF.DuAE.Project.setProgressMode(true);

    //if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var layerToRemove = null;
    var linkPath = false;
    if (typeof settings.data.structureLinkPaths !== 'undefined')
    {
        linkPath = settings.data.structureLinkPaths;
        if (forceLink) linkPath = !settings.data.structureLinkPaths;
    }
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEF.DuAE.Shape.isSingleShape(l)) layerToRemove = l;
    }

    DuAEF.Duik.Structure.createTail(numTail, undefined, forceLink);

    if (layerToRemove != null) layerToRemove.remove();

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Custom Structures", fn:"Duik.structures.custom()" } );
/**
 * Creates custom structures.
 * @param {int} [num=3] - The number of structure elements
 * @param {string} [name='Structure'] - The name of the Structure
 * @param {boolean} [forceLink=false] - Wether link the selected layers/properties to the new structures
 * @param {boolean} [randomColor=false] - Wether pick a random color for the new Structure
 */
Duik.structures.custom = function ( num, name, forceLink, randomColor )
{
    randomColor = def( randomColor, false);
    num = def( num, 1);
    forceLink = def( forceLink, false);
    name = def( name, 'Structure');

    //get current comp
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;
    
    var pColor = DuAEF.Duik.Structure.color;
    if (randomColor) DuAEF.Duik.Structure.color = DuAEF.DuJS.Color.Colors.RANDOM;
    DuAEF.DuAE.App.beginUndoGroup("Create structure");

    DuAEF.DuAE.Project.setProgressMode(true);

    //if we have a shape layer selected and its path, and only a path, we're going to remove it after creation.
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    var layerToRemove = null;
    var linkPath = settings.data.structureLinkPaths;
    if (forceLink) linkPath = !settings.data.structureLinkPaths;
    if (layers.length == 1 && !linkPath)
    {
        var l = layers[0];
        if (DuAEF.DuAE.Shape.isSingleShape(l)) layerToRemove = l;
    }

    DuAEF.Duik.Structure.addStructures(num, comp, name, false, forceLink);

    if (layerToRemove != null) layerToRemove.remove();

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();
    DuAEF.Duik.Structure.color = pColor;
}

Duik.structures.functions.push( { name:"Show / Hide all structures", fn:"Duik.structures.show()" } );
/**
 * Shows/Hides all structures.
 * @param {boolean} [invert=false] - Wether invert the structure visibility instead of showing/hiding all
 */
Duik.structures.show = function ( invert )
{
    invert = def( invert, false);

    var structures = DuAEF.Duik.Structure.getStructureLayers();

    if (structures.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Show/hide structures");
    var visible = !structures[0].enabled;
    for (var i = 0 ; i < structures.length ; i++)
    {
        if (invert) structures[i].enabled = !structures[i].enabled;
        else structures[i].enabled = visible;
    }
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Edit Mode", fn:"Duik.structures.edit()" } );
/**
 * Toggles edit mode.
 */
Duik.structures.edit = function (  )
{
    //get from first element
    var structures = DuAEF.Duik.Structure.getStructures(undefined,DuAEF.Duik.Structure.SelectionModes.ELEMENT);

    DuAEF.DuAE.App.beginUndoGroup("Edit structures");
    for (var i = 0 ; i < structures.length ; i++)
    {
        structures[i].toggleEditMode();
    }
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Select all structures", fn:"Duik.structures.select()" } );
/**
 * Selects all structures.
 */
Duik.structures.select = function (  )
{
    DuAEF.DuAE.App.beginUndoGroup("Select structures");
    DuAEF.Duik.Structure.selectStructures(undefined, DuAEF.Duik.Structure.SelectionModes.ALL);
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.structures.functions.push( { name:"Duplicate structures", fn:"Duik.structures.duplicate()" } );
/**
 * Duplicates selected structures.
 */
Duik.structures.duplicate = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    var structures;
    if (comp.selectedLayers.length == 0) structures = DuAEF.Duik.Structure.getStructures(comp, DuAEF.Duik.Structure.SelectionModes.ALL);
    else structures = DuAEF.Duik.Structure.getStructures(comp, DuAEF.Duik.Structure.SelectionModes.ELEMENT);

    if (structures.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Duplicate structures");
    var autorigIds = [];
    var newStructures = [];

    var it = new Iterator(structures);
    it.do(function(structure)
    {
        var newStructure  = structure.duplicate();
        newStructures.push(newStructure);

        //adjust autorig id
        if (newStructure.elements.length > 0)
        {
            var element = newStructure.elements[0];
            var params = DuAEF.Duik.getDuikMarkerParameters(element);
            var newAutorigId = -1;
            var autorigId = -1;
            if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ID]) autorigId = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];
            else return;

            for (var i = 0, num = autorigIds.length; i < num; i++)
            {
                if (autorigIds[i][0] == autorigId) newAutorigId = autorigIds[i][1];
            }

            if (newAutorigId == -1)
            {
                newAutorigId = new Date().getTime();
                autorigIds.push([autorigId,newAutorigId]);
            }

            var itElements = new Iterator(structure.elements);
            itElements.do(function(elmt)
            {
                DuAEF.Duik.setDuikMarkerParameter(elmt,DuAEF.Duik.MarkerParameters.AUTORIG_ID,newAutorigId);
            });
        }

    });

    //select all structures
    var itNew = new Iterator(newStructures);
    itNew.do(function(structure)
    {
        structure.select();
    });

    DuAEF.DuAE.App.endUndoGroup();
}