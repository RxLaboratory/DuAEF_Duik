/**
 * Duik {@link http://duaef-docs.rainboxlab.org/Guides/Duik/automations.html | Automations}<br />
 * Read the {@link http://duik-docs.rainboxlab.org | Duik User Guide} > {@link http://duaef-docs.rainboxlab.org/Guides/Duik/automations.html | Automations} for more information about each method.<br />
 * <code>#include 'Duik16_automation_functions.jsxinc'</code>
 * @namespace
 */
Duik.automation = {}

/**
 * All the automation methods stored as objects which can be parsed easily, for example to automatically build a ui with a button for each method.
 * @property {string} name - A display name for the method
 * @property {string} fn - The source script to eval
 */
Duik.automation.functions = []

//The functions

Duik.automation.functions.push( { name:"Effector", fn:"Duik.automation.effector()" } );
/**
 * Creates an Effector
 * @param {Layer} [effectorLayer] - An optional pre-existing effector
 */
Duik.automation.effector = function ( effectorLayer )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    effectorLayer = def( effectorLayer, DuAEF.Duik.getLayer(DuAEF.Duik.LayerTypes.EFFECTOR,true) );

    DuAEF.DuAE.App.beginUndoGroup( "Effector" );

	var effector = {};

	//Check if there already is an effector in the selection
	effector.effectorLayer = effectorLayer;

	var layers = DuAEF.DuAE.Comp.unselectLayers();
	if (layers.length == 0) return;

	var it = new Iterator(layers);
	it.do(function (layer)
	{
		effector.effect = null;
		for ( var j = 0 ; j < layer.props.length ; j++)
		{
			effector = DuAEF.Duik.Automation.effector(layer.props[j],effector.effect,effector.effectorLayer);
		}
	});

    if (effector) if (effector.effectorLayer) effector.effectorLayer.selected = true;

	DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Wiggle", fn:"Duik.automation.wiggle()" } );
/**
 * Wiggle
 * @param {boolean} [separateDimensions=false] - Wether to separate the dimensions to wiggle them with a different random seed.
 * @param {boolean} [unifiedControl=true] - Wether to add a single control for all properties, or one for each
 */
Duik.automation.wiggle = function ( separateDimensions, unifiedControl )
{
    separateDimensions = def ( separateDimensions, false );
    unifiedControl = def ( unifiedControl, true );

    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if (props.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Wiggle");

    var effect = null;

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0 ; i < props.length ; i++)
    {
        if ( !unifiedControl ) DuAEF.Duik.Automation.wiggle(props[i], separateDimensions );
        else effect = DuAEF.Duik.Automation.wiggle(props[i], separateDimensions ,effect);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);


    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Spring", fn:"Duik.automation.spring()" } );
/**
 * Spring
 */
Duik.automation.spring = function (  )
{
    var effects = Duik.animation.klean(false, false, true, true, false);
    if (effects.length == 0) return;
    //deactivate the anticipation and the interpolation, and disable simulated mode
    for (var i = 0, n = effects.length; i < n; i++)
    {
        var effect = effects[i];
        effect(DuAEF.Duik.PseudoEffects.KLEANER.index['Anticipation_Checkbox']).setValue(0);
        effect(DuAEF.Duik.PseudoEffects.KLEANER.index['Smart Interpolation_Checkbox']).setValue(0);
        effect(DuAEF.Duik.PseudoEffects.KLEANER.index['Spatial Options_Mode_Popup']).setValue(1);
        effect( DuAEF.Duik.PseudoEffects.KLEANER.index['Follow Through_Elasticity random_Slider'] ).setValue(0);
		effect( DuAEF.Duik.PseudoEffects.KLEANER.index['Follow Through_Damping random_Slider'] ).setValue(0);
		effect( DuAEF.Duik.PseudoEffects.KLEANER.index['Overlap (simulation)_Overlap random_Slider'] ).setValue(0);
    }
}

Duik.automation.functions.push( { name:"Swing", fn:"Duik.automation.swing()" } );
/**
 * Swing
 */
Duik.automation.swing = function (  )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if (props.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Swing");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0 ; i < props.length ; i++)
    {
        DuAEF.Duik.Automation.swing(props[i]);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Blink", fn:"Duik.automation.blink()" } );
/**
 * Blink
 */
Duik.automation.blink = function (  )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if (props.length == 0) return;

    DuAEF.DuAE.App.beginUndoGroup("Blink");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0 ; i < props.length ; i++)
    {
        DuAEF.Duik.Automation.blink(props[i]);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Wheel", fn:"Duik.automation.wheel()" } );
/**
 * Wheel
 */
Duik.automation.wheel = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("Wheel");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0; i<layers.length ; i++)
    {
        DuAEF.Duik.Automation.wheel(layers[i]);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Move Away", fn:"Duik.automation.moveAway()" } );
/**
 * Move Away
 */
Duik.automation.moveAway = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("Move Away");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0; i<layers.length ; i++)
    {
        DuAEF.Duik.Automation.moveAway(layers[i]);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Paint Rig", fn:"Duik.automation.paintRig()" } );
/**
 * Paint Rig
 */
Duik.automation.paintRig = function (  )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("Paint Rig");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    for (var i = 0; i<layers.length ; i++)
    {
        DuAEF.Duik.Automation.paintRig(layers[i]);
    }
    DuAEF.DuAE.Comp.selectLayers(layers);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.automation.functions.push( { name:"Walk Cycle", fn:"Duik.automation.walk()" } );
/**
 * Procedural Walk Cycle<br />
 * The method in the Duik API only automatically creates walk cycles with selected Duik Controllers.<br />
 * To create a walk cycle on a custom rig, or a character rigged with another script/extension, use the {@link http://duaef-docs.rainboxlab.org/Framework-Reference/DuAEF.Duik.Automation.html#.walk | DuAEF API} instead with its lower level methods.
 */
Duik.automation.walk = function ( )
{
    var ctrls = DuAEF.Duik.Controller.getControllers(undefined,true);

    DuAEF.DuAE.App.beginUndoGroup("Walk cycle");

    DuAEF.DuAE.Project.setProgressMode(true);

    DuAEF.Duik.Automation.autoWalk(ctrls);

    DuAEF.DuAE.Project.setProgressMode(false);

    DuAEF.DuAE.App.endUndoGroup();    
}

Duik.automation.functions.push( { name:"Looper", fn:"Duik.automation.loop()" } );
/**
 * Looper
 */
Duik.automation.loop = function ( )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if (props.length == 0) return;

    var effect = null;

    DuAEF.DuAE.App.beginUndoGroup("Looper");

    var itProps = new Iterator(props);
    itProps.do(function(prop)
    {
        effect = DuAEF.Duik.Automation.loop(prop,effect);
    });

    DuAEF.DuAE.App.endUndoGroup();
}