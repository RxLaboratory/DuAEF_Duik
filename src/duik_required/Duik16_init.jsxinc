//=========== REINIT FUNCTION ===================
#include "Duik16_reinit.jsxinc"

//=========== GLOBAL VARIABLES =============
var settingsFile, settings, settingsPath, debugLog;
var showNews = true;

var thisScriptFile = new File($.fileName);

//===== NEED FILE AND NETWORK ACCESS =====
//Let's create a temp group we can hide later
obj.orientation = 'stack';
obj.alignChildren = ['fill', 'fill'];
DuAEF.DuScriptUI.askFilesAndNetworkAccess( obj, loadSettings, scriptName, !DuAEF.scriptFirstRun, wipeDuik );


//=========== SETTINGS ===========
function loadSettings ()
{
	if (app.settings.haveSetting(DuAEF.scriptName,"settingsFile")) settingsFile = new File(app.settings.getSetting(DuAEF.scriptName,"settingsFile"));
	settings = new DuSettings(DuAEF.scriptName,settingsFile);

	if (typeof settings.data.duikVersion === 'undefined') settings.data.duikVersion = version;
	//if the version has changed, update some settings
	if (version != settings.data.duikVersion)
	{
		settings.data.showWelcomeScreen = true;
		settings.save();
	}
	settings.data.duikVersion = version;

	//load settings

	//general
	
	if (typeof settings.data.uiMode === 'undefined') settings.data.uiMode = 0;
	if (typeof settings.data.debug === 'undefined') settings.data.debug = false;
	if (typeof settings.data.checkUpdatesAtStartup === 'undefined') settings.data.checkUpdatesAtStartup = true;
	if (typeof settings.data.currentPanel === 'undefined') settings.data.currentPanel = 0;
	if (typeof settings.data.updateCheckDate === 'undefined') settings.data.updateCheckDate = new Date(2018,6,9).getTime(); //this is the public release date of Duik Bassel July, 9th 2018
	if (typeof settings.data.showWelcomeScreen === 'undefined') settings.data.showWelcomeScreen = true;
	DuAEF.debug = settings.data.debug;

    //Let's store this script File
    if ( DuAEF.debug ) thisScriptFile = new File( thisScriptFile.parent.parent.absoluteURI + "/" + DuAEF.scriptName + ".jsx" );
    if (typeof settings.data.scriptFile === 'undefined') settings.data.scriptFile = thisScriptFile.absoluteURI;
	
	//rigging
	if (typeof settings.data.currentRiggingPanel === 'undefined') settings.data.currentRiggingPanel = 0;
	if (typeof settings.data.locatorExtractUsingMP === 'undefined')
	{
		if (DuAEF.DuAE.App.version.version >= 17) settings.data.locatorExtractUsingMP = true;
		else settings.data.locatorExtractUsingMP = false;
	}

	//controllers
	if (typeof settings.data.controllerSizeHint === 'undefined') settings.data.controllerSizeHint = 0;
	if (typeof settings.data.controllerSize === 'undefined') settings.data.controllerSize = 100;
	if (typeof settings.data.controllerNull === 'undefined') settings.data.controllerNull = false;
	if (typeof settings.data.controllerColor === 'undefined') settings.data.controllerColor = "EC1818";
	if (typeof settings.data.controllerDraft === 'undefined') settings.data.controllerDraft = false;
	if (typeof settings.data.controllerExtractUsingMP === 'undefined')
	{
		if (DuAEF.DuAE.App.version.version >= 17) settings.data.controllerExtractUsingMP = true;
		else settings.data.controllerExtractUsingMP = false;
	}
	if (settings.data.controllerNull) DuAEF.Duik.Controller.defaultType = DuAEF.Duik.Controller.Types.NULL;
	DuAEF.Duik.Controller.size = settings.data.controllerSize;
	DuAEF.Duik.Controller.sizeHint = settings.data.controllerSizeHint;
	var color = DuAEF.DuJS.Color.hexToRGB(settings.data.controllerColor);
	DuAEF.Duik.Controller.color = color;

	//autorig
	if (typeof settings.data.autorigBakeStructures === 'undefined') settings.data.autorigBakeStructures = true;
	if (typeof settings.data.autorigTailIK === 'undefined') settings.data.autorigTailIK = 1;
	if (typeof settings.data.ik3Layer === 'undefined') settings.data.ik3Layer = false;

	//animation
	if (typeof settings.data.motionTrailColorMode === 'undefined') settings.data.motionTrailColorMode = 0;
	if (typeof settings.data.motionTrailColor === 'undefined') settings.data.motionTrailColor = "EC1818";
	if (typeof settings.data.easePresets === 'undefined') settings.data.easePresets = ['Presets','25/75 | 0/0','75/25 | 0/0','33/33 | 0/0','33/66 | 0/0','66/33 | 0/0','50/50 | 0/0','80/80 | 0/0'];

	//structures
	if (typeof settings.data.structureSizeHint === 'undefined') settings.data.structureSizeHint = 0;
	if (typeof settings.data.structureSize === 'undefined') settings.data.structureSize = 100;
	if (typeof settings.data.structureColor === 'undefined') settings.data.structureColor = "EC1818";
	if (typeof settings.data.structureLinkPaths === 'undefined') settings.data.structureLinkPaths = false;
	if (typeof settings.data.structureLinkPins === 'undefined') settings.data.structureLinkPins = false;
	if (typeof settings.data.structureLinkLayers === 'undefined') settings.data.structureLinkLayers =false;

	//constraints
	if (typeof settings.data.boneSizeHint === 'undefined') settings.data.boneSizeHint = 0;
	if (typeof settings.data.boneSize === 'undefined') settings.data.boneSize = 100;
	if (typeof settings.data.boneColor === 'undefined') settings.data.boneColor = "EC1818";

	//news
	if (typeof settings.data.news === 'undefined') 
	{
		settings.data.news = {};
		settings.data.news.lastCheck = new Date(2018,6,9).getTime();
	}

	//create Debug log
	settingsPath = settings.file.parent.absoluteURI + '/';
	if (DuAEF_DUIK.debugLog == null)
	{
		var level = DuAEF.Debug.LogLevel.WARNING;
		if (DuAEF.debug) level = DuAEF.Debug.LogLevel.VERBOSE;
		debugLog = new DebugLog(settingsPath + 'Duik_debug_log.txt',true,level,true);
		DuAEF_DUIK.debugLog = debugLog;
		
	}
	else 
	{
		debugLog = DuAEF_DUIK.debugLog;
	}
	DuAEF.Debug.DebugLog = debugLog;

	debugLog.startTimer("Loading Duik");
	debugLog.log(DuAEF.scriptName + " | v" + DuAEF.scriptVersion.fullVersion);
	
	//============= Translations ==============

	#include 'translation/Duik Bassel_fr.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_fr,settingsPath + 'Duik Bassel_fr.json');
	#include 'translation/Duik Bassel_es.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_es,settingsPath + 'Duik Bassel_es.json');
	#include 'translation/Duik Bassel_eo.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_eo,settingsPath + 'Duik Bassel_eo.json');
	#include 'translation/Duik Bassel_zh.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_zh,settingsPath + 'Duik Bassel_zh.json');
	#include 'translation/Duik Bassel_de.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_de,settingsPath + 'Duik Bassel_de.json');
	#include 'translation/Duik Bassel_ru.json.jsxinc'
	DuAEF.DuBinary.toFile(Duik_Bassel_ru,settingsPath + 'Duik Bassel_ru.json');


	DuAEF.Dutranslator.Settings.folder = settingsPath;
	DuAEF.Dutranslator.Settings.prefix = 'Duik Bassel_';
	DuAEF.Dutranslator.Settings.name = "duik";
	DuAEF.Dutranslator.getAvailable();

	//if language has never been set
	if (typeof settings.data.language === 'undefined')
	{
		var ui_languageSetGroup = DuAEF.DuScriptUI.addGroup(obj, 'column');

		ui_languageSetGroup.add('statictext', undefined, "Choose a language among these available languages to launch Duik Bassel.",{multiline:true});
		ui_languageSetGroup.add('statictext', undefined, "You can also change the language at any time in the settings tab of Duik",{multiline:true});
		var prettyNames = DuAEF.Dutranslator.getPrettyNames();
		var lDdd = ui_languageSetGroup.add('dropdownlist', undefined, prettyNames);
		lDdd.selection = 0;
		// find esperanto by default
		for (var i = 0, num = prettyNames.length; i < num; i++)
		{
			if (prettyNames[i] == "Esperanto")
			{
				lDdd.selection = i;
				break;
			}
		}
		var lDok = ui_languageSetGroup.add('button', undefined, "Ok");
		lDok.onClick = function ()
		{
			if (lDdd.selection != null)
			{
				var languageChoosed = lDdd.selection.text;
				DuAEF.Dutranslator.setPrettyLanguage(languageChoosed);
				settings.data.language = DuAEF.Dutranslator.current;
				settings.save();
			}
			ui_languageSetGroup.visible = false;
			checkUpdates();
		}

		DuAEF.DuScriptUI.showUI(obj, false);
		return;
	}
	else
	{
		DuAEF.Dutranslator.setLanguage(settings.data.language);
		checkUpdates();
	}
}

function checkUpdates()
{
	debugLog.log("Checking for Duik updates.");

	if (DuAEF.debug || !settings.data.checkUpdatesAtStartup)
	{
		createUI();
		return;
	}

	//check only if it has not been checked today
	var lastCheck = settings.data.updateCheckDate;
	var now = new Date().getTime();
	//if we've checked in the last 24 hours
	if(now - lastCheck < 24*60*60*1000)
	{
		debugLog.log("Updates already checked today.");
		createUI();
		return;
	}

	var channel = shared.checkForUpdate(false);
	if (!channel)
	{
		createUI();
		return;
	}

	if (channel.items.length == 0)
	{
		createUI();
		return;
	}

	//set the checked date
	settings.data.updateCheckDate = new Date().getTime();
	settings.save();

	var item = channel.items[0];
	var newVersion = item.title;

	//if current version is higher than the new version on the server
	if (!DuAEF.DuJS.Version.compare(newVersion))
	{
		debugLog.log("Current version is up-to-date.");
		createUI();
		return;
	}

	debugLog.log("New version available: " + newVersion);
	debugLog.log("Current version is: " + version);

	var ui_newVersionGroup = DuAEF.DuScriptUI.addGroup(obj, 'column');
	ui_newVersionGroup.alignment = ['fill','fill'];
	ui_newVersionGroup.alignChildren = ['fill','top'];
	DuAEF.DuScriptUI.addSeparator(ui_newVersionGroup, "A new version of Duik is available!");

	//TODO use duscriptui controls
	ui_newVersionGroup.add('statictext',undefined,"Current version: " + version + "\nNew version: " + newVersion, {multiline:true});
	ui_newVersionGroup.add('statictext',undefined,item.pubDate.toString());
	var ui_newVersionDescription = ui_newVersionGroup.add('edittext',undefined,item.description, {multiline:true});
	ui_newVersionDescription.alignment = ['fill','fill'];

	var ui_newVersionOpenButton = ui_newVersionGroup.add('button',undefined,'More info');
	ui_newVersionOpenButton.alignment = ['fill','bottom'];
	//var ui_newVersionUpdateButton = ui_newVersionGroup.add('button',undefined,'Update now!');
	//ui_newVersionUpdateButton.alignment = ['fill','bottom'];
	var ui_newVersionIgnoreButton = ui_newVersionGroup.add('button',undefined,'Ignore');
	ui_newVersionOpenButton.alignment = ['fill','bottom'];

	ui_newVersionOpenButton.onClick = function ()
	{
		debugLog.log("Opening website.");
		DuAEF.DuSystem.openURL(item.link);
		ui_newVersionGroup.visible = false;
		createUI();
	}

	/*ui_newVersionUpdateButton.onClick = function ()
	{
		//get version on server

		//create file

		//set settings.data.scriptFile

		//reload
	}*/

	ui_newVersionIgnoreButton.onClick = function ()
	{
		debugLog.log("Ignored new version.");
		ui_newVersionGroup.visible = false;
		createUI();
	}

	DuAEF.DuScriptUI.showUI(obj, false);
}
