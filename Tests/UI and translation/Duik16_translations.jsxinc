/*


Duik

copyright

blabla credits

blabla licence
*/


//gets the JSON Parser
#include jsonParser.jsxinc

/*
Here's how to use it:

JSON.stringify(value, replacer, space)

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.
	
JSON.parse = function (text, reviver)

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

*/

/** Duik Translator */
var Dutranslator = {};

/**
 * The current language id (fr, en, ..)
 */
Dutranslator.current = '';

/** 
 * The list of availables languages 
 * 
 * Will be filled when executing Dutranslator.getAvailable
 *
 * When adding a language to this list, the translations should
 * be added right after in Dutranslator.localizedStrings to
 * be sure that everything related to a language is available at
 * the same index
 */
Dutranslator.languages = [];

/**
 * The translated strings 
 * 
 * An array which contain for each language, multiples array containing
 * the original text and the translated text
 *
 * The translations should be available at the same index
 * as the language index in Dutranslator.languages
 */
Dutranslator.localizedStrings = [];

/**
 * Parse the translations file which are in the same directory.
 */
Dutranslator.getAvailable = function ()
{

}

/**
 * Set the current language
 * @param {string} languageId - The id of the language to set
 */
Dutranslator.setLanguage = function (languageId) {

}

/**
 * Translate a given string based on the current seted language
 *
 * @param {string} s - 		The text to be translated
 * @param {int} context - 	An integer to be passed to the translated text, used to differenciate different translated texts which have the same original text (context), default is 0
 * 							If something wrong is passed, context will be initialized to -1 (which means, don't check for a specific translation)
 * @param {string array} args -	Args to format into the translated string, default is []
 *								For example, when calling tr("Welcome {#}", -1, "Paul"), the output will be "Welcome Paul"
 *								If too many args are given, there are ignored
 *								If not enough args are give, the {#} are replaced with ?
 * @return {string} The translated text or s if nothing is set or available
 */
function tr(s, context, args) {

}