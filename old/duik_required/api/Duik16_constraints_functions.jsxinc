/**
 * Duik {@link http://duaef-docs.rainboxlab.org/Guides/Duik/constraints.html | Constraints}<br />
 * Read the {@link http://duik-docs.rainboxlab.org | Duik User Guide} > {@link http://duaef-docs.rainboxlab.org/Guides/Duik/constraints.html | Constraints} for more information about each method.<br />
 * <code>#include 'Duik16_constraints_functions.jsxinc'</code>
 * @namespace
 */
Duik.constraints = {}

/**
 * All the constraints methods stored as objects which can be parsed easily, for example to automatically build a ui with a button for each method.
 * @property {string} name - A display name for the method
 * @property {string} fn - The source script to eval
 */
Duik.constraints.functions = []

//The functions

Duik.constraints.functions.push( { name:"Auto-rig & IK", fn:"Duik.constraints.autorig()" } );
/**
 * Auto-Rig & IK
 * @param {boolean} [bakeStructures=true] - Wether to bake the structures after the Auto-rig has completed. Improves performance.
 */
Duik.constraints.autorig = function ( bakeStructures )
{
    bakeStructures = def ( bakeStructures, true );

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    if ( layers.length == 0 ) return;

    //check if there are 3D Layers
    for (var i = 0, n = layers.length; i < n; i++)
    {
        if (layers[i].threeDLayer)
        {
            alert(tr("Some of the selected layers are 3D, but the auto-rig can't rig 3D layers, sorry!"));
            return;
        }
    }

    DuAEF.DuAE.App.beginUndoGroup( "Autorig" );

    DuAEF.DuAE.Project.setProgressMode( true );

    DuAEF.Duik.Autorig.rig( layers, settings.data.autorigTailIK, !settings.data.ik3Layer );

    if ( bakeStructures )
    {
        var structure = new Structure( layers );
        structure.bakeAppearence();
    }

    DuAEF.DuAE.Project.setProgressMode( false );

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"IK", fn:"Duik.constraints.ik()" } );
/**
 * Create IK using selected layers
 */
Duik.constraints.ik = function (  )
{
    var layers = DuAEF.DuAE.Comp.unselectLayers();
	if (layers.length == 0) return;
	DuAEF.DuAE.App.beginUndoGroup( "IK" );

	DuAEF.DuAE.Project.setProgressMode(true);

	var ctrl = DuAEF.Duik.Rigging.ik(layers,null,false,!settings.data.ik3Layer);
	if(ctrl.length > 1) ctrl = ctrl[1];
	else ctrl = ctrl[0];
	ctrl.layer.selected = true;

	DuAEF.DuAE.Project.setProgressMode(false);

	DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Bézier IK", fn:"Duik.constraints.bezierIk()" } );
/**
 * Create Bézier IK using selected layers
 */
Duik.constraints.bezierIk = function (  )
{
    var layers = DuAEF.DuAE.Comp.unselectLayers();
	if (layers.length == 0) return;
	DuAEF.DuAE.App.beginUndoGroup( "Bézier IK" );

	DuAEF.DuAE.Project.setProgressMode(true);

	var ctrl = DuAEF.Duik.Rigging.ik(layers,undefined,true);
	ctrl[1].layer.selected = true;

	DuAEF.DuAE.Project.setProgressMode(false);

	app.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Connector", fn:"Duik.constraints.quickConnector()" } );
/**
 * Quick Connector
 */
Duik.constraints.quickConnector = function ()
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if ( props.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup("Connector" );
    DuAEF.Duik.Rigging.quickConnector( props );
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Bones", fn:"Duik.constraints.bones()" } );
/**
 * Add bones
 * @param {boolean} [randomColor=false] - Wether to assign a random color to the bones
 * @param {boolean} [tangents=true] - Wether to create bones for the tangents in case the selected property is a Bézier path
 */
Duik.constraints.bones = function ( randomColor, tangents )
{
    randomColor = def( randomColor, false );
    tangents = def( tangents, true );

    var props = DuAEF.DuAE.Comp.getSelectedProps();

    //just create a single bone without any prop
    if (props.length == 0)
    {
        DuAEF.DuAE.App.beginUndoGroup( "Create bones" );

        var bone = DuAEF.Duik.Bone.createBone();
        bone.layer.selected = true;

        DuAEF.DuAE.App.endUndoGroup();

        return;
    }

    DuAEF.DuAE.App.beginUndoGroup( "Create bones" );

    DuAEF.DuAE.Project.setProgressMode( true );

    if ( randomColor ) DuAEF.Duik.Bone.color = DuAEF.DuJS.Color.random();
    else if (settings.data.boneColor) DuAEF.Duik.Bone.color = DuAEF.DuJS.Color.hexToRGB( settings.data.boneColor );
    var bones = [];
    var itProps = new Iterator( props );
    itProps.do( function( prop )
    {
        bones = bones.concat( DuAEF.Duik.Bone.addBone( prop, undefined, tangents ) );
    } );

    //if nothing was created
    if ( bones.length == 0 )
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        var itLayers = new Iterator( layers );

        //Try to find puppet pins
        itLayers.do( function( layer )
        {
            var pins = DuAEF.DuAE.Layer.getPuppetPins( layer );
            var itPins = new Iterator( pins );
            itPins.do( function( pin )
            {
                bones.push( DuAEF.Duik.Bone.addBone( pin, undefined, tangents ) );
            } );
        } );

        //Try any spatial property
        if ( bones.length == 0 )
        {
            itProps.do( function( prop )
            {
                bones = bones.concat( DuAEF.Duik.Bone.addBones( prop, undefined, tangents ) );
            } );
        }

    }

    DuAEF.DuAE.Comp.selectLayers( bones );

    DuAEF.DuAE.Project.setProgressMode( false );

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Quick Parent", fn:"Duik.constraints.autoParent()" } );
Duik.constraints.functions.push( { name:"Quick Parent Orphans", fn:"Duik.constraints.autoParent(true)" } );
/**
 * Auto-Parent. Parent selected layers to the last selected one.
 * @param {boolean} [orphansOnly=false] - When true, parent only the orphans to the last selected layers
 */
Duik.constraints.autoParent = function ( orphansOnly )
{
    orphansOnly = def(orphansOnly, false);
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    DuAEF.DuAE.App.beginUndoGroup( "Auto-parent layers" );
    DuAEF.DuAE.Layer.parent( layers, undefined, orphansOnly );
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Parent Constraint", fn:"Duik.constraints.parentConstraint()" } );
/**
 * Parent Constraint
 */
Duik.constraints.parentConstraint = function ( )
{
    var layers = DuAEF.DuAE.Comp.unselectLayers();
    if ( layers.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Parent link" );
    for ( var i = 0; i < layers.length; i++ )
    {
        DuAEF.Duik.Rigging.parentConstraint( layers[ i ] );
    }
    DuAEF.DuAE.Comp.selectLayers( layers );
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Path Constraint", fn:"Duik.constraints.pathConstraint()" } );
/**
 * Path Constraint
 * @param {Property} [path] - The path to use to constrain the selected layers.<br />
 * If undefined, Duik will use the first path selected on the last selected layer.
 * @return {boolean} True if a constraint was created, false if no path was found and nothing has been done
 */
Duik.constraints.pathConstraint = function ( path )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return false;

    var layers = comp.selectedLayers;

    if ( typeof path === 'undefined' && layers.length < 2) return false; 

    if ( typeof path === 'undefined' ) 
    {
        var pathLayer = layers.pop();
        var pathProps = DuAEF.DuAE.Layer.getSelectedProps( pathLayer, PropertyValueType.SHAPE )
        if (pathProps.length == 0) return false;
        path = pathProps.pop();
    }

    DuAEF.DuAE.App.beginUndoGroup( "Path constraint" );
    var it = new Iterator(layers);
    it.do(function (layer) {
        DuAEF.Duik.Rigging.pathConstraint( layer, path );
    });

    DuAEF.DuAE.App.endUndoGroup();

    return true;
}

Duik.constraints.functions.push( { name:"Position Constraint", fn:"Duik.constraints.positionConstraint()" } );
/**
 * Position Constraint
 */
Duik.constraints.positionConstraint = function ( )
{
    var layers = DuAEF.DuAE.Comp.unselectLayers();
    if ( layers.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Orientation Constraint" );
    for ( var i = 0; i < layers.length; i++ )
    {
        DuAEF.Duik.Rigging.positionConstraint( layers[ i ] );
    }
    DuAEF.DuAE.Comp.selectLayers( layers );
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Orientation Constraint", fn:"Duik.constraints.orientationConstraint()" } );
/**
 * Orientation Constraint
 */
Duik.constraints.orientationConstraint = function ( )
{
    var layers = DuAEF.DuAE.Comp.unselectLayers();
    if ( layers.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Orientation Constraint" );
    for ( var i = 0; i < layers.length; i++ )
    {
        DuAEF.Duik.Rigging.orientationConstraint( layers[ i ] );
    }
    DuAEF.DuAE.Comp.selectLayers( layers );
    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"List", fn:"Duik.constraints.list()" } );
/**
 * List
 */
Duik.constraints.list = function ( )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
	if (props.length == 0) return;

	DuAEF.DuAE.App.beginUndoGroup( "List" );

	var layers = DuAEF.DuAE.Comp.unselectLayers();
	for (var i = 0 ; i < props.length ; i++)
	{
		DuAEF.Duik.Automation.list(props[i]);
	}
	DuAEF.DuAE.Comp.selectLayers(layers);

	DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Expose Transform", fn:"Duik.constraints.exposeTransform()" } );
/**
 * Expose Transform
 */
Duik.constraints.exposeTransform = function ( )
{
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;

    DuAEF.DuAE.App.beginUndoGroup("Expose Transform");

    var layers = DuAEF.DuAE.Comp.unselectLayers();
    var ctrls = [];
    if (layers.length == 0) ctrls.push(DuAEF.Duik.Rigging.exposeTransform(comp));
    else
    {
        for (var  i = 0, num = layers.length ; i < num ; i++)
        {
            var ctrl = DuAEF.Duik.Rigging.exposeTransform(comp,layers[i]);
            ctrls.push(ctrl);
        }
    }

    DuAEF.DuAE.Comp.selectLayers(ctrls);

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Zero", fn:"Duik.constraints.zero()" } );
/**
 * Add Zero
 */
Duik.constraints.zero = function ( )
{
    DuAEF.DuAE.Comp.doSelectedLayers( DuAEF.Duik.Rigging.addZero, "Add zero" );
}

Duik.constraints.functions.push( { name:"Reset Transform (PRS)", fn:"Duik.constraints.resetPRS()" } );
/**
 * Reset Transform (set to Zero)
 */
Duik.constraints.resetPRS = function ( )
{
    DuAEF.DuAE.Comp.doSelectedLayers( DuAEF.Duik.Animation.resetPRS, "Reset PRS" );
}

Duik.constraints.functions.push( { name:"Lock Property", fn:"Duik.constraints.lockProperty()" } );
/**
 * Lock Property
 */
Duik.constraints.lockProperty = function ( )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if ( props.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Lock properties" );

    DuAEF.DuAE.Property.lock( props );

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Separate Dimensions", fn:"Duik.constraints.separateDimensions()" } );
/**
 * Separate Dimensions
 */
Duik.constraints.separateDimensions = function ( )
{
    var props = DuAEF.DuAE.Comp.getSelectedProps();
    if ( props.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Separate dimensions" );

    for ( var i = 0, num = props.length; i < num; i++ )
    {
        DuAEF.Duik.Rigging.separateDimensions( props[ i ] );
    }

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Locator", fn:"Duik.constraints.locator()" } );
/**
 * Add Locator
 */
Duik.constraints.locator = function ( )
{
     var layers = DuAEF.DuAE.Comp.getSelectedLayers();

    DuAEF.DuAE.App.beginUndoGroup( "Add Locator(s)" );

    if ( layers.length )
    {
        new Iterator( layers ).do( function( layer )
        {
            DuAEF.Duik.Rigging.addLocator( layer );
        } );
    }
    else
    {
        DuAEF.Duik.Rigging.addLocator();
    }

    DuAEF.DuAE.App.endUndoGroup();
}

Duik.constraints.functions.push( { name:"Extract Locators", fn:"Duik.constraints.extractLocators()" } );
/**
 * Extract Locators
 * @param {boolean} [useMasterProperties=true] - Wether to use master properties instead of expressions to extract the controllers. True by default if Ae >= 17.0
 */
Duik.constraints.extractLocators = function ( useMasterProperties )
{
    var layers = DuAEF.DuAE.Comp.getSelectedLayers();
    if ( layers.length == 0 ) return;

    DuAEF.DuAE.App.beginUndoGroup( "Extract Locators" );

    new Iterator( layers ).do( function( layer )
    {
        DuAEF.Duik.Rigging.extractLocators( layer, useMasterProperties );
    } );

    DuAEF.DuAE.App.endUndoGroup();
}